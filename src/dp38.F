C
C  THIS FILE CONTAINS THE GRAPHICS DEVICE SPECIFIC CODE.
C
C  THE FOLLOWING GRAPHICS DEVICES ARE SUPPORTED:
C
C   1. POSTSCRIPT    - POSTSCRIPT AND ENCAPSULATED POSTSCRIPT
C                      DEVICES.
C   2. X11           - X11 DEVICE.
C   3. QUICKWIN      - QUICKWIN LIBRARY FOR INTEL COMPILER FOR
C                      MICROSOFT WINDOWS.
C   4. GD            - GD LIBRARY (FOR JPEG, PNG, GIF, TIFF, BMP).
C   5. AQUA          - AQUATERM LIBRARY FOR MAC OSX.
C   6. LATEX         - GENERATE GRAPHICS IN LATEX FORMAT.
C   7. SVG           - SCALABLE VECTOR GRAPHICS FORMAT.
C   8. LIBPLOT       - UNIX LIBPLOT LIBRARY.  SUPPORTS 14 DIFFERENT
C                      DEVICES - 8 OF THESE ARE REDUNDANT TO DRIVERS
C                      ALREADY SUPPORTED BY DATAPLOT, BUT 6 NEW FORMATS
C                      (PNM BITMAP FORMAT, ADOBE ILLUSTRATOR, UNIX METAFILE
C                      FORMAT, HP PCL PRINTER PROTOCOL, XFIG FORMAT, CGM)
C                      ARE SUPPORTED.
C   9. GENERAL       - DATAPLOT SPECIFIC METAFILE.  USED BY THE
C                      TCL/TK GUI SCRIPTS.
C  10. GENERAL CGM   - GGM METAFILE (ONLY ASCII IS SUPPORTED)
C  11. CAIRO         - A GRAPHICS LIBRARY AVAILABLE ON LINUX/UNIX
C                      PLATFORMS (E.G., USED BY FIREFOX).
C                      CURRENTLY SUPPORTED ON LINUX FOR POSTSCRIPT, PDF
C                      SVG, PNG, AND  X11.  THE QUARTZ AND WINDOWS GDI
C                      ARE STILL UNDER DEVELOPMENT.
C
C  THE FOLLOWING ARE ESSENTIALLY OBSOLETE DEVICES.  SOME OF THESE
C  MAY HAVE OCCASSIONAL USE AS AN EMULATION DEVICE.
C
C  12. TEKTRONIX     - MANY DIFFERENT TEKTRONIX MODELS ARE
C                      SUPPORTED.  THIS IS AN ESSENTIALLY
C                      OBSOLETE DEVICE.  IT MAY HAVE OCCASSIONAL
C                      USE AS AN EMULATION DEVICE.
C  13. HP            - SUPPORT 7221 PLOTTER, 2622, 2623, 2627
C                      2647 TERMINALS.  THIS IS ESSENTIALLY AN
C                      OBSOLETE DEVICE.
C  14. HPGL          - HP HPGL PENPLOTTER PROTOCOL.
C  15. CALCOMP       - CALCOMP LIBARARY.  THIS IS ESSENTIALLY
C                      OBSOLETE, MAY HAVE OCCASSIONAL USE AS AN
C                      EMULATION LIBRARY.
C  16. ZETA          - A SLIGHT VARIATION OF CALCOMP THAT WAS
C                      USED BY ZETA PENPLOTTERS
C  17. SUN           - DRIVER FOR OLD SUN NEWS WINDOW SYSTEM.
C  18. DEC REGIS     - VT125/VT340 TERMINALS.
C  19. QUIC          - QUIC QMS PROTOCOL.
C  20. TURB          - VGA DRIVER FOR TURBO-C (FOR ORIGINAL WINDOWS
C                      GUI THAT WAS WRITTEN IN TURBO-C).
C
C  THE FOLLOWING ARE UNDER VARIOUS STAGES OF DEVELOPMENT.
C
C  21. GKS           - ANSI GKS STANDARD LIBRARY.  NOTE THAT THIS
C                      DRIVER IS CODED, BUT NOT TESTED.  SINCE THE
C                      GKS STANDARD WAS NOT WIDELY ADOPTED, THIS
C                      USEFULNESS OF THIS DRIVER IS QUESTIONABLE.
C                      THIS DRIVER IS NOT CURRENTLY BEING DEVELOPED
C                      FURTHER.
C  22. LAHEY         - LAHEY INTERACTOR AND LAHEY WININTERACTOR.
C                      CODED, BUT NOT ACTIVE.  THESE LIBRARIES REQUIRE
C                      DATAPLOT TO BE BUILT AS FULL BLOWN WINDOWS
C                      APPLICATION, SO ADDITIONAL WORK NEEDS TO BE
C                      DONE TO MAKE THESE ACTIVE DRIVERS.  THERE IS
C                      ALSO AN OLD CALCOMP STYLE LIBRARY THAT WAS
C                      USED WITH A VERY OLD VERSION OF THE LAHEY
C                      COMPILER.  AS WE HAVE ADOPTED THE INTEL
C                      COMPILER AS OUR MAIN DEVELOPMENT PLATFORM
C                      UNDER WINDOWS, WE ARE NOT ACTIVELY DEVELOPING
C                      THE WININTERACTOR DRIVER AS THIS TIME.
C  23. OPEN-GL       - THIS DRIVER STILL UNDER DEVELOPMENT.  THIS WILL
C                      BE AN IMPORTANT DRIVER IF WE WANT TO ADD
C                      MORE HIGH PERFORMANCE VISUALIZATION CAPABILITIES.
C  24. ABSOFT        - GRAPHICS LIBRARY SUPORTED BY ABSOFT COMPILER.
C                      NOTE THAT THIS IS ACTUALLY THE PLPLOT LIBRARY
C                      WHICH CAN BE USED INDEPENDENTLY OF THE ABSOFT
C                      COMPILER.
C
C  THE FOLLOWING ARE CURRENTLY UNDER CONSIDERATION FOR ADDITION TO
C  DATAPLOT.
C
C  25. VRML         - ALONG WITH OPEN-GL, WOULD BE USEFUL IF WE ADD
C                     HIGH PERFORMANCE VISUALIZATION CAPABILITIES.
C  26. WMF          - WINDOWS METAFILE
C  27. D3           - D3 JAVASCRIPT LIBRARY
C
C  THE FOLLOWING ROUTINES TYPICALY NEED TO BE MODIFIED WHEN
C  ADDING A NEW DEVICE DRIVER:
C
C  1. GRCLDE    - CLOSE THE DEVICE
C  2. GRDRIM    - DRAW AN IMAGE
C  3. GRDRLI    - DRAW A LINE BETWEEN TWO POINTS
C  4. GRDRPH    - DRAW A HORIZONTAL POLYMARKER
C  5. GRDRPL    - DRAW A POLYLINE
C  6. GRERSC    - ERASE THE SCREEN
C  7. GREXIT    - SHUT DOWN A DEVICE BEFORE EXITING DATAPLOT
C  8. GRFIRE    - FILL A POLYGONAL REGION
C  9. GRINDE    - INITIALIZE THE GRAPHICS DEVICE.
C 10. GRMOBE    - PERFORM A MOVE
C 11. GROPDE    - OPEN THE GRAPHICS DEVICE
C 12. GRRESC    - READ THE SCREEN COORDINATES
C 13. GRSAGR    - IMPLEMENT SAVE PLOT, REPEAT PLOT, CYCLE PLOT
C 14. GRSECO    - SET THE COLOR
C 15. GRSEC2    - SET THE RGB COLOR
C 16. GRSEPA    - SET THE PATTERN (I.E., LINE TYPE, FILL TYPE, ETC.)
C 17. GRSEPP    - SET THE PICTURE POINTS FOR THE DEVICE
C 18. GRSESI    - SET THE TEXT SIZE
C 19. GRSETH    - SET THE LINE THICKNESS
C 20. GRTRCO    - TRANSLATE THE COLOR
C 21. GRTRC2    - TRANSLATE THE RGB COLOR
C 22. GRTRPA    - TRANSLATE THE LINE OR FILL PATTERN
C 23. GRTRSI    - TRANSLATE THE TEXT SIZE
C 24. GRTTHI    - TRANSLATE THE LINE THICKNESS
C 25. GRWRTH    - WRITE A HORIZONTAL TEXT STRING
C 26. GRWRTV    - WRITE A VERTICAL TEXT STRING
C
C  THE FOLLOWING CODES TYPICALLY DO NOT REQUIRE UPDATING FOR
C  A NEW GRAPHICS DEVICE (ALTHOUGH YOU MAY WANT TO ADD A
C  PLACEHOLDER).
C
C  1. GRCOSC   - COPY THE SCREEN (BASICALLY OBSOLETE, PREVIOUSLY
C                SUPPORTED OLD TEKTRONIX HARD COPY UNITS)
C  2. GRDETH   - DETERMINE LENGTH OF HORIZONTAL TEXT STRING
C  3. GRDETV   - DETERMINE LENGTH OF VERTICAL TEXT STRING
C  4. GRRIBE   - RING THE BELL
C  5. GRSECA   - SET THE TEXT CASE (LOWER/UPPER)
C  6. GRSEDI   - SET THE TEXT DIRECTION
C  7. GRSEFI   - SET THE FILL SPECIFICATION
C  8. GRSEFO   - SET THE TEXT FONT
C  9. GRSEJU   - SET THE TEXT JUSTIFICATION
C 10. GRSEMO   - SET THE DEVICE MODE (GRAPHICS/DIALOGUE)
C
C  THE FOLLOWING CODES DO NOT CONTAIN ANY DEVICE SPECIFIC
C  CODE.
C
C  1. GRTRCA   - TRANSLATE THE TEXT CASE (LOWER/UPPER)
C  2. GRTRDI   - TRANSLATE THE TEXT DIRECTION
C  3. GRTRFI   - TRANSLATE THE FILL SPECIFICATION
C  4. GRTRFO   - TRANSLATE THE TEXT FONT
C  5. GRTRJU   - TRANSLATE THE TEXT JUSTIFICATION
C
C  NOTE THAT SOME DRIVERS ARE NOT AVAILBLE ON ALL PLATFORMS.  THERE
C  ARE TWO WAYS THAT WE ADDRESS THIS.
C
C   1. WE PROVIDE AN INTERMEDIATE LIBRARY.  CONDITIONAL COMPILATION
C      IS USED TO SPECIFY WHETHER THE LIBRARY IS AVAILABLE.
C
C      THIS APPROACH IS CURRENTLY USED FOR
C
C      a. X11     HAVE_X11 = ON if X11 is available
C      b. GD (for PNG, JPEG, GIF, TIFF, BMP, WEBP)
C                 HAVE_GD = ON if GD is available
C                 HAVE_TIFF = ON if Tiff library is available
C                 HAVE_VPX = ON if VPX library (Webp format) is available
C      c. AQUA    HAV_AQUA = ON if AquaTerm library is available
C                            (MacOS only)
C      d. libplot HAVE LIBPLOT = ON if libplot library is available
C
C   2. 2016/10: IMPLEMENT PLATFORM DEPENDENT DEVICES WITH PRE-PROCESSOR
C               DIRECTIVES.  FOR EXAMPLE. "-DHAVE_CAIRO".  THIS AVOIDS
C               HAVING TO PROVIDE DUMMY LIBRARIES.
C
      SUBROUTINE GRCLDE
C
C     PURPOSE--CLOSE A SPECIFIC GRAPHICS DEVICE
C              THAT IS, TURN OFF A DEVICE WHICH IS
C              CURRENTLY ON.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT LATEX DRIVER
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      DEVICE DRIVERS (CAIRO, WMF, D3)
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
CQWIN USE DFLIB
#ifdef HAVE_QWIN
      USE IFQWIN
#endif
C
      CHARACTER*130 ICSTR
CCCCC CHARACTER*130 IATEMP
      CHARACTER*4 ISUBN0
      CHARACTER*1 IA
C
C     FOLLOWING LINES FOR LATEX CODE THAT IS CURRENTLY
C     COMMENTED OUT.
C
CCCCC CHARACTER*80 IFILE1
CCCCC CHARACTER*12 ISTAT1
CCCCC CHARACTER*12 IFORM1
CCCCC CHARACTER*12 IACCE1
CCCCC CHARACTER*12 IPROT1
CCCCC CHARACTER*12 ICURS1
CCCCC CHARACTER*4 IENDF1
CCCCC CHARACTER*4 IREWI1
CCCCC CHARACTER*4 IERRF1
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOF2.INC'
CCCCC INCLUDE 'DPCOFO.INC'
C
      CHARACTER*4 IQWNFL
      COMMON/QUICKW5/IQWNFL
C
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='CLDE'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'CLDE')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRCLDE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,IMODE2,IMODE3
   52   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)IGUNIT,IGBAUD,IGCODE
   53   FORMAT('IGUNIT,IGBAUD,IGCODE = ',2I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)ISOFT,ISOFT2,ISOFT3
   54   FORMAT('ISOFT,ISOFT2,ISOFT3 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)IBUGG4,ISUBG4,IERRG4
   56   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,61)IPPDE1,IPPDE2,NCPOST
   61   FORMAT('IPPDE1,IPPDE2,NCPOST = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCPOST.GE.1)THEN
          DO63I=1,NCPOST
            WRITE(ICOUT,64)I,ICPOST(I:I)
   64       FORMAT('I,ICPOST(I:I) = ',I8,2X,A1,4X)
            CALL DPWRST('XXX','BUG ')
   63     CONTINUE
        ENDIF
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4662 CASE (A PENPLOTTER)--  **
C               **  TO TURN IT OFF,                                 **
C               **  WRITE OUT AN ESCAPE A F  .                      **
C               ******************************************************
C
 1100 CONTINUE
      IF(IMODEL.EQ.'4662')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='AF'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      IF(IPPDE1.EQ.'TEKT')GOTO8910
      GOTO8900
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO TURN IT OFF,                                 **
C               **  SEND ESCAPE PERIOD RIGHT-PARENTHESIS            **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 72.                             **
C               ******************************************************
C
 2100 CONTINUE
      ICSTR(1:1)='+'
      ICSTR(2:2)=IESCC
      ICSTR(3:4)='.)'
      ICSTR(5:5)=IESCC
      ICSTR(6:8)='.Z:'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'7221')GOTO8910
      GOTO8900
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO    TURN OFF   INSTRUCTION PER SE,   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
C
C     THE FOLLOWING WAS A SUGGESTED AUGMENTATION (NBS'S YONG-KI KIM,
C     MARCH, 1985).  WHEN THE PLOTTER IS CONNECTED IN SERIES BETWEEN THE
C     HOST AND THE TERMINAL, AND THE PLOTTER NEEDS TO BE PUT IN A
C     LISTEN-AND-CAPTURE MODE WHEN GENERATING A PLOT.  TO SPECIFY THIS,
C     THE ANALYST ENTERS THE COMMAND        HP-GL +    RATHER THAN THE USUAL
C     HP-GL.
C
      IF(IPPDE1.EQ.'HPGL' .OR. IPPDE1.EQ.'HP-G' .OR.
     1  (IPPDE1.EQ.'HP'.AND.IPPDE2.EQ.'GL') .OR.
     1  (IPPDE1.EQ.'HP'.AND.IPPDE2.EQ.'GL+'))THEN
        GOTO8910
      ENDIF
      GOTO8900
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE XX-X, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      IF((IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2622') .OR.
     1   (IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2623') .OR.
     1   (IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2627') .OR.
     1   (IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2647'))THEN
        GOTO8910
      ENDIF
      GOTO8900
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT CASE.                        **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:12)='CLOSE DEVICE'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(IPPDE1.EQ.'GENE')GOTO8910
      GOTO8900
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:4)='CLDE'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(IPPDE1.EQ.'CODE')GOTO8910
      GOTO8900
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3300 CONTINUE
C
      IF(IPPDE1.EQ.'CODE')GOTO8910
      GOTO8900
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO TURN IT OFF--                                **
C               **  WRITE OUT AN XXXXXXXXXXXXXX                     **
C               **  USE CALCOMP LIBRARY (NULL ROUTINE)              **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO8900
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  TO TURN IT OFF--                                **
C               **  CALL PLOT WITH IPEN=999                         **
C               **  ONLY CALL IF ILAHCL = 'ON'                      **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
C
C  ILAHCL  = IF ON, RETURN TO VIDEO TEXT MODE.  THIS IS PREFERRED
C            CHOICE FOR BETTER ALPHANUMERIC OUTPUT.  HOWEVER, MAY WANT
C            TO LEAVE IN GRAPHICS MODE TO GENERATE DIAGRAMMATIC GRAPHICS
C  ILAHPA  = IF ON, REQUEST A CARRIAGE RETURN BEFORE CONTINUING.  IF
C            OFF, CONTINUE REGARDLESS.
C  ILAHSW  = ON IF GRAPHICS MODE SET, OFF IF NORMAL VIDEO MODE SET
C
      IF(ILAHPA.EQ.'ON')THEN
        WRITE(IPR,4601)
 4601   FORMAT(1X,'ENTER CARRIAGE RETURN TO CONTINUE')
        READ(IRD,'(1X,A1)')IA
      ENDIF
      IF(ILAHCL.EQ.'ON')THEN
        AX=0.
        AY=0.
        IPEN=999
#ifdef HAVE_LAHEY_CALCOMP
        IF(ILAHSW.EQ.'ON')CALL PLOT(AX,AY,IPEN)
#endif
        ILAHSW='OFF' 
      ENDIF
      GOTO8900
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      IF(IQWNFC.EQ.'TEXT')THEN
#ifdef HAVE_QWIN
        IRESLT=FOCUSQQ(IPR)
        IRESLT=DISPLAYCURSOR($GCURSORON)
#endif
      ENDIF
      IQWNFL='CLOS'
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IFLAG=1
#ifdef HAVE_OPENGL
      CALL GLCLDE()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IHAND1=0
#ifdef HAVE_LAHEY_WINTERACTOR
      CALL WindowSelect(IHAND1)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO TURN IT OFF--                                **
C               **  WRITE OUT    70Z                                **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY (NULL ROUTINE)              **
C               ******************************************************
C
 5100 CONTINUE
CCCCC WRITE(IGUNIT,5111)
C5111 FORMAT('70Z')
CCCCC ICSTR(1:3)='70Z'
CCCCC NCSTR=3
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO8900
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               **  NOT NECESSARY TO CLOSE DEVICE                   **
C               ******************************************************
C
 6600 CONTINUE
      IF(IPPDE1.EQ.'SUN')GOTO8910
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO CLOSE DEVICE---                              **
C               **  WRITE OUT AN XX                                 **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 8100 CONTINUE
      IF(IPPDE1.EQ.'REGI')GOTO8910
      GOTO8900
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  REFERENCE: POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **  COOKBOOK FROM ADOBE SYSTEMS                     **
C               ******************************************************
C
 8600 CONTINUE
C
      IF(IPPDE1.EQ.'POST')GOTO8910
      GOTO8900
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE - NULL ROUTINE              **
C               ******************************************************
C
 9100 CONTINUE
C
      IF(IPPDE1.EQ.'QUIC')GOTO8910
      GOTO8900
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11     CASE - FLUSH THE BUFFER       **
C               **  REFERENCE--DDC SOFTWARE TRANSLATOR MANUAL       **
C               ******************************************************
C
 9600 CONTINUE
C
#ifdef HAVE_X11
      IF(IX11OF.NE.'OFF')CALL XCLEAR
      IF(IPPDE1.EQ.'X11 ')GOTO8910
#endif
      GOTO8900
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
C     NOTE: THIS ROUTINE NO LONGER ACTIVE, SO COMMENT OUT.
10000 CONTINUE
CTURB CALL TCCLDE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
#ifdef HAVE_GKS
      CALL GDAWK(IGKSWK)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               **  LIBRARY FROM ABSOFT COMPILER                    **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
#ifdef HAVE_AQUA
COLD  CALL aqtRenderPlot()
      CALL aqrend()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
C
CCCCC ICSTR(1:1)=IBASLC
CCCCC ICSTR(2:13)='end{picture}'
CCCCC NCSTR=13
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC IF(IMODEL.NE.'STAN')THEN
C
CCCCC   ICSTR(1:1)=' '
CCCCC   NCSTR=1
CCCCC   CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC   ICSTR(1:1)=IBASLC
CCCCC   ICSTR(2:18)='begin{verbatim}'
CCCCC   NCSTR=18
CCCCC   CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC ELSEIF(ILATFO.EQ.'NULL')THEN
C
CCCCC   ICSTR(1:1)=' '
CCCCC   NCSTR=1
CCCCC   CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC   ICSTR(1:1)=IBASLC
CCCCC   ICSTR(2:16)='end{document}'
CCCCC   NCSTR=16
CCCCC   CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC ELSE
CCCCC   IOUNI1=IST1NU
CCCCC   IFILE1=ILATFO
CCCCC   ISTAT1='OLD'
CCCCC   IFORM1='FORMATTED'
CCCCC   IACCE1='SEQUENTIAL'
CCCCC   IPROT1='READONLY'
CCCCC   ICURS1='CLOSED'
CCCCC   ISUBN0='CAPT'
CCCCC   IERRF1='NO'
C
CCCCC   IREWI1='ON'
CCCCC   CALL DPOPFI(IOUNI1,IFILE1,ISTAT1,IFORM1,IACCE1,IPROT1,ICURS1,
CCCCC1                IREWI1,ISUBN0,IERRF1,IBUGS2,ISUBRO,IERROR)
CCCCC   IF(IERRF1.EQ.'YES')GOTO9000
C
C  NOW LOOP THROUGH FILE (ASSUME MAXIMUM OF 1,000 LINES).
C
CCCCC   DO15301I=1,1000
CCCCC     IATEMP=' '
CCCCC     READ(IOUNI1,15392,END=15399,ERR=15399)IATEMP
C15392     FORMAT(A240)
CCCCC     ILAST=1
CCCCC     DO15410J=240,1,-1
CCCCC       IF(IATEMP(J:J).NE.' ')THEN
CCCCC         ILAST=J
CCCCC         GOTO15419
CCCCC       ENDIF
C15410     CONTINUE
C15419     CONTINUE
CCCCC     ICSTR(1:ILAST)=IATEMP(1:ILAST)
CCCCC     NCSTR=ILAST
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C15301   CONTINUE
C15399   CONTINUE
CCCCC   IENDF1='OFF'
CCCCC   IREWI1='ON'
CCCCC   CALL DPCLFI(IOUNI1,IFILE1,ISTAT1,IFORM1,IACCE1,IPROT1,ICURS1,
CCCCC1                IENDF1,IREWI1,ISUBN0,IERRF1,IBUGS2,ISUBRO,IERROR)
CCCCC   IF(IERRF1.EQ.'YES')GOTO9000
CCCCC ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IF(IMODEL.EQ.'POST')IVAL1=2
      IF(IMODEL.EQ.'PDF')IVAL1=3
      IF(IMODEL.EQ.'SVG')IVAL1=4
      IF(IMODEL.EQ.'QUAR')IVAL1=5
      IF(IMODEL.EQ.'PNG')IVAL1=6
      IF(IMODEL.EQ.'WIND')IVAL1=7
      IF(IMODEL.EQ.'EPS')IVAL1=8
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
#ifdef HAVE_CAIRO
      CALL CAFLSH(IVAL2,IVAL1)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               ********************************************
C               **  STEP 89--                             **
C               **  IF CALLED FOR, WRITE OUT              **
C               **  A USER-DEFINED POST-PLOT LINE         **
C               ********************************************
C
 8900 CONTINUE
      IF(IPPDE1.EQ.'ANY' .OR. IPPDE1.EQ.'ALL')THEN
        IF(NCPOST.GE.1)THEN
          NCSTR=NCPOST
          IF(NCSTR.GT.40)NCSTR=40
          ICSTR(1:NCSTR)=ICPOST(1:NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
C
C               ********************************************
C               **  STEP 891-                             **
C               **  IF CALLED FOR, WRITE OUT              **
C               **  A USER-DEFINED POST-PLOT LINE         **
C               ********************************************
C
 8910 CONTINUE
      IF(NCPOST.GE.1)THEN
        NCSTR=NCPOST
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPOST(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'CLDE')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRCLDE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)IPPDE1,IPPDE2,NCSTR,NCPOST
 9023   FORMAT('IPPDE1,IPPDE2,NCSTR,NCPOST = ',2(A4,2X),2I5)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GE.1)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
        IF(NCPOST.GE.1)THEN
          DO9033I=1,NCPOST
            WRITE(ICOUT,9034)I,ICPOST(I:I)
 9034       FORMAT('I,ICPOST(I:I) = ',I8,2X,A1,4X)
            CALL DPWRST('XXX','BUG ')
 9033     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRCOSC
C
C     PURPOSE--COPY THE SCREEN OF A SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. PORTABLE BITMAP (PBM) (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*4 ICARAT
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='COSC'
      IERRG4='NO'
C
      NCSTR=(-999)
      ICHAPS=0
      INULLI=0
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'COSC')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRCOSC--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)IGBAUD,AGCODE
   53   FORMAT('IGBAUD,AGCODE = ',I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IMANUF,IMODEL,IBUGG4,ISUBG4
   54   FORMAT('IMANUF,IMODEL,IBUGG4,ISUBG4 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO9000
C
        IF(IMODEL.EQ.'4020')GOTO1200
        IF(IMODEL.EQ.'4022')GOTO1200
        IF(IMODEL.EQ.'4025')GOTO1200
        IF(IMODEL.EQ.'4027')GOTO1200
C
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
C
        GOTO1100
C
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ************************************************************
C               **  STEP 11--                                             **
C               **  TREAT THE TEKTRONIX 400X, 401X, 405X, AND 4114 CASES  **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES)      **
C               **  TO COPY  THE SCREEN,                                  **
C               **  WRITE OUT AN ESCAPE ETB                               **
C               ************************************************************
C
 1100 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=IETBC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      DO1130J=1,10
        ICSTR(J:J)=INULC
 1130 CONTINUE
      NCSTR=10
C
      INULLI=INT(AGCODE+0.5)
      IF(INULLI.GT.0)THEN
        DO1135I=1,INULLI
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1135   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX 4020, 4022, AND 4025 CASES  **
C               **  (NON-COLOR RASTER DEVICES).                     **
C               **  TO COPY  THE SCREEN,                            **
C               **  XXX                                             **
C               **  REFERENCE--4027 OPERATOR'S MANUAL, PAGE B-5.    **
C               ******************************************************
C
 1200 CONTINUE
      ICSTR(1:11)='!COP W/N P;'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 13--                                       **
C               **  TREAT THE 4105 CASE                             **
C               **  (COLOR DEVICE)                                  **
C               **  REFERENCE--PAGE 5-53                            **
C               ******************************************************
C
 1300 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=IETBC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      DO1330J=1,10
        ICSTR(J:J)=INULC
 1330 CONTINUE
      NCSTR=10
C
      INULLI=INT(AGCODE+0.5)
      IF(INULLI.GT.0)THEN
        DO1335I=1,INULLI
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1335   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      ICSTR(1:3)='~+}'
      NCSTR=3
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO    COPY SCREEN   INSTRUCTION PER SE.**
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-17, 5-5???.                          **
C               **********************************************************
C
 2300 CONTINUE
      IF(IMODEL.EQ.'2647')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:9)=',cTR A G'
        ICSTR(10:10)=ICRC
        NCSTR=10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:1)=IESCC
        ICSTR(2:9)='&p7s4dmZ'
        NCSTR=9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE LIBPLOT LIBRARY.                          **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:11)='COPY SCREEN'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:4)='COSC'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  CGM DOES NOT SUPPORT THIS FEATURE                        **
C               ***************************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO COPY SCREEN--                                **
C               **  NO COPY SCREEN FUNCTION                         **
C               **  REFERENCE--CALCOMP LIBRARY MANUAL               **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  NO COPY SCREEN COMMAND SUPPORTED AT THIS TIME   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  THERE IS NO    COPY SCREEN   INSTRUCTION PER SE.**
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY (NULL ROUTINE)              **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - NULL ROUTINE               **
C               ******************************************************
C
 6600 CONTINUE
      GOTO 9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO COPY (GRAPHICS) SCREEN---                    **
C               **  WRITE OUT AN S ( H )                            **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 146                            **
C               ******************************************************
C
 8100 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:3)='Pp'
      ICSTR(4:7)='S(H)'
      NCSTR=7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  NO COPY COMMAND - NULL ROUTINE                  **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  1) ^DCnnnn  - PRINTS nnnn COPIES OF CURRENT PAGE**
C               **  2) ^DCCnnnn - PRINTS nnnn COPIES OF ALL         **
C               **     SUBSEQUENT PAGES                             **
C               **  REFERENCE: QMS PROGRAMMING MANUAL               **
C               **  PAGE: 12-6                                      **
C               ******************************************************
C
 9100 CONTINUE
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:8)='DC00001'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11 CASE - NULL ROUTINE               **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCCOSC
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'COSC')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRCOSC--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9014)ICHAPS,INULLI,NCSTR
 9014   FORMAT('ICHAPS,INULLI,NCSTR = ',3I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9015)IESCC,IETBC,ISYNC,IERRG4
 9015   FORMAT('IESCC,IETBC,ISYNC,IERRG4 = ',3(A1,2X),A1)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRDETH(ICTEXT,NCTEXT,
     1                  IFONT,IDIR,ANGLE,
     1                  JFONT,JDIR,ANGLE2,
     1                  PHEIGH,PWIDTH,PVEGAP,PHOGAP,
     1                  JSIZE,JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2,
     1                  PXLEC,PXLECG,PYLEC,PYLECG)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, FOR THE STANDARD
C              (SPECIFIC) FONT, AND FOR THE HORIZONTAL DIRECTION,
C              DETERMINE THE LENGTH OF THE TEXT STRING IN THE CHARACTER
C              VECTOR ICTEXT(.), WHICH CONSISTS OF NTEXT CHARACTERS.
C     NOTE--THE LENGTH IS IN STANDARDIZED COORDINATES
C           THAT IS, 0.0 TO 100.0
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLENENTED)
C
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*4 ICTEXT
      CHARACTER*4 IFONT
      CHARACTER*4 IDIR
C
      DIMENSION ICTEXT(*)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DETH')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRDETH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)NCTEXT,JFONT,JDIR,JSIZE
   54   FORMAT('NCTEXT,JFONT,JDIR,JSIZE = ',4I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IFONT,IDIR
   55   FORMAT('IFONT,IDIR = ',A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)(ICTEXT(I),I=1,MIN(25,NCTEXT))
   56   FORMAT('(ICTEXT(I),I=1,NCTEXT) = ',25A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,64)ANGLE,ANGLE2
   64   FORMAT('ANGLE,ANGLE2= ',E15.7,E15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,67)PHEIGH,JHEIG2,PHEIG2
   67   FORMAT('PHEIGH,JHEIG2,PHEIG2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,68)PWIDTH,JWIDT2,PWIDT2
   68   FORMAT('PWIDTH,JWIDT2,PWIDT2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)PVEGAP,JVEGA2,PVEGA2
   69   FORMAT('PVEGAP,JVEGA2,PVEGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,70)PHOGAP,JHOGA2,PHOGA2
   70   FORMAT('PHOGAP,JHOGA2,PHOGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,73)PXLEC,PXLECG,PYLEC,PYLECG
   73   FORMAT('PXLEC,PXLECG,PYLEC,PYLECG= ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,79)IBUGG4,ISUBG4,IERRG4
   79   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C                *****************************************************
C                **  APRIL, 1988.  GENERIC CASE FOR FIXED SPACE FONT**
C                *****************************************************
C
      ANCTEX=NCTEXT
      PXLEC=(ANCTEX-1.0)*(PWIDT2+PHOGA2)+PWIDT2
      PXLECG=ANCTEX*(PWIDT2+PHOGA2)
      PYLEC=PHEIG2
      PYLECG=PHEIG2+PVEGA2
C
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO9000
C
        IF(IMODEL.EQ.'4020')GOTO1200
        IF(IMODEL.EQ.'4022')GOTO1200
        IF(IMODEL.EQ.'4025')GOTO1200
        IF(IMODEL.EQ.'4027')GOTO1200
C
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
C
        GOTO1100
C
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4662                        **
C               **  (A PENPLOTTER).                                 **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               **************************************************************
C               **  STEP 12--                                               **
C               **  TREAT THE TEKTRONIX 4027 CASE                           **
C               **  (COLOR RASTER DEVICES).                                 **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1200 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 13--                                       **
C               **  TREAT THE TEKTRONIX 4105                        **
C               **  (COLOR RASTER DEVICE).                          **
C               **  REFERENCE--PAGE XXXX (LINE), XXXX (TEXT),       **
C               **             XXXX (REGION)                        **
C               ******************************************************
C
 1300 CONTINUE
      GOTO9000
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 73.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-10, XXX.                         **
C               **********************************************************
C
 2300 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE LIBPLOT LIBRARY CASE                  **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM CASE                              **
C               ******************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM (BINARY) CASE                     **
C               ******************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO SET FILL--                                   **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS CASE                            **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE                             **
C               **  SUPPORT THE PROPORTIONAL FONTS THAT ARE         **
C               **  "HARD-CODED" IN THE QMS.                        **
C               **                                                  **
C               ******************************************************
C
 9100 CONTINUE
      ANUMPP=ANUMHP
      IFONTT=IQUIFN
      IF(IORNSW.EQ.'PORT'.AND.(
     1IFONTT.EQ.521.OR.
     1IFONTT.EQ.522.OR.
     1IFONTT.EQ.523.OR.
     1IFONTT.EQ.524))IFONTT=10
      IF(IORNSW.NE.'PORT'.AND.(
     1IFONTT.EQ.124.OR.
     1IFONTT.EQ.144.OR.
     1IFONTT.EQ.16.OR.
     1IFONTT.EQ.328.OR.
     1IFONTT.EQ.998.OR.
     1IFONTT.EQ.404.OR.
     1IFONTT.EQ.444.OR.
     1IFONTT.EQ.532))IFONTT=10
      IF(IFONTT.EQ.10)GOTO9000
      IF(IFONTT.EQ.404)GOTO9000
      IF(IFONTT.EQ.444)GOTO9000
      IF(IFONTT.EQ.521)GOTO9000
      IF(IFONTT.EQ.522)GOTO9000
      IF(IFONTT.EQ.523)GOTO9000
      IF(IFONTT.EQ.524)GOTO9000
      IF(IFONTT.EQ.532)GOTO9000
      IF(IFONTT.EQ.517)GOTO9000
      IF(IFONTT.EQ.536)GOTO9000
      IF(IFONTT.EQ.904)GOTO9000
      IF(IFONTT.EQ.924)GOTO9000
      IF(IFONTT.EQ.104)CALL QUICH1(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.124)CALL QUICH2(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.144)CALL QUICH3(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.16) CALL QUICH4(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.204)CALL QUICH5(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.328)CALL QUICH6(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.998)CALL QUICH7(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      IF(IFONTT.EQ.664)CALL QUICH8(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11     CASE                          **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DETH')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRDETH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9039)IERRG4
 9039   FORMAT('IERRG4 = ',A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRDETV(ICTEXT,NCTEXT,
     1                  IFONT,IDIR,ANGLE,
     1                  JFONT,JDIR,ANGLE2,
     1                  PHEIGH,PWIDTH,PVEGAP,PHOGAP,
     1                  JSIZE,
     1                  JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2,
     1                  PXLEC,PXLECG,PYLEC,PYLECG)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, FOR THE STANDARD
C              (TEKTRONIX) FONT, AND FOR THE VERTICAL DIRECTION,
C              DETERMINE THE LENGTH OF THE TEXT STRING IN THE CHARACTER
C              VECTOR ICTEXT(.), WHICH CONSISTS OF NTEXT CHARACTERS.
C     NOTE--THE LENGTH IS IN STANDARDIZED COORDINATES
C           THAT IS, 0.0 TO 100.0
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*4 ICTEXT
      CHARACTER*4 IFONT
      CHARACTER*4 IDIR
C
      DIMENSION ICTEXT(*)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DETV')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRDETV--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)NCTEXT,JFONT,JDIR,JSIZE
   54   FORMAT('NCTEXT,JFONT,JDIR,JSIZE = ',4I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)(ICTEXT(I),I=1,MIN(25,NCTEXT))
   55   FORMAT('(ICTEXT(I),I=1,NCTEXT) = ',25A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,61)IFONT,IDIR,ANGLE,ANGLE2
   61   FORMAT('IFONT,IDIR,ANGLE,ANGLE2 = ',2(A4,2X),2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,67)PHEIGH,JHEIG2,PHEIG2
   67   FORMAT('PHEIGH,JHEIG2,PHEIG2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,68)PWIDTH,JWIDT2,PWIDT2
   68   FORMAT('PWIDTH,JWIDT2,PWIDT2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)PVEGAP,JVEGA2,PVEGA2
   69   FORMAT('PVEGAP,JVEGA2,PVEGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,70)PHOGAP,JHOGA2,PHOGA2
   70   FORMAT('PHOGAP,JHOGA2,PHOGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,73)PXLEC,PXLECG,PYLEC,PYLECG
   73   FORMAT('PXLEC,PXLECG,PYLEC,PYLECG = '4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,79)IBUGG4,ISUBG4,IERRG4
   79   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C                *****************************************************
C                **  APRIL, 1988.  GENERIC CASE FOR FIXED SPACE FONT**
C                *****************************************************
C
      ANCTEX=NCTEXT
      PXLEC=PWIDT2
      PXLECG=PWIDT2+PHOGA2
      PYLEC=(ANCTEX-1.0)*(PHEIG2+PVEGA2)+PHEIG2
      PYLECG=ANCTEX*(PHEIG2+PVEGA2)
C
C
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO1100
        IF(IMODEL.EQ.'4027')GOTO1200
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4113')GOTO1300
        GOTO9000
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4662                        **
C               **  (A PENPLOTTER).                                 **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               **************************************************************
C               **  STEP 12--                                               **
C               **  TREAT THE TEKTRONIX 4027 CASE                           **
C               **  (COLOR RASTER DEVICES).                                 **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1200 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 13--                                       **
C               **  TREAT THE TEKTRONIX 4105                        **
C               **  (COLOR RASTER DEVICE).                          **
C               **  REFERENCE--PAGE XXXX (LINE), XXXX (TEXT),       **
C               **             XXXX (REGION)                        **
C               ******************************************************
C
 1300 CONTINUE
      GOTO9000
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 73.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-10, XXX.                         **
C               **********************************************************
C
 2300 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE LIBPLOT LIBRARY CASE                  **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM CASE                              **
C               ******************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  VERTICAL TEXT STRINGS WILL BE ROTATED           **
C               **  REFERENCE--USE CALCOMP LIBRARY ROUTINES         **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      ANCTEX=NCTEXT
      PYLEC=PHEIG2
      PYLECG=PHEIG2+PVEGA2
      PXLEC=(ANCTEX-1.0)*(PWIDT2+PHOGA2)+PWIDT2
      PXLECG=ANCTEX*(PWIDT2+PHOGA2)
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      ANCTEX=NCTEXT
      PYLEC=PHEIG2
      PYLECG=PHEIG2+PVEGA2
      PXLEC=(ANCTEX-1.0)*(PWIDT2+PHOGA2)+PWIDT2
      PXLECG=ANCTEX*(PWIDT2+PHOGA2)
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS CASE                            **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      ANCTEX=NCTEXT
      PYLEC=PHEIG2
      PYLECG=PHEIG2+PVEGA2
      PXLEC=(ANCTEX-1.0)*(PWIDT2+PHOGA2)+PWIDT2
      PXLECG=ANCTEX*(PWIDT2+PHOGA2)
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE                             **
C               **  SUPPORT THE PROPORTIONAL FONTS THAT ARE         **
C               **  "HARD-CODED" IN THE QMS.                        **
C               **                                                  **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11     CASE                          **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DETV')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRDETV--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9039)IERRG4
 9039   FORMAT('IERRG4 = ',A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRDRIM(PX,PY,NP,
     1                  ICASCO,IJUST,PHEIGH,
     1                  YRED,YBLUE,YGREEN,YALPHA,
     1                  PXMIN,PYMIN,PXMAX,PYMAX)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, DRAW AN IMAGE.  THE PX
C              AND PY ARRAYS CONTAIN THE ROW-ID AND COLUMN-ID VECTORS,
C              RESPECTIVELY.  THE YRED, YBLUE AND YGREEN ARRAYS CONTAIN
C              THE RED/BLUE/GREEN COMPONENTS (ON A 0 TO 1 SCALE).  THE
C              YALPHA ARRAY IS RESERVED FOR FUTURE USE.
C     NOTE--THE COORDINATES IN (PX(.),PY(.)) ARE IN
C           STANDARDIZED (0.0 TO 100.0) UNITS.
C     NOTE--THERE ARE NP SUCH COORDINATE PAIRS.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2899
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--2008.3
C     ORIGINAL VERSION--MARCH    2008.
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C
C-----NON-COMMON VARIABLES (GRAPHICS)---------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
CCCCC FOLLOWING LINE FOR MICROSOFT FORTRAN OCTOBER 1996
CQWIN USE DFLIB
#ifdef HAVE_QWIN
      USE IFQWIN
CCCCC LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWFN
CCCCC TYPE (XYCOORD)   WXY
#endif
C
      CHARACTER*4 ICASCO
      CHARACTER*4 IJUST
      CHARACTER*1 IQUOTE
      CHARACTER*2 ICJUNK
C
      DIMENSION PX(*)
      DIMENSION PY(*)
      DIMENSION YRED(*)
      DIMENSION YBLUE(*)
      DIMENSION YGREEN(*)
      DIMENSION YALPHA(*)
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
CCCCC FOLLOWING 5 LINES FOR LAHEY COMPILER ADDED JULY 1996.
#ifdef HAVE_LAHEY_CALCOMP
      CHARACTER*40 CLAHEY
      REAL RLAHEY(7)
      INTEGER ILAHEY(9)
#endif
      CHARACTER*4 IERROR
      CHARACTER*4 IWRITE
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
C
      COMMON /RWIND/
     1PWXMIN,PWXMAX,PWYMIN,PWYMAX,PWZMIN,PWZMAX,
     1WWXMIN,WWXMAX,WWYMIN,WWYMAX,WWZMIN,WWZMAX
C
C-----COMMON VARIABLES (GENERAL)--------------------------------------
C
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='DRIM'
      IERRG4='NO'
C
      NCSTR=(-999)
      IXINC=0
      IYINC=0
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRIM')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRDRIM--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)NP,IMANUF,IGUNIT
   52   FORMAT('NP,IMANUF,IGUNIT = ',3I8)
        CALL DPWRST('XXX','BUG ')
        DO55I=1,NP
          WRITE(ICOUT,56)I,PX(I),PY(I),YRED(I),YBLUE(I),YGREEN(I),
     1                   YALPHA(I)
   56     FORMAT('I,PX(I),PY(I)YRED(I),YBLUE(I),YGREEN(I),',
     1           'YALPHA(I) = ',I8,6F10.5)
          CALL DPWRST('XXX','BUG ')
   55   CONTINUE
        WRITE(ICOUT,79)IBUGG4,ISUBG4,IERRG4
   79   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      CALL MAXIM(PX,NP,IWRITE,XMAX,IBUGG4,IERROR)
      NROWS=INT(XMAX+0.1)
      CALL MAXIM(PY,NP,IWRITE,XMAX,IBUGG4,IERROR)
      NCOLS=INT(XMAX+0.1)
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4014 (ETC.) CASE            **
C               ******************************************************
C
CCCCC SEPTEMBER 1995.  ADD "PIXEL" CAPABILITY.
 1100 CONTINUE
      WRITE(ICOUT,1162)
 1162 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE TEKTRONIX DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  USE THE p (= MOVE) INSTRUCTION                  **
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  AND THE ~' (= INVOKE LABEL MODE) INSTRUCTION    **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH IS THE **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 80-85, 253-254.                 **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 111 AND 112.                    **
C               ******************************************************
C
 2100 CONTINUE
C
      WRITE(ICOUT,2162)
 2162 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE HP-7221 DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 62, 143.                        **
C               **             PAGE 65-67, 143.                     **
C               **             PAGE 75, 141.                        **
C               ******************************************************
C
 2200 CONTINUE
      WRITE(ICOUT,2262)
 2262 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE HP-GL DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-12, 10-13, 10-21.
C               **********************************************************
C
 2300 CONTINUE
      WRITE(ICOUT,2362)
 2362 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE HP-2622 DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE LIBPLOT LIBRARY         CASE              **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
C
      WRITE(ICOUT,3102)
 3102 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE GENERAL DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      WRITE(ICOUT,3202)
 3202 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE GENERAL DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  TEXT (XCOOR,YCOOR) FINAL "<SYMBOL>";                     **
C               ***************************************************************
C
 3300 CONTINUE
C
      WRITE(ICOUT,3302)
 3302 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE CGM DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               **  USE CALCOMP LIBRARY                             **
C               **      SYMBOL - WRITES TEXT                        **
C               **      CALCPT - DATAPLOT ROUTINE TO CONVERT FROM   **
C               **               PERCENT UNITS TO INCHES            **
C               **      CALCTR - DATAPLOT ROUTINE TO CONVERT        **
C               **               CHARACTER VARIABLE TO HOLLERITH    **
C               **               FORMAT (NOT NECCESARY ON ALL       **
C               **               SYSTEMS, BUT IS ON OTHERS.         **
C               ******************************************************
C
 4100 CONTINUE
C
      WRITE(ICOUT,4162)
 4162 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE CALCOMP DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
C
#ifdef HAVE_LAHEY_CALCOMP
      CALL GRINFO(ILAHEY,RLAHEY,CLAHEY)
      IPEN=JCOL
      DO4670I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        CALL CALCPT(PX1,PY1,AX,AY,ISUBN0)
        CALL SETPIX(AX,AY,IPEN)
C       DO4675IROW=IX,IX+NCOL-1
C         DO4678ICOLZ=IY,IY+NCOL-1
C           AX2=AX+REAL(IX-IROW)
C           AY2=AY+REAL(IY-ICOL)
C           CALL SETPIX(AX,AY,IPEN)
C4678     CONTINUE
C4675   CONTINUE
 4670 CONTINUE
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
C
      NSIZE=INT(PHEIGH)
      IF(NSIZE.LT.1)NSIZE=1
      CALL GRTRSD(PXMIN,PYMAX,IXSTRT,IYSTRT,ISUBN0)
      CALL GRTRSD(PXMAX,PYMIN,IXSTOP,IYSTOP,ISUBN0)
      PY000=0.0
      CALL GRTRSD(PXMIN,PY000,IXSTRT,IY000,ISUBN0)
      PY100=100.0
      CALL GRTRSD(PXMIN,PY100,IXSTRT,IY100,ISUBN0)
C
      ITFLAG=0
      DO4770I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        IX1=INT(PX1+0.1)
        IY1=INT(PY1+0.1)
        IXCOOR=IXSTRT + (IX1-1)*NSIZE + 1
        IYCOOR=IYSTRT + (IY1-1)*NSIZE + 1
        IF(IXCOOR.GT.IXSTOP .OR. IYCOOR.GT.IYSTOP)THEN
          ITFLAG=1
         GOTO4770
        ENDIF
C
        IF(ICASCO.EQ.'RGB')THEN
          AVAL=YRED(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL1=IVAL
          AVAL=YGREEN(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL2=IVAL
          AVAL=YBLUE(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL3=IVAL
#ifdef HAVE_QWIN
          JTEMP2=RGBTOINTEGER(IVAL1,IVAL2,IVAL3)
          ISTATUS=SETCOLORRGB(JTEMP)
#endif
        ELSE
          AVAL=YRED(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          JTEMP=IVAL
#ifdef HAVE_QWIN
          JTEMP2=RGBTOINTEGER(JTEMP,JTEMP,JTEMP)
          ISTATUS=SETCOLORRGB(JTEMP2)
#endif
        ENDIF
C
        DO4775IROWZ=IXCOOR,IXCOOR+NSIZE-1
          DO4778ICOLZ=IYCOOR,IYCOOR+NSIZE-1
            IXTEMP=IROWZ
            IYTEMP=IY000 - ICOLZ
            IF(IXTEMP.GT.IXSTOP .OR. IYTEMP.GT.IYSTOP)THEN
              ITFLAG=1
              GOTO4770
            ENDIF
#ifdef HAVE_QWIN
            IRESLT=SETPIXELRGB(INT2(IXTEMP),INT2(IYTEMP),JTEMP2)
#endif
 4778     CONTINUE
 4775   CONTINUE
 4770 CONTINUE
C
      IF(ITFLAG.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,4791)
 4791   FORMAT('***** WARNING: PART OF IMAGE TRUNCATED FOR')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,4792)
 4792   FORMAT('      THE QUICK-WIN (WINDOWS) DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
C
      NCOL=INT(PHEIGH)
      IF(NCOL.LT.1)NCOL=1
      IF(IFONTH.EQ.0)THEN
        IXINC=0
      ELSEIF(IFONTH.EQ.1)THEN
        IXINC=NCOL/2
      ELSE
        IXINC=NCOL
      ENDIF
      IF(IFONTV.EQ.0)THEN
        IYINC=0
      ELSEIF(IFONTV.EQ.1)THEN
        IYINC=NCOL/2
      ELSE
        IYINC=NCOL
      ENDIF
C
      DO4870I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
        DO4875IROW=IX,IX+NCOL-1
          DO4878ICOLZ=IY,IY-NCOL+1,-1
            IXTEMP=IROW-IXINC
            IYTEMP=ICOLZ+IYINC
#ifdef HAVE_OPEN_GL
            CALL GLPOIN(IXTEMP,IYTEMP,PHEIGH)
#endif
 4878     CONTINUE
 4875   CONTINUE
 4870 CONTINUE
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
C
      NCOL=INT(PHEIGH)
      IF(NCOL.LT.1)NCOL=1
      IF(IFONTH.EQ.0)THEN
        IXINC=0
      ELSEIF(IFONTH.EQ.1)THEN
        IXINC=NCOL/2
      ELSE
        IXINC=NCOL
      ENDIF
      IF(IFONTV.EQ.0)THEN
        IYINC=0
      ELSEIF(IFONTV.EQ.1)THEN
        IYINC=NCOL/2
      ELSE
        IYINC=NCOL
      ENDIF
      DO4938I=1,NP
#ifdef HAVE_INTERACTER
        CALL IGrPoint(PX(I),PY(I))
#endif
 4938 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
C
      NCOL=INT(PHEIGH)
      IF(NCOL.LT.1)NCOL=1
      DO4988I=1,NP
#ifdef HAVE_WININTERACTER
        CALL IGrPoint(PX(I),PY(I))
#endif
 4988 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               **  USE CALCOMP LIBRARY                             **
C               **      SYMBOL - WRITES TEXT                        **
C               **      CALCPT - DATAPLOT ROUTINE TO CONVERT FROM   **
C               **               PERCENT UNITS TO INCHES            **
C               **      CALCTR - DATAPLOT ROUTINE TO CONVERT        **
C               **               CHARACTER VARIABLE TO HOLLERITH    **
C               **               FORMAT (NOT NECCESARY ON ALL       **
C               **               SYSTEMS, BUT IS ON OTHERS.         **
C               ******************************************************
C
 5100 CONTINUE
C
      WRITE(ICOUT,5162)
 5162 FORMAT('****** THE IMAGE CAPABILITY IS NOT YET SUPPORTED FOR ',
     1       'THE ZETA DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               **  WRITTEN BY BILL ANDERSON                        **
C               ******************************************************
C
 6600 CONTINUE
C
      WRITE(ICOUT,6602)
 6602 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE SUN DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  USE THE P [ X, Y ] (= POSITION) INSTRUCTION     **
C               **  WITH INTEGER COORDINATES,                       **
C               **  AND THE   T ' STRING '  (= TEXT) INSTRUCTION    **
C               **  WITH THE DESIRED TEXT STRING,                   **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 100 AND 118                    **
C               ******************************************************
C
 8100 CONTINUE
C
      WRITE(ICOUT,8102)
 8102 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE DEC REGIS DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
C
C     FOR POSTSCRIPT, NEED TO ROTATE (I.E., REVERSE ROLES OF
C     ROWS AND COLUMNS).
C
      NSIZE=INT(PHEIGH)
      IF(NSIZE.LT.1)NSIZE=1
C
      NCOLST=NCOLS
      NROWST=NROWS
      NCOLS=NROWST
      NROWS=NCOLST
C
      NCOLS2=NCOLS*NSIZE
      NROWS2=NROWS*NSIZE
C
      CALL GRTRSD(PXMIN,PYMAX,IXSTRT,IYSTRT,ISUBN0)
      CALL GRTRSD(PXMAX,PYMIN,IXSTOP,IYSTOP,ISUBN0)
C
C     SAVE CURRENT GRAPHICS STATE
C
      ICSTR(1:38)='gsave   %  Save current graphics state'
      NCSTR=38
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C     CASE 1: RGB CASE
C
      IF(ICASCO.EQ.'RGB')THEN
C
        ICSTR='/picstr '
        NCSTR=8
        NTEMP=3*NCOLS
        NCHTOT=5
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+10)=' string def'
        NCSTR=NCSTR+10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        NCHTOT=5
        NTEMP=IXSTRT
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NTEMP=IYSTRT - NROWS2
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+9)=' translate'
        NCSTR=NCSTR+9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        NCHTOT=5
        NTEMP=NSIZE*NCOLS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NTEMP=NSIZE*NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+5)=' scale'
        NCSTR=NCSTR+5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        NCHTOT=5
        NTEMP=NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NTEMP=NCOLS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=' 8'
        NCSTR=NCSTR+1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        ICSTR(1:1)='['
        NCSTR=1
        NCHTOT=5
        NTEMP=NCOLS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+4)=' 0 0 '
        NCSTR=NCSTR+4
        NTEMP=-NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=' 0 '
        NCSTR=NCSTR+1
        NTEMP=NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=']'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        ICSTR(1:38)='{currentfile picstr readhexstring pop}'
        NCSTR=38
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:7)='false 3'
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:10)='colorimage'
        NCSTR=10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       FOR POSTSCRIPT: SEND THE IMAGE ONE ROW AT A TIME.
C       WE ARE SENDING 8-BIT DATA (0 - 255), SO THERE WILL BE
C       2 HEX DIGITS FOR EACH RGB COMPONENT.
C
C       WE ASSUME THAT THE DATA IS ALREADY SORTED IN ROW ORDER
C
        IBUGG4='OFF'
        ICNT=0
        NCSTR=0
C
        DO8610I=1,NROWS
          DO8620J=1,NCOLS
C
            ICNT=ICNT+1
            IF(ICNT.GT.NP)GOTO8619
C
            AVAL=YRED(ICNT)*255.
            IVAL=INT(AVAL+0.5)
            IF(IVAL.LT.0)IVAL=0
            IF(IVAL.GT.255)IVAL=255
            IVAL1=IVAL
            CALL DECHE2(IVAL1,ICJUNK,IBUGG4,IERROR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
C
            AVAL=YGREEN(ICNT)*255.
            IVAL=INT(AVAL+0.5)
            IF(IVAL.LT.0)IVAL=0
            IF(IVAL.GT.255)IVAL=255
            IVAL2=IVAL
            CALL DECHE2(IVAL2,ICJUNK,IBUGG4,IERROR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
C
            AVAL=YBLUE(ICNT)*255.
            IVAL=INT(AVAL+0.5)
            IF(IVAL.LT.0)IVAL=0
            IF(IVAL.GT.255)IVAL=255
            IVAL3=IVAL
            CALL DECHE2(IVAL2,ICJUNK,IBUGG4,IERROR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
C
            IF(NCSTR.GT.120)THEN
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              NCSTR=0
            ENDIF
C
 8620     CONTINUE
C
          IF(NCSTR.GT.0)THEN
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            NCSTR=0
          ENDIF
C
 8610   CONTINUE
 8619   CONTINUE
C
        IF(NCSTR.GT.0)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
C
      ELSE
C
        ICSTR='/picstr '
        NCSTR=8
        NTEMP=NCOLS
        NCHTOT=5
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+10)=' string def'
        NCSTR=NCSTR+10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        NCHTOT=5
        NTEMP=IXSTRT
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NTEMP=IYSTRT - NROWS2
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+9)=' translate'
        NCSTR=NCSTR+9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        NCHTOT=5
        NTEMP=NSIZE*NCOLS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NTEMP=NSIZE*NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+5)=' scale'
        NCSTR=NCSTR+5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        NCHTOT=5
        NTEMP=NCOLS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NTEMP=NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=' 8'
        NCSTR=NCSTR+1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        ICSTR(1:1)='['
        NCSTR=1
        NCHTOT=5
        NTEMP=NCOLS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+4)=' 0 0 '
        NCSTR=NCSTR+4
        NTEMP=-NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=' 0 '
        NCSTR=NCSTR+1
        NTEMP=NROWS
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=']'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=0
        ICSTR(1:38)='{currentfile picstr readhexstring pop}'
        NCSTR=38
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:5)='image'
        NCSTR=5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       FOR POSTSCRIPT: SEND THE IMAGE ONE ROW AT A TIME.
C       WE ARE SENDING 8-BIT DATA (0 - 255), SO THERE WILL BE
C       2 HEX DIGITS FOR EACH RGB COMPONENT.
C
C       WE ASSUME THAT THE DATA IS ALREADY SORTED IN ROW ORDER
C       FOR POSTSCRIPT:
C
        IBUGG4='OFF'
        ICNT=0
        NCSTR=0
C
        DO8710I=1,NROWS
          DO8720J=1,NCOLS
C
            ICNT=ICNT+1
            IF(ICNT.GT.NP)GOTO8719
C
            AVAL=YRED(ICNT)*255.
            IVAL=INT(AVAL+0.5)
            IF(IVAL.LT.0)IVAL=0
            IF(IVAL.GT.255)IVAL=255
            IVAL1=IVAL
            CALL DECHE2(IVAL1,ICJUNK,IBUGG4,IERROR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
C
            IF(NCSTR.GT.128)THEN
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              NCSTR=0
            ENDIF
C
 8720     CONTINUE
C
          IF(NCSTR.GT.0)THEN
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            NCSTR=0
          ENDIF
C
 8710   CONTINUE
 8719   CONTINUE
C
        IF(NCSTR.GT.0)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
C
      ENDIF
C
C     RESTORE CURRENT GRAPHICS STATE
C
      ICSTR(1:15)='%  End of Image'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='grestore  %  Restore graphics state'
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC LANDSCAPE AND PORTRAIT CASE      **
C               **  <ICARAT>IVvvvvv   - VERTICAL POSITION           **
C               **  <ICARAT>IHhhhhh   - HORIZONTAL POSITION         **
C               **  REFERENCE: QUIC PROGRAMMERS MANUAL -            **
C               **                                                  **
C               ******************************************************
C
 9100 CONTINUE
C
      WRITE(ICOUT,9162)
 9162 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE QUIC QMS DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
C
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
C
      NSIZE=INT(PHEIGH)
      IF(NSIZE.LT.1)NSIZE=1
      CALL GRTRSD(PXMIN,PYMAX,IXSTRT,IYSTRT,ISUBN0)
      CALL GRTRSD(PXMAX,PYMIN,IXSTOP,IYSTOP,ISUBN0)
      PY000=0.0
      CALL GRTRSD(PXMIN,PY000,IXSTRT,IY000,ISUBN0)
      PY100=100.0
      CALL GRTRSD(PXMIN,PY100,IXSTRT,IY100,ISUBN0)
C
      ITFLAG=0
      DO9670I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        IX1=INT(PX1+0.1)
        IY1=INT(PY1+0.1)
        IXCOOR=IXSTRT + (IX1-1)*NSIZE + 1
        IYCOOR=IYSTRT + (IY1-1)*NSIZE + 1
        IF(IXCOOR.GT.IXSTOP .OR. IYCOOR.GT.IYSTOP)THEN
          ITFLAG=1
         GOTO9670
        ENDIF
C
        IF(ICASCO.EQ.'RGB')THEN
          AVAL=YRED(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL1=IVAL
          AVAL=YGREEN(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL2=IVAL
          AVAL=YBLUE(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL3=IVAL
CCCCC     JTEMP2=RGBTOINTEGER(IVAL1,IVAL2,IVAL3)
CCCCC     ISTATUS=SETCOLORRGB(JTEMP)
        ELSE
CCCCC     AFACT=255.0
          AFACT=99.0
          IFACT=INT(AFACT+0.1)
          AVAL=YRED(I)*AFACT
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.IFACT)IVAL=IFACT
          JTEMP=-IVAL
          CALL XFORE(JTEMP)
        ENDIF
C
        DO9675IROWZ=IXCOOR,IXCOOR+NSIZE-1
          DO9678ICOLZ=IYCOOR,IYCOOR+NSIZE-1
            IXTEMP=IROWZ
            IYTEMP=IY000 - ICOLZ
            IF(IXTEMP.GT.IXSTOP .OR. IYTEMP.GT.IYSTOP)THEN
              ITFLAG=1
              GOTO9670
            ENDIF
            CALL XPOINT(IXTEMP,IYTEMP)
 9678     CONTINUE
 9675   CONTINUE
 9670 CONTINUE
C
      IF(ITFLAG.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9691)
 9691   FORMAT('***** WARNING: PART OF IMAGE TRUNCATED FOR')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9692)
 9692   FORMAT('      THE X11 DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
#endif
C
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 124, 113.    **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 324-325, 256.              **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 59-60, 54-55**
C               *************************************************
C
10000 CONTINUE
C
      WRITE(ICOUT,10162)
10162 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE TURBO=C DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      WRITE(ICOUT,11062)
11062 FORMAT('****** THE IMAGE CAPABILITY IS NOT SUPPORTED FOR ',
     1       'THE GKS DEVICE.')
      CALL DPWRST('XXX','BUG ')
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) GIF                                          **
C               ******************************************************
C
12000 CONTINUE
#ifdef HAVE_GD
C
      NSIZE=INT(PHEIGH)
      IF(NSIZE.LT.1)NSIZE=1
      CALL GRTRSD(PXMIN,PYMAX,IXSTRT,IYSTRT,ISUBN0)
      CALL GRTRSD(PXMAX,PYMIN,IXSTOP,IYSTOP,ISUBN0)
      PY000=0.0
      CALL GRTRSD(PXMIN,PY000,IXSTRT,IY000,ISUBN0)
      PY100=100.0
      CALL GRTRSD(PXMIN,PY100,IXSTRT,IY100,ISUBN0)
C
      ITFLAG=0
      DO12070I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        IX1=INT(PX1+0.1)
        IY1=INT(PY1+0.1)
        IXCOOR=IXSTRT + (IX1-1)*NSIZE + 1
        IYCOOR=IYSTRT + (IY1-1)*NSIZE + 1
        IF(IXCOOR.GT.IXSTOP .OR. IYCOOR.GT.IYSTOP)THEN
          ITFLAG=1
         GOTO12070
        ENDIF
C
        IF(ICASCO.EQ.'RGB')THEN
          AVAL=YRED(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL1=IVAL
          AVAL=YGREEN(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL2=IVAL
          AVAL=YBLUE(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL3=IVAL
          CALL GDSEC2(IVAL1,IVAL2,IVAL3,IRETCO)
        ELSE
          AFACT=255.
          IFACT=INT(AFACT+0.1)
          AVAL=YRED(I)*AFACT
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.IFACT)IVAL=IFACT
          IVAL1=IVAL
          CALL GDSEC2(IVAL1,IVAL1,IVAL1,IRETCO)
        ENDIF
C
        JCOLT=1
        DO12075IROWZ=IXCOOR,IXCOOR+NSIZE-1
          DO12078ICOLZ=IYCOOR,IYCOOR+NSIZE-1
            IXTEMP=IROWZ
            IYTEMP=IY000 - ICOLZ
            IF(IXTEMP.GT.IXSTOP .OR. IYTEMP.GT.IYSTOP)THEN
              ITFLAG=1
              GOTO12070
            ENDIF
            CALL GDPOIN(IXTEMP,IYTEMP,JCOLT)
12078     CONTINUE
12075   CONTINUE
12070 CONTINUE
      CALL GDSECO(JCOLT)
C
      IF(ITFLAG.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,12091)
12091   FORMAT('***** WARNING: PART OF IMAGE TRUNCATED FOR')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,12092)
12092   FORMAT('      THE GD DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
C
C     NOTE 3/2008: THE AQPOIN ROUTINE IS CURRENTLY A NULL
C                  ROUTINE.  NEED TO FIX THIS IN ORDER FOR THE
C                  IMAGE CODE TO WORK.
C
      NSIZE=INT(PHEIGH)
      IF(NSIZE.LT.1)NSIZE=1
      CALL GRTRSD(PXMIN,PYMAX,IXSTRT,IYSTRT,ISUBN0)
      CALL GRTRSD(PXMAX,PYMIN,IXSTOP,IYSTOP,ISUBN0)
      PY000=0.0
      CALL GRTRSD(PXMIN,PY000,IXSTRT,IY000,ISUBN0)
      PY100=100.0
      CALL GRTRSD(PXMIN,PY100,IXSTRT,IY100,ISUBN0)
C
      ITFLAG=0
      DO13570I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        IX1=INT(PX1+0.1)
        IY1=INT(PY1+0.1)
        IXCOOR=IXSTRT + (IX1-1)*NSIZE + 1
        IYCOOR=IYSTRT + (IY1-1)*NSIZE + 1
        IF(IXCOOR.GT.IXSTOP .OR. IYCOOR.GT.IYSTOP)THEN
          ITFLAG=1
         GOTO13570
        ENDIF
C
        IF(ICASCO.EQ.'RGB')THEN
          AVAL=YRED(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL1=IVAL
          AVAL=YGREEN(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL2=IVAL
          AVAL=YBLUE(I)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          IVAL3=IVAL
        ELSE
          AFACT=255.
          IFACT=INT(AFACT+0.1)
          AVAL=YRED(I)*AFACT
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.IFACT)IVAL=IFACT
          IVAL1=IVAL
          IVAL2=IVAL1
          IVAL3=IVAL1
        ENDIF
C
        JCOLT=1
        DO13575IROWZ=IXCOOR,IXCOOR+NSIZE-1
          DO13578ICOLZ=IYCOOR,IYCOOR+NSIZE-1
            IXTEMP=IROWZ
            IYTEMP=IY000 - ICOLZ
            IF(IXTEMP.GT.IXSTOP .OR. IYTEMP.GT.IYSTOP)THEN
              ITFLAG=1
              GOTO13570
            ENDIF
#ifdef HAVE_AQUA
            CALL AQPOIN(IXTEMP,IYTEMP,IVAL1,IVAL2,IVAL3)
#endif
13578     CONTINUE
13575   CONTINUE
13570 CONTINUE
#ifdef HAVE_AQUA
      CALL AQSECO(JCOLT)
#endif
C
      IF(ITFLAG.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,13591)
13591   FORMAT('***** WARNING: PART OF IMAGE TRUNCATED FOR')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,13592)
13592   FORMAT('      THE AQUATERM DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
C
C     FOR LATEX DRIVER, "PIXEL" MODE NOT CURRENTLY SUPPORTED
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
C
      CALL DPCONA(34,IQUOTE)
C
C
CCCCC "PIXEL" OPTION: USE FILLED RECTANGLE TO DRAW
C
      NCOL=INT(PHEIGH)
      IF(NCOL.LT.1)NCOL=1
      IF(IFONTH.EQ.0)THEN
        IXINC=0
      ELSEIF(IFONTH.EQ.1)THEN
        IXINC=NCOL/2
      ELSE
        IXINC=NCOL
      ENDIF
      IF(IFONTV.EQ.0)THEN
        IYINC=0
      ELSEIF(IFONTV.EQ.1)THEN
        IYINC=NCOL/2
      ELSE
        IYINC=NCOL
      ENDIF
C
C
      DO16070I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
        IX=IX-IXINC
        IY=IY-IYINC
        IX2=IX+NCOL-1
        IY2=IY+NCOL-1

        ICSTR(1:11)='   <rect x='
        ICSTR(12:12)=IQUOTE
        NCSTR=12
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+2)=' y='
        NCSTR=NCSTR+3
        ICSTR(NCSTR:NCSTR)=IQUOTE
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:15)='         width='
        ICSTR(16:16)=IQUOTE
        NCSTR=16
        CALL GRTRIN(NCOL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+7)=' height='
        NCSTR=NCSTR+8
        ICSTR(NCSTR:NCSTR)=IQUOTE
        CALL GRTRIN(NCOL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:17)='           style='
        ICSTR(18:18)=IQUOTE
        ICSTR(19:31)='stroke:none; '
        NCSTR=-31
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:19)='             fill:#'
        NCSTR=19
        NCHTOT=2
        ATEMP=255.
        AVAL1=YRED(I)/ATEMP
        AVAL2=YGREEN(I)/ATEMP
        AVAL3=YBLUE(I)/ATEMP
        JRED=INT(AVAL1)
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        JGREEN=INT(AVAL2)
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        JBLUE=INT(AVAL3)
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:7)='     />'
        NCSTR=-7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
16070 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
C
#ifdef HAVE_CAIRO
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
      NSIZE=INT(PHEIGH)
      IF(NSIZE.LT.1)NSIZE=1
      PXMINT=PXMIN
      PYMINT=PYMIN
      PXMAXT=PXMAX
      PYMAXT=PYMAX
      CALL GRTRSD(PXMINT,PYMINT,IXSTRT,IYSTRT,ISUBN0)
      CALL GRTRSD(PXMAXT,PYMAXT,IXSTOP,IYSTOP,ISUBN0)
      IF(IYSTRT.GT.IYSTOP)THEN
        IYTEMP=IYSTRT
        IYSTRT=IYSTOP
        IYSTOP=IYTEMP
      ENDIF
      PY000=0.0
      PY000T=0.0
      PXMINT=PXMIN
      CALL GRTRSD(PXMINT,PY000T,IXSTRT,IY000,ISUBN0)
      PY100=100.0
      PY100T=100.0
      PXMINT=PXMIN
      CALL GRTRSD(PXMINT,PY100T,IXSTRT,IY100,ISUBN0)
C
      ITFLAG=0
      DO17670I=1,NP
        PX1=PX(I)
        PY1=PY(I)
        IX1=INT(PX1+0.1)
        IY1=INT(PY1+0.1)
        IXCOOR=IXSTRT + (IX1-1)*NSIZE + 1
        IYCOOR=IYSTRT + (IY1-1)*NSIZE + 1
        IF(IXCOOR.GT.IXSTOP .OR. IYCOOR.GT.IYSTOP)THEN
          ITFLAG=1
CCCCC     GOTO17670
        ENDIF
C
        ATEMP=255.0
        IF(ICASCO.EQ.'RGB')THEN
          AVAL1=YRED(I)/ATEMP
          AVAL2=YGREEN(I)/ATEMP
          AVAL3=YBLUE(I)/ATEMP
          IF(AVAL1.LT.0.0)AVAL1=0.0
          IF(AVAL1.GT.1.0)AVAL1=1.0
          IF(AVAL2.LT.0.0)AVAL2=0.0
          IF(AVAL2.GT.1.0)AVAL2=1.0
          IF(AVAL3.LT.0.0)AVAL3=0.0
          IF(AVAL3.GT.1.0)AVAL3=1.0
          CALL CASECO(IVAL2,AVAL1,AVAL2,AVAL3)
        ELSE
CCCCC     AVAL1=YRED(I)/ATEMP
          AVAL1=YRED(I)
          IF(AVAL1.LT.0.0)AVAL1=0.0
          IF(AVAL1.GT.1.0)AVAL1=1.0
          CALL CASECO(IVAL2,AVAL1,AVAL1,AVAL1)
        ENDIF
C
        DO17675IROWZ=IXCOOR,IXCOOR+NSIZE-1
          DO17678ICOLZ=IYCOOR,IYCOOR+NSIZE-1
            IXTEMP=IROWZ
            IYTEMP=IY000 - ICOLZ
            IF(IXTEMP.GT.IXSTOP .OR. IYTEMP.GT.IYSTOP)THEN
              ITFLAG=1
              GOTO17670
            ENDIF
            CALL CAPOIN(IVAL2,IXTEMP,IYTEMP)
17678     CONTINUE
17675   CONTINUE
17670 CONTINUE
C
      IF(ITFLAG.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17691)
17691   FORMAT('***** WARNING: PART OF IMAGE TRUNCATED FOR')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17692)
17692   FORMAT('      THE CAIRO DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
#endif
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRIM')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRDRIM--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9012)NP,IMANUF,IGUNIT,IERRG4
 9012   FORMAT('NP,IMANUF,IGUNIT,IERRG4 = ',3I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        DO9015I=1,NP
          WRITE(ICOUT,9016)PX(I),PY(I)
 9016     FORMAT('PX(I),PY(I) = ',G15.7,G15.7)
          CALL DPWRST('XXX','BUG ')
 9015   CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRDRLI(IX1,IY1,IX2,IY2,PX1,PY1,PX2,PY2,IFACTO,JCOL)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE,
C              DRAW A LINE FROM (IX1,IY1) TO (IX2,IY2).
C     NOTE--THE COORDINATES (IX1,IY1) AND (IX2,IY2) ARE IN
C           INTEGER PICTURE POINT VALUES.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY   1989. SUN (BY BILL ANDERSON)
C                                       DRIVER OBSOLETE
C     UPDATED         --JANUARY   1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH     1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY       1991. BAD ARG IN 2 CALLS TO GRTRIN
C     UPDATED         --MAY       1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY       1991. VGA/TURBOC DRIVER (JJF)
C                                       DRIVER OBSOLETE
C     UPDATED         --MAY       1991. X2 TO IX2 FOR SUN  (JJF)
C     UPDATED         --APRIL     1992. ZETA FIX
C     UPDATED         --JULY      1996. LAHEY DRIVER (ALAN HECKERT)
C                                       OLD CALCOMP STYLE
C                                       DRIVER OBSOLETE
C     UPDATED         --OCTOBER   1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER   1996. OPENGL DRIVER (ALAN)
C                                       USE BILL MITCHELLS OPENGL
C                                       BINDING FOR FORTRAN
C     UPDATED         --OCTOBER   1996. GKS (ALAN)
C                                       CODED, NOT TESTED
C     UPDATED         --OCTOBER   1996. BINARY CGM (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996. DISPLAY POSTSCRIPT (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER  1997. UPDATE TO GENERAL CODED FOR
C                                       GUI.
C     UPDATED         --JULY      1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE      2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE      2000. MACINTOSH
C                                       PLACEHOLDER FOR NOW
C                     --MARCH     2002. CHANGE TO QUARTZ (NEW MAC
C                                       GRAPHICS LIBRARY)
C     UPDATED         --JUNE      2000. PC PRINTER
C                                       PLACEHOLDER FOR NOW
C                     --MARCH     2002. CHANGE TO GHOSTSCRIPT
C     UPDATED         --JUNE      2000. PC PRINTER
C     UPDATED         --JULY      2001. ADD JCOL ARGUMENT (COLOR INDEX
C                                       FOR GD DEVICE)
C     UPDATED         --MARCH     2002. LATEX (USING EEPIC)
C     UPDATED         --MARCH     2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH     2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY  2006. IMPLEMENT LATEX DRIVER
C     UPDATED         --APRIL     2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL     2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                       (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --SEPTEMBER 2015. FIX GREYSCALE COLOR FOR SVG
C     UPDATED         --OCTOBER   2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER   2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
CQWIN USE DFLIB
#ifdef HAVE_QWIN
      USE IFQWIN
CCCCC LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
      TYPE (XYCOORD)   WXY
#endif
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*1 ICARAT
      CHARACTER*1 IQUOTE
      CHARACTER*2 ICJUNK
      INTEGER IXSUN(2)
      INTEGER IYSUN(2)
      REAL PXGKS(2)
      REAL PYGKS(2)
      DOUBLE PRECISION DPXGKS(2)
      DOUBLE PRECISION DPYGKS(2)
C
CCCCC MARCH 2002: ADD FOLLOWING LINE FOR SVG DEVICE
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOF2.INC'
C
CCCCC MARCH 2002: ADD FOLLOWING LINE FOR SVG DEVICE
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='DRLI'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRLI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRDRLI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IX1,IY1,IX2,IY2
   52   FORMAT('IX1,IY1,  IX2,IY2 = ',2I8,4X,2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)PX1,PY1,PX2,PY2
   54   FORMAT('PX1,PY1,  PX2,PY2 = ',2G15.7,4X,2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,57)IFACTO,IGUNIT,IMANUF,IMODEL
   57   FORMAT('IFACTO,IGUNIT,IMANUF,IMODEL = ',2I8,2(2X,A4))
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)IBUGG4,ISUBG4,IERRG4
   69   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ****************************************
C               **  STEP XX--                         **
C               **  CHECK THAT THE INPUT COORDINATES  **
C               **  ARE WITHIN SCREEN LIMITS          **
C               ****************************************
C
      IX3=IX1
      IF(IX3.LE.0)IX3=0
      IF(IX3.GE.NUMHPP)IX3=NUMHPP-1
C
      IY3=IY1
      IF(IY3.LE.0)IY3=0
      IF(IY3.GE.NUMVPP)IY3=NUMVPP-1
C
      IX4=IX2
      IF(IX4.LE.0)IX4=0
      IF(IX4.GE.NUMHPP)IX4=NUMHPP-1
C
      IY4=IY2
      IF(IY4.LE.0)IY4=0
      IF(IY4.GE.NUMVPP)IY4=NUMVPP-1
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4027')GOTO1200
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               *********************************************
C               **  STEP 11--                              **
C               **  TREAT THE TEKTRONIX 40104 (ETC.) CASE  **
C               *********************************************
C
 1100 CONTINUE
      ICSTR(1:1)=IGSC
      NCSTR=1
      CALL TKTRPT(IX3,IY3,IFACTO,ICSTR,NCSTR,ISUBN0)
      CALL TKTRPT(IX4,IY4,IFACTO,ICSTR,NCSTR,ISUBN0)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               *******************************
C               **  STEP 12--                **
C               **  TREAT THE 4027 CASE      **
C               **  (A COLOR RASTER DEVICE)  **
C               **  REFERENCE--XX            **
C               *******************************
C
 1200 CONTINUE
      ICSTR(1:5)='!VEC '
      NCSTR=5
      NCHTOT=8
      CALL GRTRIN(IX3,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IY3,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IX4,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IY4,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ****************************************************
C               **  STEP 21--                                     **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE           **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER          **
C               **             OPERATING AND PROGRAMMING MANUAL,  **
C               **             PAGE XX.                           **
C               ****************************************************
C
 2100 CONTINUE
      ICSTR(1:1)='p'
      NCSTR=1
      CALL HPTRPT(IX1,IY1,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:1)='q'
      NCSTR=1
      CALL HPTRPT(IX2,IY2,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      ICSTR(1:5)='PU;PA'
      NCSTR=5
      NCHTOT=5
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      ICSTR(11:11)=','
      NCSTR=11
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      ICSTR(17:17)=';'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:5)='PD;PA'
      NCSTR=5
      NCHTOT=5
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      ICSTR(11:11)=','
      NCSTR=11
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      ICSTR(17:17)=';'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE XX-X, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='*pa'
      NCSTR=4
      NCHTOT=5
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      ICSTR(10:10)=','
      NCSTR=10
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      ICSTR(16:16)='Z'
      NCSTR=16
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='*pb'
      NCSTR=4
      NCHTOT=5
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      ICSTR(10:10)=','
      NCSTR=10
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      ICSTR(16:16)='Z'
      NCSTR=16
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT                  CASE    **
C               ******************************************************
C
 2600 CONTINUE
      DPXGKS(1)=DBLE(PX1)
      DPXGKS(2)=DBLE(PX2)
      DPYGKS(1)=DBLE(PY1)
      DPYGKS(2)=DBLE(PY2)
      NPTS=2
#ifdef HAVE_LIBPLOT
      CALL PLDRAW(DPXGKS,DPYGKS,NPTS)
#endif
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
      ICSTR(1:8)='MOVE TO '
      NCSTR=8
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PX1,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(19:20)='  '
      NCSTR=20
      CALL GRTRRE(PY1,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:8)='DRAW TO '
      NCSTR=8
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PX2,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(19:20)='  '
      NCSTR=20
      CALL GRTRRE(PY2,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
C  DECEMBER 1997.  FOR GUI, CONVERT COORDINATES TO INTEGER (BY
C  MULTIPLYING BY 100).  DO NOT PRINT OUT SUCCESSIVE POINTS IF THEY
C  ARE IDENTICAL.
C
 3200 CONTINUE
      IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')GOTO3250
      ICSTR(1:5)='MOTO '
      NCSTR=5
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PX1,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(16:17)='  '
      NCSTR=17
      CALL GRTRRE(PY1,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:5)='DRTO '
      NCSTR=5
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PX2,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(16:17)='  '
      NCSTR=17
      CALL GRTRRE(PY2,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO3290
C
 3250 CONTINUE
      ICSTR(1:2)='M '
      NCSTR=2
      NCHTOT=IGENFA+3
      IPX1=INT(PX1*10.**IGENFA+0.5)
      IPY1=INT(PY1*10.**IGENFA+0.5)
      CALL GRTRIN(IPX1,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='  '
      CALL GRTRIN(IPY1,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:2)='D '
      NCSTR=2
      NCHTOT=IGENFA+3
      IPX2=INT(PX2*10.**IGENFA+0.5)
      IPY2=INT(PY2*10.**IGENFA+0.5)
      CALL GRTRIN(IPX2,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='  '
      CALL GRTRIN(IPY2,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 3290 CONTINUE
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3300 CONTINUE
      ICSTR(1:6)='LINE '
      NCSTR=6
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX1,PY1,AX,AY,ISUBN0)
      CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(17:17)=','
      NCSTR=17
      CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(28:29)=', '
      NCSTR=29
      CALL GRTRSA(PX2,PY2,AX,AY,ISUBN0)
      CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(40:40)=','
      NCSTR=40
      CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(50:50)=';'
      NCSTR=50
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  REFERENCE--USE CALCOMP LIBRARY ROUTINES         **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
#ifdef HAVE_CALCOMP
      CALL CALCPT(PX1,PY1,AX1,AY1,ISUBN0)
      IPEN=3
      CALL PLOT(AX1,AY1,IPEN)
      IPEN=2
      CALL CALCPT(PX2,PY2,AX1,AY1,ISUBN0)
      CALL PLOT(AX1,AY1,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
#ifdef HAVE_LAHEY_CALCOMP
      CALL CALCPT(PX1,PY1,AX1,AY1,ISUBN0)
      IPEN=3
      CALL PLOT(AX1,AY1,IPEN)
      IPEN=2
      CALL CALCPT(PX2,PY2,AX1,AY1,ISUBN0)
      CALL PLOT(AX1,AY1,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      PYTEMP=PY1
      CALL GRTRSD(PX1,PYTEMP,IX1,IY1,ISUBN0)
#ifdef HAVE_QWIN
      CALL MOVETO(INT2(IX1),INT2(IY1),WXY)
      PYTEMP=PY2
      CALL GRTRSD(PX2,PYTEMP,IX2,IY2,ISUBN0)
      ISTATUS=LINETO(INT2(IX2),INT2(IY2))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      PXGKS(1)=PX1
      PYGKS(1)=100.0 - PY1
      PXGKS(2)=PX2
      PYGKS(2)=100.0 - PY2
      NPTS=2
#ifdef HAVE_OPEN_GL
      CALL GLDRAW(PXGKS,PYGKS,NPTS)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL IGrMoveTo(REAL(IX1),REAL(IY1))
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      CALL IGrLineTo(REAL(IX2),REAL(IY2))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WINTERACTER
      CALL IGrMoveTo(PX1,PY1)
      CALL IGrLineTo(PX2,PY2)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY ROUTINES                    **
C               ******************************************************
C
 5100 CONTINUE
#ifdef HAVE_ZETA
      CALL CALCPT(PX1,PY1,AX1,AY1,ISUBN0)
      IPEN=3
      CALL PLOT(AX1,AY1,IPEN)
      IPEN=2
CCCCC THE FOLLOWING 2 LINES WERE COMMENTED OUT   APRIL 1992   ALAN
CCCCC IF(JPATT.GT.0)IPEN=13+JPATT
CCCCC IF(IPEN.NE.2 .AND. (IPEN.LT.14.OR.IPEN.GT.19))IPEN=2
      CALL CALCPT(PX2,PY2,AX1,AY1,ISUBN0)
      CALL PLOT(AX1,AY1,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               ******************************************************
C
C
 6600 CONTINUE
      IXSUN(1) = IX1
      IXSUN(2) = IX2
      IYSUN(1) = IY1
      IYSUN(2) = IY2
#ifdef HAVE_SUN
      CALL cfpolyline(IXSUN,IYSUN,2)
#endif
      GOTO 9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO XXX---                                       **
C               **  WRITE OUT AN XX                                 **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 96 AND 145                     **
C               ******************************************************
C
 8100 CONTINUE
      ICSTR(1:2)='P['
      NCSTR=2
      NCHTOT=5
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      ICSTR(8:8)=','
      NCSTR=8
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=']'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:3)='V[]'
      NCSTR=3
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      ICSTR(1:2)='V['
      NCSTR=2
      NCHTOT=5
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      ICSTR(8:8)=','
      NCSTR=8
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=']'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      ICSTR(1:8)='newpath '
      NCSTR=8
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=' '
      NCSTR=14
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(20:27)=' moveto '
      NCSTR=27
      CALL GRTRSD(PX2,PY2,IX,IY,ISUBN0)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(33:33)=' '
      NCSTR=33
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(39:52)=' lineto stroke'
      NCSTR=52
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC LANDSCAPE CASE                   **
C               **  <ICARAT>IGV       - ENABLE VECTOR GRAPHICS MODE **
C               **  <ICARAT>WTTTTTBBBBBLLLLLRRRRR - SET PAGE MARGINS**
C               **  NOTE: ENFORCE MARGIN WITH THE "OFFSET" AND NUMBER*
C               **        OF PICTURE POINTS.  WE ONLY WANT TO CLIP  **
C               **        AT THE MARGIN, NOT FORCE A PAGE ERASE.    **
C               **  <ICARAT>Tttttt    - SET Y ORGIN FROM TOP OF PAGE**
C               **  <ICARAT>Jjjjjj    - SET X ORGIN FROM LEFT       **
C               **  <ICARAT>PWnn      - SET PEN WIDTH (3 CLOSEST TO **
C               **                      0.1 DATAPLOT UNITS)         **
C               **  <ICARAT>UXXXXX:YYYYY - MOVE                     **
C               **  <ICARAT>DXXXXX:YYYYY - DRAW                     **
C               **  <ICARAT>IGE       - DISABLE VECTOR GRAPHICS MODE**
C               **  REFERENCE: QUIC PROGRAMMERS MANUAL - CHAPTER ON **
C               **             VECTOR GRAPHICS                      **
C               ******************************************************
C
 9100 CONTINUE
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:4)='IGV'
      ICSTR(5:5)=ICARAT
      ICSTR(6:6)='W'
C
      IF(IORNSW.EQ.'PORT')GOTO9110
CCCCC AXLEFT=IQUILM
CCCCC AXRGHT=11.*QUIPPI-IQUIRM
CCCCC AYTOP=IQUITM
CCCCC AYBOT=8.5*QUIPPI-IQUIBM
CCCCC AFACTH=11.*QUIPPI
CCCCC AFACTV=8.5*QUIPPI
      IX2=11000
      IY2=8500
      GOTO9120
C
 9110 CONTINUE
C
CCCCC AXLEFT=IQU2LM
CCCCC AXRGHT=8.5*QUIPPI-IQU2RM
CCCCC AYTOP=IQU2TM
CCCCC AYBOT=11.*QUIPPI-IQU2BM
CCCCC AFACTH=8.5*QUIPPI
CCCCC AFACTV=11.*QUIPPI
      IX2=8500
      IY2=11000
C
 9120 CONTINUE
C
CCCCC IX=INT(1000.*AXLEFT/QUIPPI+0.5)
CCCCC IX2=INT(1000.*AXRGHT/QUIPPI+0.5)
CCCCC IY=INT(1000.*AYTOP/QUIPPI+0.5)
CCCCC IY2=INT(1000.*AYBOT/QUIPPI+0.5)
      IX=0
      IY=0
      NCSTR=6
      NCHTOT=-5
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      ICSTR(27:27)=ICARAT
      ICSTR(28:33)='T00000'
      ICSTR(34:34)=ICARAT
      ICSTR(35:40)='J00000'
      ICSTR(41:41)=ICARAT
      ICSTR(42:45)='PW03'
      NCSTR=45
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=ICARAT
      ICSTR(2:2)='U'
C     NOTE: QUIC POSIOTIONS FROM TOP OF PAGE NOT THE BOTTOM, REVERSE Y
      PYTEMP=100.-PY1
      CALL QUICPT(PX1,PYTEMP,IX1,IY1,ISUBN0)
      NCSTR=2
      NCHTOT=-5
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      ICSTR(8:8)=':'
      NCSTR=8
CCCCC THE FOLLOWING LINE WAS FIXED MAY 1991
CCCCC CALL GRTRIN(IY1,NCHTOT,ICSTR,ISUBNO)
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=ICARAT
      ICSTR(15:15)='D'
      NCSTR=15
      PYTEMP=100.-PY2
      CALL QUICPT(PX2,PYTEMP,IX1,IY1,ISUBN0)
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      ICSTR(21:21)=ICARAT
      NCSTR=21
CCCCC THE FOLLOWING LINE WAS FIXED MAY 1991
CCCCC CALL GRTRIN(IY1,NCHTOT,ICSTR,ISUBN0)
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      ICSTR(27:27)=ICARAT
      ICSTR(28:30)='IGE'
      NCSTR=30
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
      NTEMP=2
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      IXSUN(1)=IX1
      IYSUN(1)=IY1
CCCCC THE FOLLOWING LINE WAS CORRECTED MAY 24, 1991 (JJF)
CCCCC IXSUN(2)=X2
      IXSUN(2)=IX2
      IYSUN(2)=IY2
      CALL XDRAW(IXSUN,IYSUN,NTEMP)
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
      IF(ITCST.EQ.'CLOS')GOTO9000
CTURB CALL TCDRLI(PX1,PY1,PX2,PY2)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      NP=2
      PXGKS(1) = PX1/100.0
      PXGKS(2) = PX2/100.0
      PYGKS(1) = PY1/100.0
      PYGKS(2) = PY2/100.0
#ifdef HAVE_GKS
      CALL GPL(NP, PXGKS, PYGKS)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      NTEMP=2
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      JPATT=1
CCCCC JULY 2001.  PASS JCOL AS ARGUMENT RATHER THAN HARD CODING IT.
CCCCC JCOL=1
#ifdef HAVE_GD
      CALL GDDRAW(IX1,IY1,IX2,IY2,JCOL,JPATT)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      PXGKS(1)=REAL(IX1)
      PYGKS(1)=REAL(IY1)
COLD  CALL aqtMoveTo(AX1,AY1)
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      PXGKS(2)=REAL(IX2)
      PYGKS(2)=REAL(IY2)
      NPTS=2
COLD  CALL aqtAddLineTo(AX2,AY2)
      ICAP=1
      IF(IAQUCS.EQ.'ROUN')ICAP=2
      IF(IAQUCS.EQ.'SQUA')ICAP=3
#ifdef HAVE_AQUA
      CALL aqdraw(PXGKS,PYGKS,NPTS,ICAP)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      ICSTR(1:1)=IBASLC
      ICSTR(2:13)='drawline[ 0]'
      NCSTR=13
C
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      NCHTOT=5
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='('
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=')'
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='('
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=')'
C
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
C
      CALL DPCONA(34,IQUOTE)
C
      ISVGLN=ISVGLN+1
      ICSTR(1:9)='   <g id='
      ICSTR(10:10)=IQUOTE
      NCSTR=10
      IF(ISVGLN.LE.9)THEN
        NCHTOT=1
      ELSEIF(ISVGLN.LE.99)THEN
        NCHTOT=2
      ELSEIF(ISVGLN.LE.999)THEN
        NCHTOT=3
      ELSEIF(ISVGLN.LE.9999)THEN
        NCHTOT=4
      ELSEIF(ISVGLN.LE.99999)THEN
        NCHTOT=5
      ELSE
        NCHTOT=6
      ENDIF
      CALL GRTRIN(ISVGLN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='>'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:8)='   <line'
      ICSTR(9:9)=IQUOTE
      NCSTR=-9
C
      IF(ISVGSS(1:3).EQ.'EXT')THEN
        NCSTR=12
        ICSTR(1:NCSTR)='      class='
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+6)='narrow-'
        NCSTR=NCSTR+7
        ICSTR(NCSTR:NCSTR+4)='solid'
        NCSTR=NCSTR+5
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        CALL GRTRCO('FORE',ISVGFC,JCOL2)
        IF(JCOL2.NE.JCOL)THEN
          ICSTR(1:12)='      style='
          ICSTR(13:13)=IQUOTE
          NCSTR=-13
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:21)='             stroke:#'
          NCSTR=21
          NCHTOT=2
          JTEMP=JCOL
          IF(JTEMP.LE.0)THEN
C
C           DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C           THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C           SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
            AVAL=(255./100.)*REAL(ABS(JTEMP))
            IF(AVAL.LE.0.0)AVAL=0.0
            IF(AVAL.GE.255.0)AVAL=255.0
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ENDIF
          CALL DPCONX(JRED,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JGREEN,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JBLUE,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+2
          ICSTR(NCSTR:NCSTR)=';'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:13)='             '
          ICSTR(14:14)=IQUOTE
          NCSTR=-14
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
C
      ELSE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:15)='         style='
        ICSTR(16:16)=IQUOTE
        NCSTR=-16
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:28)='             stroke-width:1;'
        NCSTR=-26
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        IF(ISVGCA.EQ.'ROUN')THEN
          NCSTR=35
          ICSTR(1:NCSTR)='             stroke-linecap: round;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGCA.EQ.'SQUA')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linecap: square;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGCA.EQ.'BUTT')THEN
          NCSTR=34
          ICSTR(1:NCSTR)='             stroke-linecap: butt;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          CONTINUE
        ENDIF
C
        IF(ISVGJS.EQ.'ROUN')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linejoin: round;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGJS.EQ.'BEVE')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linejoin: bevel;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGJS.EQ.'MITE')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linejoin: miter;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          CONTINUE
        ENDIF
C
        ICSTR(1:21)='             stroke:#'
        NCSTR=21
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          JRED=INT(AVAL+0.5)
          JBLUE=JRED
          JGREEN=JRED
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          JRED=IRED(JTEMP)
          JGREEN=IGREEN(JTEMP)
          JBLUE=IBLUE(JTEMP)
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      NCHTOT=5
      ICSTR(1:9)='      x1='
      ICSTR(10:10)=IQUOTE
      NCSTR=10
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL GRTRSD(PX2,PY2,IX2,IY2,ISUBN0)
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+3)=' y1='
      NCSTR=NCSTR+4
      ICSTR(NCSTR:NCSTR)=IQUOTE
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+3)=' x2='
      NCSTR=NCSTR+4
      ICSTR(NCSTR:NCSTR)=IQUOTE
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+3)=' y2='
      NCSTR=NCSTR+4
      ICSTR(NCSTR:NCSTR)=IQUOTE
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
C
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+1)='/>'
      NCSTR=-(NCSTR+1)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:4)='</g>'
      NCSTR=-4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
C     SET CAP AND JOIN STYLES
C
      IF(ICAICA.EQ.'BUTT')THEN
        ICAP=2
      ELSEIF(ICAICA.EQ.'ROUN')THEN
        ICAP=3
      ELSEIF(ICAICA.EQ.'SQUA')THEN
        ICAP=4
      ELSE
        ICAP=1
      ENDIF
      IF(ICAIJS.EQ.'MITE')THEN
        IJOIN=2
      ELSEIF(ICAIJS.EQ.'ROUN')THEN
        IJOIN=3
      ELSEIF(ICAICA.EQ.'BEVE')THEN
        IJOIN=4
      ELSE
        IJOIN=1
      ENDIF
C
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
      AX1=PX1
      AY1=PY1
      AX2=PX2
      AY2=PY2
      CALL GRTRSD(AX1,AY1,IX1,IY1,ISUBN0)
      CALL GRTRSD(AX2,AY2,IX2,IY2,ISUBN0)
      JPATT=1
C
      PXGKS(1)=AX1
      PXGKS(2)=AX2
      PYGKS(1)=AY1
      PYGKS(2)=AY2
      PTHIC2=0.1
      NP=2
      CALL CADRAW(IVAL2,PXGKS,PYGKS,NP,ICAP,IJOIN,JPATT,PTHIC2)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRLI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRDRLI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IX3,IY3,IX4,IY4
 9013   FORMAT('IX3,IY3,  IX4,IY4 = ',2I8,4X,2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)NCSTR,IERRG
 9023   FORMAT('NCSTR,IERRG = ',I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GE.1)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRDRPH(PX,PY,NP,
     1                  IFIG,IPATT,IFONT,ICASE,IJUST,IDIR,ANGLE,
     1                  IFILL,ICOL,ICOLR,ICOLG,ICOLB,IRGBFL,
     1                  JPATT,JFONT,JCASE,JJUST,JDIR,ANGLE2,JFILL,JCOL,
     1                  JSIZE,
     1                  PTHICK,JTHICK,PTHIC2,
     1                  PHEIGH,PWIDTH,PVEGAP,PHOGAP,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2,
     1                  JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  ISYMBL,ISPAC)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, DRAW THE HORIZONTAL
C              POLYMARKER WHOSE COORDINATES ARE GIVEN IN (PX(.),PY(.)).
C     NOTE--THE COORDINATES IN (PX(.),PY(.)) ARE IN
C           STANDARDIZED (0.0 TO 100.0) UNITS.
C     NOTE--THERE ARE NP SUCH COORDINATE PAIRS.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY   1989. SUN (BY BILL ANDERSON)
C                                       DRIVER OBSOLETE
C     UPDATED         --JANUARY   1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL     1989. SOFT-CODE BACKSLASH FOR UNIX
C     UPDATED         --MARCH     1990. X11 (BY ALAN HECKERT)
C     UPDATED         --JULY      1990. PACK HP-2622 OUTPUT
C     UPDATED         --MARCH     1991. PACK REGIS OUTPUT
C     UPDATED         --MAY       1991. RENUMBER TOP BRANCHES (JJF)
C                                       DRIVER OBSOLETE
C     UPDATED         --MAY       1991. VGA/TURBOC DRIVER (JJF)
C     UPDATED         --MAY       1991. FIX POSTSCRIPT CHAR. INDICES
C     UPDATED         --OCTOBER   1991. POSTSCRIPT FONTS (ALAN)
C     UPDATED         --MAY       1992. ADJUST JUSTIFICATION
C                                       FOR WINDOW (ALAN)
C     UPDATED         --SEPTEMBER 1994. FIX TURBO-C SECTION BAD C-SIDE
C                                       CHARACTER PLOTS (NO X'S)
C     UPDATED         --SEPTEMBER 1994. FIX TURBO-C SECTION
C                                       BAD C-SIDE MULTIPLOTS (SCALING)
C     UPDATED         --JANUARY   1995. FIX CHAR CENTERING FOR TURBO-C
C     UPDATED         --SEPTEMBER 1995. FIX TURBO-C SECTION BAD C-SIDE
C                                       CHARACTER PLOTS (NO X'S) (AGAIN)
C     UPDATED         --SEPTEMBER 1995. ADD "PIXEL" CHARACTER TO DRAW
C                                       A SINGLE POINT.  NOT IMPLEMENTED
C                                       FOR ALL DEVICES ON INITIAL PASS.
C     UPDATED         --JULY      1996. LAHEY DRIVER (ALAN HECKERT)
C                                       OLD CALCOMP STYLE
C                                       DRIVER OBSOLETE
C     UPDATED         --JULY      1996. LOWER CASE "BLAN" (BUG FOR CASE
C                                       ASIS)
C     UPDATED         --OCTOBER   1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER   1996. OPENGL DRIVER (ALAN)
C                                       USE BILL MITCHELLS OPENGL
C                                       BINDING FOR FORTRAN
C     UPDATED         --OCTOBER   1996. GKS (ALAN)
C     UPDATED         --OCTOBER   1996. BINARY CGM (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996. DISPLAY POSTSCRIPT (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER  1997. GENERAL CODED FOR GUI
C     UPDATED         --JULY      1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE      2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE      2000. MACINTOSH
C                                       PLACEHOLDER FOR NOW
C                     --MARCH     2002. CHANGE TO QUARTZ (NEW MAC GRAPHICS
C                                       LIBRARY)
C     UPDATED         --JUNE      2000. PC PRINTER
C                                       PLACEHOLDER FOR NOW
C                     --MARCH     2002. CHANGE TO GHOSTSCRIPT
C     UPDATED         --MARCH     2002. LATEX (USING EEPIC)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --MARCH     2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH     2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY  2006. IMPLEMENT LATEK DRIVER
C     UPDATED         --APRIL     2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL     2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                       (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --FEBRUARY  2012. "<" AND ">" IN STRINGS FOR SVG
C     UPDATED         --JULY      2015. ISSUE WITH TEXT FOR SVG DRIVER
C                                       WHEN USING THE CHROME BROWSER
C     UPDATED         --SEPTEMBER 2015 FIX GREYSCALE COLOR FOR SVG
C     UPDATED         --NOVEMBER  2015 FOR SVG, CHECK FOR "&" IN TEXT
C     UPDATED         --OCTOBER   2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER   2016. ADD TEMPLATES FOR SEVERL FUTURE
C     UPDATED         --OCTOBER   2020. SUPPORT FOR RGB COLOR
C     UPDATED         --OCTOBER   2023. SCALABLE FONTS FOR X11
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
CQWIN USE DFLIB
#ifdef HAVE_QWIN
      USE IFQWIN
CCCCC LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWFN
      TYPE (XYCOORD)   WXY
#endif
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*4 IFONT
      CHARACTER*4 ICASE
      CHARACTER*4 IJUST
      CHARACTER*4 IDIR
      CHARACTER*4 IFILL
      CHARACTER*4 ICOL
      CHARACTER*4 IFIG
      CHARACTER*4 IPATT
C
      CHARACTER*24 ISYMBL
      CHARACTER*4 ISPAC
C
      CHARACTER*4 ICTEXT(16)
C
      CHARACTER*4 IC4
      CHARACTER*1 IC
      CHARACTER*1 IC1
      CHARACTER*1 IC2
      CHARACTER*1 ICARAT
      CHARACTER*1 IQUOTE
      CHARACTER*2 ICJUNK
C
      DIMENSION PX(*)
      DIMENSION PY(*)
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C  FOLLOWING 2 LINES ADDED MARCH, 1990 FOR X11
      INTEGER STRING(20)
      INTEGER IADE(80)
CCCCC FOLLOWING 5 LINES FOR LAHEY COMPILER ADDED JULY 1996.
#ifdef HAVE_LAHEY_CALCOMP
      CHARACTER*40 CLAHEY
      REAL RLAHEY(7)
      INTEGER ILAHEY(9)
      DIMENSION IHOLL(10)
#endif
      CHARACTER*4 IJUSTH
      CHARACTER*4 IJUSTV
C
CCCCC MARCH 2002: ADD FOLLOWING LINE FOR SVG DEVICE
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
CCCCC THE FOLLOWING COMMON BLOCK WAS ADDED MAY 1992.
      COMMON /RWIND/
     1PWXMIN,PWXMAX,PWYMIN,PWYMAX,PWZMIN,PWZMAX,
     1WWXMIN,WWXMAX,WWYMIN,WWYMAX,WWZMIN,WWZMAX
C
CCCCC MARCH 2002: ADD FOLLOWING LINE FOR SVG DEVICE
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='DRPH'
      IERRG4='NO'
      IC4='-999'
      IC='-'
      IC1='-'
      IC2='-'
C
      NCSTR=(-999)
      K=(-999)
      NCTEP2=(-999)
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
C
      PXDEL=(-999.0)
      PYDEL=(-999.0)
      PXINC=(-999.0)
      PYINC=(-999.0)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRPH')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRDRPH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)NP,IGUNIT,JPATT,JFONT,JCASE,JJUST
   52   FORMAT('NP,IGUNIT,JPATT,JFONT,JCASE,JJUST = ',6I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)IMANUF,IFIG,IPATT,IFONT,ICASE,IJUST,IFILL
   53   FORMAT('IMANUF,IFIG,IPATT,IFONT,ICASE,IJUST,IFILL = ',
     1         6(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        DO55I=1,NP
          WRITE(ICOUT,56)PX(I),PY(I)
   56     FORMAT('PX(I),PY(I) = ',2G15.7)
          CALL DPWRST('XXX','BUG ')
   55   CONTINUE
        WRITE(ICOUT,63)IDIR,ICOL,ANGLE,ANGLE2,JDIR,JCOL
   63   FORMAT('IDIR,ICOL,ANGLE,ANGLE2,JDIR,JCOL = ',
     1         2(A4,2X),2G15.7,2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,66)PTHICK,JTHICK,PTHIC2
   66   FORMAT('PTHICK,JTHICK,PTHIC2 = ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,67)PHEIGH,PWIDTH,PVEGAP,PHOGAP
   67   FORMAT('PHEIGH,PWIDTH,PVEGAP,PHOGAP = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,68)PHEIG2,PWIDT2,PVEGA2,PHOGA2
   68   FORMAT('PHEIG2,PWIDT2,PVEGA2,PHOGA2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)JFILL,JHOGA2,JVEGA2,JHEIG2,JWIDT2
   69   FORMAT('JFILL,JHOGA2,JVEGA2,JHEIG2,JWIDT2 = ',5I5)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,71)ISYMBL,ISPAC
   71   FORMAT('ISYMBL,ISPAC = ',A24,2X,A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,79)IBUGG4,ISUBG4,IERRG4
   79   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               **************************************
C               **  STEP XX--                       **
C               **  TREAT THE BLANK CHARACTER CASE  **
C               **************************************
C
      IF(ISYMBL.EQ.'    ')GOTO9000
      IF(ISYMBL.EQ.'BLAN')GOTO9000
      IF(ISYMBL.EQ.'NONE')GOTO9000
      IF(ISYMBL.EQ.'SPAC')GOTO9000
      IF(ISYMBL.EQ.'BL')GOTO9000
      IF(ISYMBL.EQ.'NO')GOTO9000
      IF(ISYMBL.EQ.'SP')GOTO9000
CCCCC JULY 1996.  IF CHARACTER CASE ASIS SET, THESE WILL BE IN LOWER
CCCCC CASE.  REPEAT FOR LOWER CASE.
      IF(ISYMBL.EQ.'blan')GOTO9000
      IF(ISYMBL.EQ.'none')GOTO9000
      IF(ISYMBL.EQ.'spac')GOTO9000
      IF(ISYMBL.EQ.'bl')GOTO9000
      IF(ISYMBL.EQ.'no')GOTO9000
      IF(ISYMBL.EQ.'sp')GOTO9000
C
C               ********************************************************
C               **  STEP 0--                                          **
C               **  COMPUTE THE INCREMENT TO ALLOW A NEW START POINT  **
C               **  FOR THE MARKER.  THIS IMNCREMENT DEPENDS ON THE   **
C               **  JUSTIFICATION FOR THE MARKER.                     **
C               ********************************************************
C
CCCCC ADD FOLLOWING 2 LINES  JULY 1996.
      IJUSTH='CENT'
      IJUSTV='CENT'
      IF(IJUST.EQ.'LEFT')GOTO910
      IF(IJUST.EQ.'CENT')GOTO920
      IF(IJUST.EQ.'RIGH')GOTO930
C
      IF(IJUST.EQ.'LJUS')GOTO910
      IF(IJUST.EQ.'CJUS')GOTO920
      IF(IJUST.EQ.'RJUS')GOTO930
C
      IF(IJUST.EQ.'LEBO')GOTO910
      IF(IJUST.EQ.'CEBO')GOTO920
      IF(IJUST.EQ.'RIBO')GOTO930
C
      IF(IJUST.EQ.'LECE')GOTO940
      IF(IJUST.EQ.'CECE')GOTO950
      IF(IJUST.EQ.'RICE')GOTO960
C
      IF(IJUST.EQ.'LETO')GOTO970
      IF(IJUST.EQ.'CETO')GOTO980
      IF(IJUST.EQ.'RITO')GOTO990
C
      GOTO910
C
  910 CONTINUE
      PXINC=0.0
      PYINC=0.0
      IJUSTH='LEFT'
      IJUSTV='BOTT'
      GOTO995
C
  920 CONTINUE
      PXINC=PWIDT2/2.0
      PYINC=0.0
      IJUSTH='CENT'
      IJUSTV='BOTT'
      GOTO995
C
  930 CONTINUE
      PXINC=PWIDT2
      PYINC=0.0
      IJUSTH='RIGH'
      IJUSTV='BOTT'
      GOTO990
C
  940 CONTINUE
      PXINC=0.0
      PYINC=PHEIG2/2.0
      IJUSTH='LEFT'
      IJUSTV='CENT'
      GOTO995
C
  950 CONTINUE
      PXINC=PWIDT2/2.0
      PYINC=PHEIG2/2.0
      IJUSTH='CENT'
      IJUSTV='CENT'
      GOTO995
C
  960 CONTINUE
      PXINC=PWIDT2
      PYINC=PHEIG2/2.0
      IJUSTH='RIGH'
      IJUSTV='CENT'
      GOTO990
C
  970 CONTINUE
      PXINC=0.0
      PYINC=PHEIG2
      IJUSTH='LEFT'
      IJUSTV='TOP '
      GOTO995
C
  980 CONTINUE
      PXINC=PWIDT2/2.0
      PYINC=PHEIG2
      IJUSTH='CENT'
      IJUSTV='TOP '
      GOTO995
C
  990 CONTINUE
      PXINC=PWIDT2
      PYINC=PHEIG2
      IJUSTH='RIGH'
      IJUSTV='TOP '
      GOTO995
C
  995 CONTINUE
CCCCC FOLLOWING 2 LINES ADDED MAY 1992.
      PXINC=PXINC*(100.0/(PWXMAX-PWXMIN))
      PYINC=PYINC*(100.0/(PWYMAX-PWYMIN))
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4014 (ETC.) CASE            **
C               ******************************************************
C
CCCCC SEPTEMBER 1995.  ADD "PIXEL" CAPABILITY.
 1100 CONTINUE
      IFACTO=4
CCCCC IF(NUMHPP.GE.4000)IFACTO=1
CCCCC FOLLOWING LINE MODIFIED MARCH, 1990 (ALLOW PORTRAIT, SQUARE ORIEN)
      IF(NUMVPP.GE.3000)IFACTO=1
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO1170I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO1175IROW=IX,IX+NCOL-1
            DO1178ICOLZ=IY,IY+NCOL-1
              ICSTR(1:1)=IGSC
              ICSTR(2:2)=IFSC
              NCSTR=2
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ-IYINC
              CALL TKTRPT(IXTEMP,IYTEMP,IFACTO,ICSTR,NCSTR,ISUBN0)
              CALL TKTRPT(IXTEMP,IYTEMP,IFACTO,ICSTR,NCSTR,ISUBN0)
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1178       CONTINUE
 1175     CONTINUE
 1170   CONTINUE
      ELSE
        DO1110I=1,NP
          ICSTR(1:1)=IGSC
          NCSTR=1
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
          CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
          CALL TKTRPT(IX1P,IY1P,IFACTO,ICSTR,NCSTR,ISUBN0)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IUSC
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ISYMBL(1:1)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1110   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  USE THE p (= MOVE) INSTRUCTION                  **
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  AND THE ~' (= INVOKE LABEL MODE) INSTRUCTION    **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH IS THE **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 80-85, 253-254.                 **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 111 AND 112.                    **
C               ******************************************************
C
 2100 CONTINUE
C
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,2162)
 2162   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE HP-7221 DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
        DO2110I=1,NP
          ICSTR(1:1)='p'
          NCSTR=1
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
          CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
          CALL HPTRPT(IX1P,IY1P,ICSTR,NCSTR,ISUBN0)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='}'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:2)='~'''
          ICSTR(3:3)=ISYMBL(1:1)
          ICSTR(4:4)=IETXC
          ICSTR(5:5)='}'
          NCSTR=5
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 2110   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  USE THE PU (= PEN UP) INSTRUCTION               **
C               **  AND THE PA (= PLOT ABSOLUTE) INSTRUCTION        **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  AND THE LB (= LABEL) INSTRUCTION                **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH   TRAILING SEMI-COLONS WHICH ARE THE      **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 62, 143.                        **
C               **             PAGE 65-67, 143.                     **
C               **             PAGE 75, 141.                        **
C               ******************************************************
C
CCCCC SEPTEMBER 1995.  ADD SUPPORT FOR PIXEL CAPABILITY
 2200 CONTINUE
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        ICSTR(1:14)='1 setlinewidth'
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        DO2270I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          IX=IX-IXINC
          IY=IY-IYINC
          IX2=IX+NCOL-1
          IY2=IY+NCOL-1
          DO2280ICOLZ=IY,IY2
C
            ICSTR(1:5)='PU;PA'
            NCSTR=5
            NCHTOT=5
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            ICSTR(11:11)=','
            NCSTR=11
            CALL GRTRIN(ICOLZ,NCHTOT,ICSTR,NCSTR)
            ICSTR(17:17)=';'
            NCSTR=17
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
            ICSTR(1:5)='PD;PA'
            NCSTR=5
            NCHTOT=5
            CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
            ICSTR(11:11)=','
            NCSTR=11
            CALL GRTRIN(ICOLZ,NCHTOT,ICSTR,NCSTR)
            ICSTR(17:17)=';'
            NCSTR=17
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 2280     CONTINUE
 2270   CONTINUE
      ELSE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        NCTEP1=NCTEXT+1
        NCTEP2=NCTEXT+2
        ICTEXT(NCTEP1)=IETXC
        ICTEXT(NCTEP2)=';'
C
        DO2210I=1,NP
C
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          ICSTR(1:5)='PU;PA'
          NCSTR=5
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          ICSTR(11:11)=','
          NCSTR=11
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          ICSTR(17:17)=';'
          NCSTR=17
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:2)='LB'
          NCSTR=2
          DO2212J=1,NCTEP2
            K=J+NCSTR
            ICSTR(K:K)=ICTEXT(J)
 2212     CONTINUE
          NCSTR=K
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 2210   CONTINUE
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-12, 10-13, 10-21.
C               **********************************************************
C
C  MODIFIED JULY, 1990 TO PACK ONTO 1 LINE.
C
CCCCC SEPTEMBER 1995.  ADD PIXEL CAPABILITY.
C
 2300 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        ICSTR(1:14)='1 setlinewidth'
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        DO2370I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          IX=IX-IXINC
          IY=IY-IYINC
          IX2=IX+NCOL-1
          IY2=IY+NCOL-1
          DO2380ICOLZ=IY,IY2
C
            ICSTR(1:1)=IESCC
            ICSTR(2:4)='*pa'
            NCSTR=4
            NCHTOT=5
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            ICSTR(10:10)=','
            NCSTR=10
            CALL GRTRIN(ICOLZ,NCHTOT,ICSTR,NCSTR)
            ICSTR(16:16)='Z'
            NCSTR=16
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
            ICSTR(1:1)=IESCC
            ICSTR(2:4)='*pb'
            NCSTR=4
            NCHTOT=5
            CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
            ICSTR(10:10)=','
            NCSTR=10
            CALL GRTRIN(ICOLZ,NCHTOT,ICSTR,NCSTR)
            ICSTR(16:16)='Z'
            NCSTR=16
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 2380     CONTINUE
 2370   CONTINUE
      ELSE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        NCTEP1=NCTEXT+1
        ICTEXT(NCTEP1)=ICRC
        DO2310I=1,NP
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          ICSTR(1:1)=IESCC
          ICSTR(2:4)='*pa'
          NCSTR=4
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          ICSTR(10:10)=','
          NCSTR=10
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          ICSTR(16:16)='Z'
          NCSTR=16
          ICSTR(17:17)=IESCC
          ICSTR(18:19)='*l'
          NCSTR=19
          DO2312J=1,NCTEP1
            K=J+NCSTR
            ICSTR(K:K)=ICTEXT(J)
 2312     CONTINUE
          NCSTR=K
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 2310   CONTINUE
      ENDIF
C
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASE              **
C               **********************************************************
C
 2600 CONTINUE
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO2670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          IX=IX-IXINC
          IY=IY-IYINC
          DO2675IROW=IX,IX+NCOL-1
            DO2678ICOLZ=IY,IY-NCOL+1,-1
              PX1=IROW-IXINC
              PY1=ICOLZ+IYINC
#ifdef HAVE_LIBPLOT
              CALL PLPOIN(DBLE(PX1),DBLE(PY1))
#endif
 2678       CONTINUE
 2675     CONTINUE
 2670   CONTINUE
      ELSE
        ILAST=80
        DO2610I=80,1,-1
          ILAST=I
          IF(ILPLFN(I:I).NE.' ')GOTO2619
 2610   CONTINUE
 2619   CONTINUE
        DO2620I=1,ILAST
          CALL DPCOAN(ILPLFN(I:I),IJUNK)
          IADE(I)=IJUNK
 2620   CONTINUE
        IADE(ILAST+1)=0
C
        CALL DPCOAN(ISYMBL(1:1),IJUNK)
        STRING(1)=IJUNK
        STRING(2)=0
        IERR=0
C
        DO2650I=1,NP
          PX1=PX(I)
          PY1=PY(I)
#ifdef HAVE_LIBPLOT
          CALL PLTXTH(IADE,STRING,DBLE(PX1),DBLE(PY1),IFONTH,IFONTV,
     1                DBLE(PHEIG2),IERR)
#endif
 2650   CONTINUE
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,3102)
 3102   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE GENERAL DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        IF(IJUSSW.EQ.'ON')THEN
          DO3160I=1,NP
            PX1P=PX(I)
            PY1P=PY(I)
            CALL GRTRSA(PX1P,PY1P,AX1,AY1,ISUBN0)
            PX1P=AX1
            PY1P=AY1
            ICSTR(1:8)='MOVE TO '
            NCSTR=8
            NCHTOT=10
            NCHDEC=5
            CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(19:20)='  '
            NCSTR=20
            CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ICSTR(1:11)='WRITE TEXT '
            NCSTR=11
            DO3162J=1,NCTEXT
              K=J+NCSTR
              ICSTR(K:K)=ICTEXT(J)
 3162       CONTINUE
            NCSTR=K
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3160     CONTINUE
        ELSE
          DO3110I=1,NP
            PX1P=PX(I)-PXINC
            PY1P=PY(I)-PYINC
            CALL GRTRSA(PX1P,PY1P,AX1,AY1,ISUBN0)
            PX1P=AX1
            PY1P=AY1
            ICSTR(1:8)='MOVE TO '
            NCSTR=8
            NCHTOT=10
            NCHDEC=5
            CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(19:20)='  '
            NCSTR=20
            CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ICSTR(1:11)='WRITE TEXT '
            NCSTR=11
            DO3112J=1,NCTEXT
              K=J+NCSTR
              ICSTR(K:K)=ICTEXT(J)
 3112       CONTINUE
            NCSTR=K
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3110     CONTINUE
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,3262)
 3262   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE GENERAL DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        IF(IJUSSW.EQ.'ON')THEN
          IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
            DO3280I=1,NP
              CALL GRTRSA(PX(I),PY(I),AX1,AY1,ISUBN0)
              IPXTMP=INT(AX1*10.**IGENFA+0.5)
              IPYTMP=INT(AY1*10.**IGENFA+0.5)
              ICSTR(1:2)='M '
              NCSTR=2
              NCHTOT=IGENFA+3
              CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)='  '
              CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              ICSTR(1:5)='WRTE '
              NCSTR=5
              DO3282J=1,NCTEXT
                K=J+NCSTR
                ICSTR(K:K)=ICTEXT(J)
 3282         CONTINUE
              NCSTR=K
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3280       CONTINUE
          ELSE
            DO3260I=1,NP
              PX1P=PX(I)
              PY1P=PY(I)
              CALL GRTRSA(PX1P,PY1P,AX1,AY1,ISUBN0)
              PX1P=AX1
              PY1P=AY1
              ICSTR(1:5)='MOTO '
              NCSTR=5
              NCHTOT=10
              NCHDEC=5
              CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
              ICSTR(16:17)='  '
              NCSTR=17
              CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              ICSTR(1:5)='WRTE '
              NCSTR=5
              DO3252J=1,NCTEXT
                K=J+NCSTR
                ICSTR(K:K)=ICTEXT(J)
 3252         CONTINUE
              NCSTR=K
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3260       CONTINUE
          ENDIF
        ELSE
          IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
            DO3240I=1,NP
              PX1P=PX(I)-PXINC
              PY1P=PY(I)-PYINC
              CALL GRTRSA(PX1P,PY1P,AX1,AY1,ISUBN0)
              IPXTMP=INT(AX1*10.**IGENFA+0.5)
              IPYTMP=INT(AY1*10.**IGENFA+0.5)
              ICSTR(1:2)='M '
              NCSTR=2
              NCHTOT=IGENFA+3
              CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)='  '
              CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              ICSTR(1:5)='WRTE '
              NCSTR=5
              DO3242J=1,NCTEXT
                K=J+NCSTR
                ICSTR(K:K)=ICTEXT(J)
 3242         CONTINUE
              NCSTR=K
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3240       CONTINUE
          ELSE
            DO3210I=1,NP
              PX1P=PX(I)-PXINC
              PY1P=PY(I)-PYINC
              CALL GRTRSA(PX1P,PY1P,AX1,AY1,ISUBN0)
              PX1P=AX1
              PY1P=AY1
              ICSTR(1:5)='MOTO '
              NCSTR=5
              NCHTOT=10
              NCHDEC=5
              CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
              ICSTR(16:17)='  '
              NCSTR=17
              CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              ICSTR(1:5)='WRTE '
              NCSTR=5
              DO3212J=1,NCTEXT
                K=J+NCSTR
                ICSTR(K:K)=ICTEXT(J)
 3212         CONTINUE
              NCSTR=K
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3210       CONTINUE
          ENDIF
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  TEXT (XCOOR,YCOOR) FINAL "<SYMBOL>";                     **
C               ***************************************************************
C
 3300 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,3362)
 3362   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE CGM DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        NCHTOT=10
        NCHDEC=5
C
        IF(IJUSSW.EQ.'ON')THEN
          DO3360I=1,NP
            PX1P=PX(I)
            PY1P=PY(I)
            CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
            ICSTR(1:6)='TEXT ('
            NCSTR=6
            NCHTOT=10
            NCHDEC=5
            CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(17:17)=','
            NCSTR=17
            CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(28:36)=') FINAL "'
            ICSTR(37:37)=ICTEXT(NCTEXT)
            ICSTR(38:39)='";'
            NCSTR=39
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3360     CONTINUE
        ELSE
          DO3310I=1,NP
            PX1P=PX(I)-PXINC
            PY1P=PY(I)-PYINC
            CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
            ICSTR(1:6)='TEXT ('
            NCSTR=6
            NCHTOT=10
            NCHDEC=5
            CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(17:17)=','
            NCSTR=17
            CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(28:36)=') FINAL "'
            ICSTR(37:37)=ICTEXT(NCTEXT)
            ICSTR(38:39)='";'
            NCSTR=39
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3310     CONTINUE
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               **  USE CALCOMP LIBRARY                             **
C               **      SYMBOL - WRITES TEXT                        **
C               **      CALCPT - DATAPLOT ROUTINE TO CONVERT FROM   **
C               **               PERCENT UNITS TO INCHES            **
C               **      CALCTR - DATAPLOT ROUTINE TO CONVERT        **
C               **               CHARACTER VARIABLE TO HOLLERITH    **
C               **               FORMAT (NOT NECCESARY ON ALL       **
C               **               SYSTEMS, BUT IS ON OTHERS.         **
C               ******************************************************
C
 4100 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,4162)
 4162   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE CALCOMP DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
        NCTEXT=1
        ICTEXT(1)=ISYMBL(1:4)
C
        DO4110I=1,NP
C
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
#ifdef HAVE_CALCOMP
          CALL CALCPT(PX1P,PY1P,AX,AY,ISUBN0)
#endif
          ANGLE=0.
          AXTEMP=0.
#ifdef HAVE_CALCOMP
          CALL CALCPT(AXTEMP,PHEIG2,AYTMP2,HEIGHT,ISUBN0)
          CALL CALCTR(ICTEXT(1),IHOLL,NCTEXT)
#endif
 4110   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
#ifdef HAVE_LAHEY_CALCOMP
        CALL GRINFO(ILAHEY,RLAHEY,CLAHEY)
#endif
        IPEN=JCOL
        DO4670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
#ifdef HAVE_LAHEY_CALCOMP
          CALL CALCPT(PX1,PY1,AX,AY,ISUBN0)
          CALL SETPIX(AX,AY,IPEN)
#endif
 4670   CONTINUE
      ELSE
C
        NCTEXT=1
        ICTEXT(1)=ISYMBL(1:4)
C
#ifdef HAVE_LAHEY_CALCOMP
        CALL GRINFO(ILAHEY,RLAHEY,CLAHEY)
#endif
        DO4610I=1,NP
          PX1P=PX(I)
          PY1P=PY(I)
#ifdef HAVE_LAHEY_CALCOMP
          CALL CALCPT(PX1P,PY1P,AX,AY,ISUBN0)
          ICOLMN=INT(REAL(ILAHEY(8))*(AX*RLAHEY(1)/11.0)+0.5)
#endif
          IF(IJUSTH.EQ.'RIGH')THEN
            NSHIFT=NCTEXT
          ELSEIF(IJUSTH.EQ.'CENT')THEN
            NSHIFT=NCTEXT/2
          ELSE
            NSHIFT=0
          ENDIF
          ICOLMN=ICOLMN-NSHIFT
          IF(ICOLMN.LT.1)ICOLMN=1
#ifdef HAVE_LAHEY_CALCOMP
          IF(ICOLMN.GT.ILAHEY(8))ICOLMN=ILAHEY(8)
          ILINE=INT(REAL(ILAHEY(9))*(RLAHEY(1)*(8.5-AY)/8.5)+0.5)
#endif
          IF(IJUSTV.EQ.'TOP')THEN
            NSHIFT=1
          ELSEIF(IJUSTV.EQ.'CENT')THEN
            NSHIFT=1
          ELSE
            NSHIFT=0
          ENDIF
          ILINE=ILINE-NSHIFT
          IF(ILINE.LT.1)ILINE=1
#ifdef HAVE_LAHEY_CALCOMP
          IF(ILINE.GT.ILAHEY(9))ILINE=ILAHEY(9)
          CALL GTEXT(ILINE,ICOLMN,ISYMBL)
#endif
C
 4610   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
C
CCCCC   NOTE: QWIN DRIVER CURRENTLY SET TO USE 0 TO 100 COORDINATES.
CCCCC         THIS DOESN'T WORK SO WELL IF SETTING MULTIPLE PIXELS,
CCCCC         DOING IMAGE STUFF, ETC.  NEED TO UPDATE ALGORITHM BELOW
CCCCC         TO CONVERT PERCENTAGES TO ACTUAL PIXELS.  CURRENTLY, LIMIT
CCCCC         TO DRAWING A SINGLE PIXEL.
C
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO4770I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO4775IROW=IX,IX+NCOL-1
            DO4778ICOLZ=IY,IY+NCOL-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ-IYINC
#ifdef HAVE_QWIN
              IRESLT=SETPIXEL(INT2(IXTEMP),INT2(IYTEMP))
#endif
 4778       CONTINUE
 4775     CONTINUE
 4770   CONTINUE
C
      ELSE
        NCTEXT=1
        ICTEXT(1)=ISYMBL(1:4)
C
        IWIDTH=0
#ifdef HAVE_QWIN
        IWIDTH=GETGTEXTEXTENT(ISYMBL(1:1))
#endif
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=IWIDTH/2
        ELSE
          IXINC=IWIDTH
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=INT(PHEIG2/2)
        ELSE
          IYINC=INT(PHEIG2)
        ENDIF
C
        DO4710I=1,NP
          PX1P=PX(I)
          PY1P=PY(I)
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
#ifdef HAVE_QWIN
          CALL MOVETO(INT2(IX-IXINC),INT2(IY-IYINC),WXY)
          CALL OUTGTEXT(ISYMBL)
#endif
 4710   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(IOPGOF.EQ.'OFF')GOTO9000
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO4870I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO4875IROW=IX,IX+NCOL-1
            DO4878ICOLZ=IY,IY-NCOL+1,-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ+IYINC
#ifdef HAVE_OPEN_GL
              CALL GLPOIN(IXTEMP,IYTEMP,PHEIGH)
#endif
 4878       CONTINUE
 4875     CONTINUE
 4870   CONTINUE
      ELSE
        CALL DPCOAN(ISYMBL(1:1),IJUNK)
        STRING(1)=IJUNK
        STRING(2)=0
C
        ILAST=80
        DO4810I=80,1,-1
          ILAST=I
          IF(IX11FN(I:I).NE.' ')GOTO4819
 4810   CONTINUE
 4819   CONTINUE
        DO4820I=1,ILAST
          CALL DPCOAN(IX11FN(I:I),IJUNK)
          IADE(I)=IJUNK
 4820   CONTINUE
        IADE(ILAST+1)=0
C
        IGLERR=0
#ifdef HAVE_OPEN_GL
        CALL GLTATT(IADE,IGLERR)
#endif
        IF(IGLERR.EQ.1) THEN
          WRITE(ICOUT,4821)
 4821     FORMAT(1X,'WARNING: X11 FONT NAME FOR OPEN-GL NOT FOUND.  ',
     1           'USE CURRENT FONT.')
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IGLERR.EQ.2)THEN
          WRITE(ICOUT,4822)
 4822     FORMAT(1X,'WARNING: X11 FONT NAME FOR OPEN-GL NOT FOUND.  ',
     1           'USE DEFAULT FONT.')
          CALL DPWRST('XXX','BUG ')
        END IF
C
        IGLERR=0
C
        DO4850I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
#ifdef HAVE_OPEN_GL
          CALL GLTEXH(STRING,IX,IY,IFONTH,IFONTV,IGLERR)
#endif
          IF(IGLERR.GT.0)THEN
            WRITE(ICOUT,4852)
 4852       FORMAT(1X,'ERROR: OPEN-GL PLOT SYMBOL RETURNED AN ERROR.')
            CALL DPWRST('XXX','BUG ')
          ENDIF
 4850   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO4938I=1,NP
#ifdef HAVE_INTERACTER
          CALL IGrPoint(PX(I),PY(I))
#endif
 4938   CONTINUE
      ELSE
        GOTO9000
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO4988I=1,NP
#ifdef HAVE_WININTERACTER
          CALL IGrPoint(PX(I),PY(I))
#endif
 4988   CONTINUE
      ELSE
        GOTO9000
      ENDIF
C
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               **  USE CALCOMP LIBRARY                             **
C               **      SYMBOL - WRITES TEXT                        **
C               **      CALCPT - DATAPLOT ROUTINE TO CONVERT FROM   **
C               **               PERCENT UNITS TO INCHES            **
C               **      CALCTR - DATAPLOT ROUTINE TO CONVERT        **
C               **               CHARACTER VARIABLE TO HOLLERITH    **
C               **               FORMAT (NOT NECCESARY ON ALL       **
C               **               SYSTEMS, BUT IS ON OTHERS.         **
C               ******************************************************
C
 5100 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,5162)
 5162   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE ZETA DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
        NCTEXT=1
        ICTEXT(1)=ISYMBL(1:4)
        DO5110I=1,NP
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
#ifdef HAVE_ZETA
          CALL CALCPT(PX1P,PY1P,AX,AY,ISUBN0)
#endif
          ANGLE=0.
          AXTEMP=0.
#ifdef HAVE_ZETA
          CALL CALCPT(AXTEMP,PHEIG2,AYTMP2,HEIGHT,ISUBN0)
          CALL CALCTR(ICTEXT(1),IHOLL,NCTEXT)
#endif
 5110   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               **  WRITTEN BY BILL ANDERSON                        **
C               ******************************************************
C
 6600 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO6670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          IX2=IX+NCOL-1
          IY2=IY+NCOL-1
#ifdef HAVE_SUN
        CALL cfrectangle(IX,IY,IX2,IY2)
#endif
 6670   CONTINUE
      ELSE
        ICSTR(1:1)=ISYMBL(1:1)
        ITEMP=0
        CALL DPCONA(ITEMP,ICSTR(2:2))
        DO6610I=1,NP
          PX1P = PX(I)-PXINC
          PY1P = PY(I)-PYINC
          CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
#ifdef HAVE_SUN
          CALL cftext(IX1P,IY1P,ICSTR(1:2))
#endif
 6610   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO DRAW A HORIZONTAL POLYMARKER--               **
C               **  USE THE P [ X, Y ] (= POSITION) INSTRUCTION     **
C               **  WITH INTEGER COORDINATES,                       **
C               **  AND THE   T ' STRING '  (= TEXT) INSTRUCTION    **
C               **  WITH THE DESIRED TEXT STRING,                   **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 100 AND 118                    **
C               ******************************************************
C
C     MARCH, 1991.  PACK REGIS OUTPUT.  ALSO, REGIS DRAWS CHARACTER BELOW
C                   RATHER THAN ABOVE THE CURSUR POSITION (AS DATAPLOT
C                   ASSUMES), SO ADJUST Y COORDINATE BY ONE CHARACTER
C                   POSITION.
C
CCCCC SEPTEMBER 1995.  ADD "PIXEL" CAPABILITY.  DO A MOVE, THEN A V[]
CCCCC                  INSTRUCTION.
 8100 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO8170I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO8175IROW=IX,IX+NCOL-1
            DO8178ICOLZ=IY,IY-NCOL+1,-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ+IYINC
              ICSTR(1:2)='P['
              NCSTR=2
              NCHTOT=5
              CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
              ICSTR(8:8)=','
              NCSTR=8
              CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
              ICSTR(14:14)=']'
              ICSTR(15:17)='V[]'
              NCSTR=17
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8178       CONTINUE
 8175     CONTINUE
 8170   CONTINUE
      ELSE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        NCTEP1=NCTEXT+1
        ICTEXT(NCTEP1)=''''
        NCSTR=0
        NCHTOT=5
        MAXREG=130
        ISIZE=16+NCTEP1
        DO8110I=1,NP
          IF(NCSTR.GT.MAXREG-ISIZE)THEN
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            NCSTR=0
          END IF
C
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
          PY1P=PY1P+PHEIG2
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+1
          ICSTR(NCSTR:NCSTR2)='P['
          NCSTR=NCSTR2
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=','
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=']'
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='T'
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=''''
          DO8112J=1,NCTEP1
            K=J+NCSTR
            ICSTR(K:K)=ICTEXT(J)
 8112     CONTINUE
          NCSTR=K
C
 8110   CONTINUE
        IF(NCSTR.GT.0)CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **    XCOOR YCOOR MOVETO  (USE UNADJUSTED COORD.)   **
C               **  (ISYMBL) SHOW                                   **
C               **  RIGHTSHOW AND CENTSHOW ARE DATAPLOT DEFINED     **
C               **  PROCEDURES FOR PRINTING RIGHT AND CENTER        **
C               **  JUSTIFIED STRINGS RESPECTIVELY                  **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **             COOKBOOOK,  ADOBE SYSTEMS            **
C               **  PAGE--37                                        **
C               ** CHECK FOR "(", ")", AND BACKSLASH.  IF FOUND,    **
C               ** PRECEDE WITH A BACKSLASH                         **
C               ******************************************************
CCCCC OCTOBER 1991.  MAKE POSTSCRIPT FONTS TABLE DRIVEN.
CCCCC SEPTEMBER 1995.  ADD PIXEL CAPABILITY.
C
 8600 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        ICSTR(1:14)='1 setlinewidth'
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        DO8670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          IX=IX-IXINC
          IY=IY-IYINC
          IX2=IX+NCOL-1
          IY2=IY+NCOL-1
          DO8680ICOLZ=IY,IY2
            ICSTR(1:8)='newpath '
            NCSTR=8
            NCHTOT=5
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:14)=' '
            NCSTR=14
            CALL GRTRIN(ICOLZ,NCHTOT,ICSTR,NCSTR)
            ICSTR(20:27)=' moveto '
            NCSTR=27
            CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
            ICSTR(33:33)=' '
            NCSTR=33
            CALL GRTRIN(ICOLZ,NCHTOT,ICSTR,NCSTR)
            ICSTR(39:52)=' lineto stroke'
            NCSTR=52
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8680     CONTINUE
 8670   CONTINUE
      ELSE
        PHEIPP=ANUMVP*PHEIG2/100.
        IPSTPS=INT(PHEIPP+0.5)
        IF(IPSTFN.EQ.IPSTFC.AND.IPSTPC.EQ.IPSTPS)GOTO8605
C       FOLLOWING CODE MODIFIED OCTOBER 1991.
        IJUNK=7
        DO8695I=1,IPSTMF
          IF(IPSTFN.NE.IPSTT1(I))GOTO8695
          IJUNK=I
          GOTO8697
 8695   CONTINUE
 8697   CONTINUE
        ICSTR(1:1)='/'
        ICSTR(2:41)=IPSTT2(IJUNK)(1:40)
        ICSTR(42:51)=' findfont '
        NCHTOT=5
        NCSTR=51
        CALL GRTRIN(IPSTPS,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+17
        ICSTR(NCSTR:NCSTR2)=' scalefont setfont'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       END OF CHANGE
C
        IPSTFC=IPSTFN
        IPSTPC=IPSTPS
C
 8605   CONTINUE
CCCCC   THE FOLLOWING 2 LINES WERE FIXED (SOFT-CODE BACKSLASH) APRIL 1989
        IF(ISYMBL.NE.'('.AND.ISYMBL.NE.')'.AND.ISYMBL.NE.IBASLC)THEN
          NCTEXT=1
          ICTEXT(NCTEXT)=ISYMBL(1:4)
        ELSE
          ICTEXT(1)=IBASLC
          NCTEXT=2
          ICTEXT(NCTEXT)=ISYMBL(1:4)
        ENDIF
C
        DO8610I=1,NP
C
CCCCC     6 LINES IN THE FOLLOWING SECTION WERE FIXED   MAY 1991 (ALAN)
          PX1P=PX(I)
          PY1P=PY(I)-PYINC
          ICSTR(1:4)='/IX '
          NCSTR=4
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          ICSTR(10:18)=' def /IY '
          NCSTR=18
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          ICSTR(24:29)=' def ('
          NCSTR=29
          DO8620J=1,NCTEXT
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8620     CONTINUE
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+1
          ICSTR(NCSTR:NCSTR2)=') '
          NCSTR=NCSTR2+1
          NCSTR2=NCSTR+8
          IF(IJUST(1:1).EQ.'L')ICSTR(NCSTR:NCSTR2)='leftshow '
          IF(IJUST(1:1).EQ.'C')ICSTR(NCSTR:NCSTR2)='centshow '
          IF(IJUST(1:1).EQ.'R')ICSTR(NCSTR:NCSTR2)='rightshow'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8610   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC LANDSCAPE AND PORTRAIT CASE      **
C               **  <ICARAT>IVvvvvv   - VERTICAL POSITION           **
C               **  <ICARAT>IHhhhhh   - HORIZONTAL POSITION         **
C               **  REFERENCE: QUIC PROGRAMMERS MANUAL -            **
C               **                                                  **
C               ******************************************************
C
 9100 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,9162)
 9162   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE QMS DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
C
        CALL DPCONA(94,ICARAT)
        IFONTT=IQUIFN
        IF(IORNSW.EQ.'PORT'.AND.(
     1     IFONTT.EQ.521.OR.
     1     IFONTT.EQ.522.OR.
     1     IFONTT.EQ.523.OR.
     1     IFONTT.EQ.524))IFONTT=10
        IF(IORNSW.NE.'PORT'.AND.(
     1     IFONTT.EQ.124.OR.
     1     IFONTT.EQ.144.OR.
     1     IFONTT.EQ.16.OR.
     1     IFONTT.EQ.328.OR.
     1     IFONTT.EQ.998.OR.
     1     IFONTT.EQ.404.OR.
     1     IFONTT.EQ.444.OR.
     1     IFONTT.EQ.532))IFONTT=10
        IF(IFONTT.EQ.IQUIFC)GOTO9105
        ICSTR(1:1)=ICARAT
        ICSTR(2:3)='IS'
        IQUIFC=IFONTT
        KFONT=IFONTT
        NCHTOT=-5
        NCSTR=3
        CALL GRTRIN(KFONT,NCHTOT,ICSTR,NCSTR)
        NCSTR=8
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 9105   CONTINUE
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
        NCSTR=0
        ANUMPP=ANUMHP
        IF(IJUST(1:1).EQ.'L')GOTO9109
        PXINC=PWIDT2
        IF(IFONTT.EQ.10)GOTO9108
        IF(IFONTT.EQ.404)GOTO9108
        IF(IFONTT.EQ.444)GOTO9108
        IF(IFONTT.EQ.521)GOTO9108
        IF(IFONTT.EQ.522)GOTO9108
        IF(IFONTT.EQ.523)GOTO9108
        IF(IFONTT.EQ.524)GOTO9108
        IF(IFONTT.EQ.532)GOTO9108
        IF(IFONTT.EQ.904)GOTO9108
        IF(IFONTT.EQ.924)GOTO9108
        IF(IFONTT.EQ.536)GOTO9108
        IF(IFONTT.EQ.517)GOTO9108
        IF(IFONTT.EQ.104)CALL QUICH1(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.124)CALL QUICH2(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.144)CALL QUICH3(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.16) CALL QUICH4(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.204)CALL QUICH5(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.328)CALL QUICH6(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.998)CALL QUICH7(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        IF(IFONTT.EQ.664)CALL QUICH8(ICTEXT,NCTEXT,PXLEC,PXLECG,ANUMPP)
        PXINC=PXLECG
C
 9108   CONTINUE
        IF(IJUST(1:1).EQ.'C')PXINC=PXINC/2.
 9109   CONTINUE
C
        NCHTOT=-5
        DO9110I=1,NP
          PX1P=PX(I)-PXINC
          PY1P=PY(I)-PYINC
          PY1P=100.-PY1P
          CALL QUICPT(PX1P,PY1P,IX,IY,ISUBN0)
          ICSTR(6:6)=ICARAT
          ICSTR(7:8)='IH'
          NCSTR=8
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          ICSTR(14:14)=ICARAT
          ICSTR(15:16)='IV'
          NCSTR=16
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          ICSTR(22:22)=ICTEXT(NCTEXT)
          NCSTR=22
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 9110   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
CCCCC SEPTEMBER 1995.  ADD "PIXEL" SYMBOL.  THIS IS A SPECIAL CASE
CCCCC TO TURN ON A SINGLE PIXEL.  IN THIS CASE, THE PHEIGH VARIABLE
CCCCC IS INTERPRETED AS AN INTEGER SCALE FACTOR, I.E. CHARACTER SIZE
CCCCC 6 WILL DRAW A PIXEL BOX 6 WIDE AND 6 HIGH.  THIS CAPABILITY BEING
CCCCC ADDED FOR FUTURE PLANNED IMPLEMENTATIONS, FOR EXAMPLE TO DO
CCCCC SOME IMAGE PROCESSING.
C
C     2023/10: SUPPORT FOR SCALABLE FONTS
 9600 CONTINUE
C
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
C
C     CHECK IF SCALABLE FONTS REQUESTED
C
      IF(IX11FT.EQ.'FIXE')THEN
        IFTYPE=0
      ELSE
        IFTYPE=1
        IF(IX11SF(1:4).EQ.'NULL')IFTYPE=0
      ENDIF
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO9670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO9675IROW=IX,IX+NCOL-1
            DO9678ICOLZ=IY,IY-NCOL+1,-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ+IYINC
              CALL XPOINT(IXTEMP,IYTEMP)
 9678       CONTINUE
 9675     CONTINUE
 9670   CONTINUE
      ELSE
        CALL DPCOAN(ISYMBL(1:1),IJUNK)
        STRING(1)=IJUNK
        STRING(2)=0
C
        IF(IFTYPE.EQ.0)THEN
          ILAST=80
          DO9610I=80,1,-1
            ILAST=I
            IF(IX11FN(I:I).NE.' ')GOTO9619
 9610     CONTINUE
 9619     CONTINUE
          DO9620I=1,ILAST
            CALL DPCOAN(IX11FN(I:I),IJUNK)
            IADE(I)=IJUNK
 9620     CONTINUE
          IADE(ILAST+1)=0
          CALL XTATTR(IADE,IXERR)
          IF(IXERR.EQ.1) THEN
            WRITE(ICOUT,9621)
 9621       FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND.  USE ',
     1             'CURRENT FONT.')
            CALL DPWRST('XXX','BUG ')
          ELSEIF(IXERR.EQ.2)THEN
            WRITE(ICOUT,9622)
 9622       FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND.  USE ',
     1            'DEFAULT FONT.')
            CALL DPWRST('XXX','BUG ')
          ENDIF
        ELSE
          ILAST=80
          DO9630I=80,1,-1
            ILAST=I
            IF(IX11SF(I:I).NE.' ')GOTO9639
 9630     CONTINUE
 9639     CONTINUE
C
C         ADD SIZE TO FONT STRING
C
          JSIZET=JSIZE
          IF(JSIZET.LE.6)JSIZET=6
          IF(JSIZET.GE.24)JSIZET=24
          ICSTR(1:ILAST)=IX11SF(1:ILAST)
          ICSTR(ILAST+1:ILAST+6)=':size='
          ILAST=ILAST+6
          IF(JSIZET.LE.9)THEN
            NCHTOT=1
          ELSEIF(JSIZET.LE.99)THEN
            NCHTOT=2
          ELSE
            NCHTOT=3
          ENDIF
          CALL GRTRIN(JSIZET,NCHTOT,ICSTR,ILAST)
C
          DO9640I=1,ILAST
            CALL DPCOAN(IX11SF(I:I),IJUNK)
            IADE(I)=IJUNK
 9640     CONTINUE
          IADE(ILAST+1)=0
        ENDIF
C
        IXERR=0
C
        IF(IFTYPE.EQ.0)THEN
          DO9650I=1,NP
            PX1=PX(I)
            PY1=PY(I)
            CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
            CALL XTEXTH(STRING,IX,IY,IFONTH,IFONTV,IXERR)
 9650     CONTINUE
        ELSE
          DO9660I=1,NP
            PX1=PX(I)
            PY1=PY(I)
            CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
            CALL XTEXTH2(IADE,STRING,IX,IY,IFONTH,IFONTV,IXERR)
            IF(IXERR.EQ.1)THEN
              WRITE(ICOUT,999)
              CALL DPWRST('XXX','BUG ')
              WRITE(ICOUT,9661)
 9661         FORMAT('IN GRWRTH: UNABLE TO LOAD SCALABLE X11 FONT')
              CALL DPWRST('XXX','BUG ')
              WRITE(ICOUT,9663)ICSTR(1:ILAST)
 9663         FORMAT('FONT NAME: ',A130)
              CALL DPWRST('XXX','BUG ')
            ELSEIF(IXERR.EQ.2)THEN
              WRITE(ICOUT,999)
              CALL DPWRST('XXX','BUG ')
              WRITE(ICOUT,9671)
 9671         FORMAT('IN GRWRTH: UNABLE TO ALLOCTE Xft COLOR')
              CALL DPWRST('XXX','BUG ')
            ENDIF
 9660     CONTINUE
        ENDIF
      ENDIF
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 124, 113.    **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 324-325, 256.              **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 59-60, 54-55**
C               *************************************************
C
10000 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        WRITE(ICOUT,10162)
10162   FORMAT('****** THE PIXEL CAPABILITY IS NOT YET SUPPORTED FOR ',
     1         'THE VGA DEVICE.')
        CALL DPWRST('XXX','BUG ')
      ELSE
C
CCCCC   THE FOLLOWING SECTION WAS REWRITTEN    SEPTEMBER 1995
        IF(ITCST.EQ.'CLOS')GOTO10099
C
        NCTEXT=1
        ICTEXT(NCTEXT)=ISYMBL(1:4)
C
        IC4='CECE'
CTURB   CALL TCSEJU(IC4)
        DO10100I=1,NP
           PX1P=PX(I)
           PY1P=PY(I)
           CALL GRTRSA(PX1P,PY1P,AX1,AY1,ISUBN0)
           PX1P=AX1
           PY1P=AY1
CTURB      CALL TCMOTO(PX1P,PY1P)
CTURB      CALL TCWRTE(ICTEXT,NCTEXT)
10100   CONTINUE
10099   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO12670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO12675IROW=IX,IX+NCOL-1
            DO12678ICOLZ=IY,IY-NCOL+1,-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ+IYINC
#ifdef HAVE_GD
              CALL GDPOIN(IXTEMP,IYTEMP,JCOL)
#endif
12678       CONTINUE
12675     CONTINUE
12670   CONTINUE
      ELSE
        IFONTZ=0
        IF(IGDFN(1:5).EQ.'SMALL')IFONTZ=1
        IF(IGDFN(1:5).EQ.'LARGE')IFONTZ=2
        IF(IGDFN(1:10).EQ.'MEDIUMBOLD')IFONTZ=3
        IF(IGDFN(1:5).EQ.'GIANT')IFONTZ=4
        IF(IGDFN(1:4).EQ.'TINY')IFONTZ=5
C
        ILAST=80
        DO12110I=80,1,-1
          ILAST=I
          IF(IGDFN(I:I).NE.' ')GOTO12119
12110   CONTINUE
12119   CONTINUE
        DO12120I=1,ILAST
          CALL DPCOAN(IGDFN(I:I),IJUNK)
          IADE(I)=IJUNK
12120   CONTINUE
        IADE(ILAST+1)=0
C
        ILAST=16
        DO12130I=16,1,-1
          ILAST=I
          IF(ISYMBL(I:I).NE.' ')GOTO12139
12130   CONTINUE
12139   CONTINUE
        DO12140I=1,ILAST
          CALL DPCOAN(ISYMBL(I:I),IJUNK)
          STRING(I)=IJUNK
12140   CONTINUE
        STRING(ILAST+1)=0
C
        JHEIG2=INT(PHEIG2+0.5)
        DO12650I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
#ifdef HAVE_GD
          CALL GDTXTH(IADE,STRING,IFONTZ,IX,IY,IFONTH,IFONTV,
     1                JCOL,JHEIG2,IERR)
#endif
12650   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
        DO13570I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO13575IROW=IX,IX+NCOL-1
            DO13578ICOLZ=IY,IY-NCOL+1,-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ+IYINC
COLD          CALL aqpoin(IXTEMP,IYTEMP,JCOL)
13578       CONTINUE
13575     CONTINUE
13570   CONTINUE
C
      ELSE
        CALL DPCOAN(ISYMBL(1:1),IJUNK)
        STRING(1)=IJUNK
        STRING(2)=0
C
        ILAST=80
        DO13510I=80,1,-1
          ILAST=I
          IF(IAQUFN(I:I).NE.' ')GOTO13519
13510   CONTINUE
13519   CONTINUE
        DO13520I=1,ILAST
          CALL DPCOAN(IAQUFN(I:I),IJUNK)
          IADE(I)=IJUNK
13520   CONTINUE
        IADE(ILAST+1)=0
C
        DO13550I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
#ifdef HAVE_AQUA
          CALL aqtxth(STRING,IX,IY,IFONTH,IFONTV,IADE,IXERR)
#endif
13550   CONTINUE
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
C
C       FOR LATEX DRIVER, "PIXEL" MODE NOT CURRENTLY SUPPORTED
C
        GOTO9000
      ELSE
        IF(IJUST.EQ.'LEFT')THEN
          ICJUNK='bl'
        ELSEIF(IJUST.EQ.'CENT')THEN
          ICJUNK='bc'
        ELSEIF(IJUST.EQ.'RIGH')THEN
          ICJUNK='br'
        ELSEIF(IJUST.EQ.'LJUS')THEN
          ICJUNK='bl'
        ELSEIF(IJUST.EQ.'CJUS')THEN
          ICJUNK='bc'
        ELSEIF(IJUST.EQ.'RJUS')THEN
          ICJUNK='br'
        ELSEIF(IJUST.EQ.'LEBO')THEN
          ICJUNK='bl'
        ELSEIF(IJUST.EQ.'CEBO')THEN
          ICJUNK='bc'
        ELSEIF(IJUST.EQ.'RIBO')THEN
          ICJUNK='br'
        ELSEIF(IJUST.EQ.'LECE')THEN
          ICJUNK='cl'
        ELSEIF(IJUST.EQ.'CECE')THEN
          ICJUNK='cc'
        ELSEIF(IJUST.EQ.'RICE')THEN
          ICJUNK='cr'
        ELSEIF(IJUST.EQ.'LETO')THEN
          ICJUNK='tl'
        ELSEIF(IJUST.EQ.'CETO')THEN
          ICJUNK='tc'
        ELSEIF(IJUST.EQ.'RITO')THEN
          ICJUNK='tr'
        ELSE
          ICJUNK='cc'
        ENDIF
C
        DO15650I=1,NP
C
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:5)='put('
          NCSTR=5
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=','
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+15)='){ makebox(0,0)['
          ICSTR(NCSTR+2:NCSTR+2)=IBASLC
          NCSTR=NCSTR+15
          ICSTR(NCSTR+1:NCSTR+2)=ICJUNK(1:2)
          NCSTR=NCSTR+2
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=']'
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='{'
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ISYMBL(1:1)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)='}}'
          NCSTR=NCSTR+1
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
15650   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
C     JULY 2015.  FOR THE CHROME BROWSER, NEED TO HAVE
C
C                   X="95" Y="233"
C
C                 RATHER THAN
C
C                   X="   95" Y="   233"
C
16000 CONTINUE
C
      CALL DPCONA(34,IQUOTE)
C
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
CCCCC   "PIXEL" OPTION: USE FILLED RECTANGLE TO DRAW
        IFONTH=0
        IF(IJUSTH.EQ.'C')IFONTH=1
        IF(IJUSTH.EQ.'R')IFONTH=2
        IFONTV=0
        IF(IJUSTV.EQ.'B')IFONTV=1
        IF(IJUSTV.EQ.'T')IFONTV=2
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
C
        DO16070I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          IX=IX-IXINC
          IY=IY-IYINC
          IX2=IX+NCOL-1
          IY2=IY+NCOL-1

          ICSTR(1:11)='   <rect x='
          ICSTR(12:12)=IQUOTE
          NCSTR=12
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+2)=' y='
          NCSTR=NCSTR+3
          ICSTR(NCSTR:NCSTR)=IQUOTE
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:15)='         width='
          ICSTR(16:16)=IQUOTE
          NCSTR=16
          CALL GRTRIN(NCOL,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+7)=' height='
          NCSTR=NCSTR+8
          ICSTR(NCSTR:NCSTR)=IQUOTE
          CALL GRTRIN(NCOL,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:17)='           style='
          ICSTR(18:18)=IQUOTE
          ICSTR(19:31)='stroke:none; '
          NCSTR=-31
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:19)='             fill:#'
          NCSTR=19
          NCHTOT=2
          JTEMP=JCOL
          IF(JTEMP.LE.0)THEN
C
C           DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C           THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C           SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
            AVAL=(255./100.)*REAL(ABS(JTEMP))
            IF(AVAL.LE.0.0)AVAL=0.0
            IF(AVAL.GE.255.0)AVAL=255.0
            IF(IRGBFL.EQ.0)THEN
              JRED=INT(AVAL+0.5)
              JBLUE=JRED
              JGREEN=JRED
            ELSE
              JRED=ICOLR
              JGREEN=ICOLG
              JBLUE=ICOLB
            ENDIF
          ELSE
            IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
            IF(IRGBFL.EQ.0)THEN
              JRED=IRED(JTEMP)
              JGREEN=IGREEN(JTEMP)
              JBLUE=IBLUE(JTEMP)
            ELSE
              JRED=ICOLR
              JGREEN=ICOLG
              JBLUE=ICOLB
            ENDIF
          ENDIF
          CALL DPCONX(JRED,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JGREEN,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JBLUE,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+2
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:7)='     />'
          NCSTR=-7
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
16070   CONTINUE
      ELSE
        NSYMB=1
        DO16001J=16,1,-1
          IF(ISYMBL(J:J).NE.' ')THEN
            NSYMB=J
            GOTO16002
          ENDIF
16001   CONTINUE
16002   CONTINUE
C
        RATIV1=ANUMVP/100.0
        PHEIPP=RATIV1*PHEIG2
        JHEIG2=INT(PHEIPP+0.5)
C
        ISVGLN=ISVGLN+1
        ICSTR(1:9)='   <g id='
        ICSTR(10:10)=IQUOTE
        NCSTR=10
        IF(ISVGLN.LE.9)THEN
          NCHTOT=1
        ELSEIF(ISVGLN.LE.99)THEN
          NCHTOT=2
        ELSEIF(ISVGLN.LE.999)THEN
          NCHTOT=3
        ELSEIF(ISVGLN.LE.9999)THEN
          NCHTOT=4
        ELSEIF(ISVGLN.LE.99999)THEN
          NCHTOT=5
        ELSE
          NCHTOT=6
        ENDIF
        CALL GRTRIN(ISVGLN,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        IF(ISVGSS(1:3).EQ.'EXT')THEN
          NCSTR=12
          ICSTR(1:NCSTR)='      class='
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
C
          IF(IJUSTH.EQ.'CENT')THEN
            ICSTR(NCSTR:NCSTR+16)='center-horizontal'
            NCSTR=NCSTR+17
          ELSEIF(IJUSTH.EQ.'LEFT')THEN
            ICSTR(NCSTR:NCSTR+14)='left-horizontal'
            NCSTR=NCSTR+15
          ELSEIF(IJUSTH.EQ.'RIGH')THEN
            ICSTR(NCSTR:NCSTR+15)='right-horizontal'
            NCSTR=NCSTR+16
          ENDIF
C
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          CALL GRTRCO('FORE',ISVGFC,JCOL2)
          IFLAG=1
          ICSTR(1:12)='      style='
          ICSTR(13:13)=IQUOTE
          ICSTR(14:31)='stroke:none;fill:#'
          NCSTR=31
          NCHTOT=2
          JTEMP=JCOL
          IF(JTEMP.LE.0)THEN
C
C           DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C           THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C           SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
            AVAL=(255./100.)*REAL(ABS(JTEMP))
            IF(AVAL.LE.0.0)AVAL=0.0
            IF(AVAL.GE.255.0)AVAL=255.0
            IF(IRGBFL.EQ.0)THEN
              JRED=INT(AVAL+0.5)
              JBLUE=JRED
              JGREEN=JRED
            ELSE
              JRED=ICOLR
              JGREEN=ICOLG
              JBLUE=ICOLB
            ENDIF
          ELSE
            IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
            IF(IRGBFL.EQ.0)THEN
              JRED=IRED(JTEMP)
              JGREEN=IGREEN(JTEMP)
              JBLUE=IBLUE(JTEMP)
            ELSE
              JRED=ICOLR
              JGREEN=ICOLG
              JBLUE=ICOLB
            ENDIF
          ENDIF
          CALL DPCONX(JRED,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JGREEN,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JBLUE,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+2
          ICSTR(NCSTR:NCSTR)=';'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          NCSTR=22
          ICSTR(1:NCSTR)='            font-size:'
          NCHTOT=3
          CALL GRTRIN(JHEIG2,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+2)='pt;'
          NCSTR=NCSTR+2
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          IF(IFLAG.EQ.1)THEN
            NCSTR=13
            ICSTR(1:NCSTR)='             '
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=IQUOTE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)='>'
            NCSTR=-NCSTR
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ENDIF
C
        ELSE
          NCSTR=14
          ICSTR(1:NCSTR)='        style='
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          NCSTR=21
          ICSTR(1:NCSTR)='         font-family:'
          DO16007II=32,1,-1
            NCTEMP=II
            IF(ISVGFN(II:II).NE.' ')GOTO16008
16007     CONTINUE
16008     CONTINUE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+NCTEMP-1)=ISVGFN(1:NCTEMP)
          NCSTR=NCSTR+NCTEMP
          ICSTR(NCSTR:NCSTR)=';'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          IF(ISVGFW.EQ.'NORM')THEN
            NCSTR=28
            ICSTR(1:NCSTR)='         font-weight:normal;'
            NCSTR=-NCSTR
          ELSE
            NCSTR=26
            ICSTR(1:NCSTR)='         font-weight:bold;'
            NCSTR=-NCSTR
          ENDIF
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          IF(ISVGST.EQ.'ITAL')THEN
            NCSTR=27
            ICSTR(1:NCSTR)='         font-style:italic;'
            NCSTR=-NCSTR
          ELSE
            NCSTR=27
            ICSTR(1:NCSTR)='         font-style:normal;'
            NCSTR=-NCSTR
          ENDIF
          NCSTR=19
          ICSTR(1:NCSTR)='         font-size:'
          NCHTOT=3
          CALL GRTRIN(JHEIG2,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+2)='pt;'
          NCSTR=NCSTR+2
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          NCSTR=28
          ICSTR(1:NCSTR)='         stroke:none; fill:#'
          NCHTOT=2
          JTEMP=JCOL
          IF(JTEMP.LE.0)THEN
C
C           DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C           THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C           SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
            AVAL=(255./100.)*REAL(ABS(JTEMP))
            IF(AVAL.LE.0.0)AVAL=0.0
            IF(AVAL.GE.255.0)AVAL=255.0
            IF(IRGBFL.EQ.0)THEN
              JRED=INT(AVAL+0.5)
              JBLUE=JRED
              JGREEN=JRED
            ELSE
              JRED=ICOLR
              JGREEN=ICOLG
              JBLUE=ICOLB
            ENDIF
          ELSE
            IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
            IF(IRGBFL.EQ.0)THEN
              JRED=IRED(JTEMP)
              JGREEN=IGREEN(JTEMP)
              JBLUE=IBLUE(JTEMP)
            ELSE
              JRED=ICOLR
              JGREEN=ICOLG
              JBLUE=ICOLB
            ENDIF
          ENDIF
          CALL DPCONX(JRED,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JGREEN,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JBLUE,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+2
          ICSTR(NCSTR:NCSTR)=';'
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='>'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ENDIF
C
        DO16010I=1,NP
C
          PX1P=PX(I)
          PY1P=PY(I)
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
C
          IF(IJUSTV.EQ.'TOP')THEN
            IY=IY+JHEIG2
          ELSEIF(IJUSTV.EQ.'CENT')THEN
            IY=IY+(JHEIG2/2)
          ELSE
            CONTINUE
          ENDIF
C
          IF(IX.LE.9)THEN
            NCHTOT=1
          ELSEIF(IX.LE.99)THEN
            NCHTOT=2
          ELSEIF(IX.LE.999)THEN
            NCHTOT=3
          ELSEIF(IX.LE.9999)THEN
            NCHTOT=4
          ELSE
            NCHTOT=5
          ENDIF
C
          ICSTR(1:11)='   <text x='
          NCSTR=12
          ICSTR(NCSTR:NCSTR)=IQUOTE
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+2)=' y='
          NCSTR=NCSTR+3
          ICSTR(NCSTR:NCSTR)=IQUOTE
C
          IF(IY.LE.9)THEN
            NCHTOT=1
          ELSEIF(IY.LE.99)THEN
            NCHTOT=2
          ELSEIF(IY.LE.999)THEN
            NCHTOT=3
          ELSEIF(IY.LE.9999)THEN
            NCHTOT=4
          ELSE
            NCHTOT=5
          ENDIF
C
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          NCHTOT=5
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
C
          ICSTR(NCSTR+1:NCSTR+7)=' style='
          NCSTR=NCSTR+8
          ICSTR(NCSTR:NCSTR)=IQUOTE
          IF(IJUSTH.EQ.'CENT')THEN
            ICSTR(NCSTR+1:NCSTR+19)='text-anchor:middle;'
            NCSTR=NCSTR+19
          ELSEIF(IJUSTH.EQ.'RIGH')THEN
            ICSTR(NCSTR+1:NCSTR+16)='text-anchor:end;'
            NCSTR=NCSTR+16
          ELSE
            ICSTR(NCSTR+1:NCSTR+18)='text-anchor:start;'
            NCSTR=NCSTR+18
          ENDIF
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='>'
C
C         2012/3: CHECK FOR "<" OR ">".  NEED TO CONVERT THESE TO
C                 &lt; AND &gt; TO DISTINGUISH THEM FROM TAG IDENTIFIERS.
C         2015/11: CHECK FOR "&".  NEED TO CONVERT THESE TO &amp; .
C
          DO16012J=1,NSYMB
            IF(ISYMBL(J:J).EQ.'<')THEN
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR+3)='&lt;'
              NCSTR=NCSTR+3
            ELSEIF(ISYMBL(J:J).EQ.'>')THEN
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR+3)='&gt;'
              NCSTR=NCSTR+3
            ELSEIF(ICTEXT(J).EQ.'&')THEN
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR+4)='&amp;'
              NCSTR=NCSTR+4
            ELSE
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=ISYMBL(J:J)
            ENDIF
16012     CONTINUE
C
          ICSTR(NCSTR+1:NCSTR+7)='</text>'
          NCSTR=NCSTR+7
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
16010   CONTINUE
C
        ICSTR(1:7)='   </g>'
        NCSTR=-7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      IF(ISYMBL.EQ.'PIXE'.OR.ISYMBL.EQ.'pixe')THEN
        NCOL=INT(PHEIGH)
        IF(NCOL.LT.1)NCOL=1
        IF(IFONTH.EQ.0)THEN
          IXINC=0
        ELSEIF(IFONTH.EQ.1)THEN
          IXINC=NCOL/2
        ELSE
          IXINC=NCOL
        ENDIF
        IF(IFONTV.EQ.0)THEN
          IYINC=0
        ELSEIF(IFONTV.EQ.1)THEN
          IYINC=NCOL/2
        ELSE
          IYINC=NCOL
        ENDIF
C
        IVAL2=1
        IF(IGUNIT.EQ.IPL1NU)IVAL2=2
        IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
        DO17670I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          DO17675IROW=IX,IX+NCOL-1
            DO17678ICOLZ=IY,IY-NCOL+1,-1
              IXTEMP=IROW-IXINC
              IYTEMP=ICOLZ+IYINC
#ifdef HAVE_CAIRO
              CALL CAPOIN(IVAL2,IXTEMP,IYTEMP)
#endif
17678       CONTINUE
17675     CONTINUE
17670   CONTINUE
      ELSE
C
C     CHECK FOR X11 DEVICE, HARDWARE TEXT NOT SUPPORTED
C
        IVAL1=0
        IF(IMODEL.EQ.'X11')IVAL1=1
        IVAL2=1
        IF(IGUNIT.EQ.IPL1NU)IVAL2=2
        IF(IGUNIT.EQ.IPL2NU)IVAL2=3
CCCCC   IF(IVAL2.EQ.1 .AND. IVAL1.EQ.1)THEN
CCCCC     WRITE(ICOUT,999)
CCCCC     CALL DPWRST('XXX','BUG ')
CCCCC     WRITE(ICOUT,17006)
C17006     FORMAT('***** WARNING: HARDWARE TEXT NOT SUPPORTED ON ',
CCCCC1           'CAIRO X11 DEVICE.')
CCCCC     CALL DPWRST('XXX','BUG ')
CCCCC     GOTO9000
CCCCC   ENDIF
C
        ILAST=32
        DO17110I=32,1,-1
          ILAST=I
          IF(ICAIFN(I:I).NE.' ')GOTO17119
17110   CONTINUE
17119   CONTINUE
        DO17120I=1,ILAST
          CALL DPCOAN(ICAIFN(I:I),IJUNK)
          IADE(I)=IJUNK
17120 CONTINUE
        IADE(ILAST+1)=0
C
        ILAST=16
        DO17130I=16,1,-1
          ILAST=I
          IF(ISYMBL(I:I).NE.' ')GOTO17139
17130   CONTINUE
17139   CONTINUE
        DO17140I=1,ILAST
          CALL DPCOAN(ISYMBL(I:I),IJUNK)
          STRING(I)=IJUNK
17140   CONTINUE
        STRING(ILAST+1)=0
C
        AHEIG2=REAL(JHEIG2)
        IVAL2=1
        IF(IGUNIT.EQ.IPL1NU)IVAL2=2
        IF(IGUNIT.EQ.IPL2NU)IVAL2=3
        DO17650I=1,NP
          PX1=PX(I)
          PY1=PY(I)
          CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
          AX1=PX1
          AY1=PY1
C
#ifdef HAVE_CAIRO
          IVAL3=1
          IF(ICAISL.EQ.'ITAL')IVAL3=2
          IVAL4=2
          IF(ICAIFW.EQ.'BOLD')IVAL4=2
          CALL CATXTH(IVAL2,STRING,AX1,AY1,IFONTH,IFONTV,AHEIG2,
     1                IADE,IVAL3,IVAL4,IERR)
#endif
17650   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRPH')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRDRPH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9012)NP,IGUNIT,JPATT,JFONT,JCASE,JJUST
 9012   FORMAT('NP,IGUNIT,JPATT,JFONT,JCASE,JJUST = ',6I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IMANUF,IFIG,IPATT,IFONT,ICASE,IJUST
 9013   FORMAT('IMANUF,IFIG,IPATT,IFONT,ICASE,IJUST = ',5(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        DO9015I=1,NP
          WRITE(ICOUT,9016)PX(I),PY(I)
 9016     FORMAT('PX(I),PY(I) = ',2G15.7)
          CALL DPWRST('XXX','BUG ')
 9015   CONTINUE
        WRITE(ICOUT,9023)IDIR,ANGLE,JDIR
 9023   FORMAT('IDIR,ANGLE,JDIR = ',A4,2X,G15.7,I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9026)PTHICK,JTHICK,PTHIC2
 9026   FORMAT('PTHICK,JTHICK,PTHIC2 = ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9027)PHEIGH,PWIDTH,PVEGAP,PHOGAP
 9027   FORMAT('PHEIGH,PWIDTH,PVEGAP,PHOGAP = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9028)PHEIG2,PWIDT2,PVEGA2,PHOGA2
 9028   FORMAT('PHEIG2,PWIDT2,PVEGA2,PHOGA2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9030)PXINC,PYINC,PXDEL,PYDEL
 9030   FORMAT('PXINC,PYINC,PXDEL,PYDEL = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9031)ISYMBL,ISPAC,ICOL,JCOL,NCSTR
 9031   FORMAT('ISYMBL,ISPAC,ICOL,JCOL,NCSTR = ',3(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9033)IERRG4,IC4,IC,IC1,IC2
 9033   FORMAT('IERRG4,IC4,IC,IC1,IC2 = ',A4,2X,A4,3(2X,A1))
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9045I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9046)I,ICSTR(I:I),IASCNE
 9046       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9045     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRDRPL(PX,PY,NP,
     1                  IFIG,IPATT,PTHICK,
     1                  ICOL,ICOLR,ICOLG,ICOLB,IRGBFL,
     1                  JPATT,JTHICK,PTHIC2,JCOL)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, DRAW THE POLYLINE WHOSE
C              COORDINATES ARE GIVEN IN (PX(.),PY(.)).
C     NOTE--THE COORDINATES IN (PX(.),PY(.)) ARE IN
C           STANDARDIZED (0.0 TO 100.0) UNITS.
C     NOTE--THERE ARE NP SUCH COORDINATE PAIRS.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1990. PACK HP-GL OUTPUT (BY ALAN HECKERT)
C     UPDATED         --JUNE     1990. TEMPORARY ARRAYS TO GARBAGE COMMON
C     UPDATED         --JULY     1990. PACK HP-2622 COORDINATES
C     UPDATED         --AUGUST   1990. BUG FIX IN POSTSCRIPT
C     UPDATED         --SEPTEMBER1990. BUG FIX IN SUN
C     UPDATED         --MARCH    1991. PACK REGIS OUTPUT
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --SEPTEMBER 1995. VGA/TURBOC MULTIPLOTTING
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. FIX BLANK LINE FOR SOME DEVICES
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER 1997. UPDATE TO GENERAL CODED FOR
C                                      GUI.
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FORM
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT THE LATEX DRIVER
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --SEPTEMBER 2015. FIX GREYSCALE COLOR FOR SVG
C     UPDATED         --OCTOBER   2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER   2016. ADD TEMPLATES FOR SEVERAL FUTURE
C                                       DEVICES
C     UPDATED         --JULY      2019. TWEAK SCRATCH SPACE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
CCCCC ADD FOLLOWING LINES FOR MICROSOFT WINDOWS QUICKWIN DRIVER.  10/96
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
CCCCC LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
      TYPE (XYCOORD)   WXY
#endif
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*4 IFIG
      CHARACTER*4 IPATT
      CHARACTER*4 ICOL
      CHARACTER*2 ICJUNK
C
      INCLUDE 'DPCOPA.INC'
      DIMENSION PX(*)
      DIMENSION PY(*)
CCCCC THE FOLLOWING 5 LINES WERE ADDED     SEPTEMBER 1995
CCCCC TO SOLVE THE "WANDERING" TIC MARK PROBLEM
CCCCC WITH MULTIPLOTTING ON THE PC TURBO-C FRONTEND
      DIMENSION PXP(MAXPOP)
      DIMENSION PYP(MAXPOP)
      INCLUDE 'DPCOZZ.INC'
      EQUIVALENCE (GARBAG(JGAR17),PXP(1))
      EQUIVALENCE (GARBAG(JGAR19),PYP(1))
C
      DOUBLE PRECISION DPXP(MAXPOP)
      DOUBLE PRECISION DPYP(MAXPOP)
      INCLUDE 'DPCOZD.INC'
      EQUIVALENCE (DGARBG(IDGAR1),DPXP(1))
      EQUIVALENCE (DGARBG(IDGAR6),DPYP(1))
C
C  FOLLOWING DIMENSION STATEMENT FOR THE SUN CASE
      DIMENSION IPX(MAXPOP)
      DIMENSION IPY(MAXPOP)
CCCCC FOLLOWING LINES ADDED JUNE, 1990
      INCLUDE 'DPCOZI.INC'
      EQUIVALENCE (IGARBG(IIGAR1),IPX(1))
      EQUIVALENCE (IGARBG(IIGAR5),IPY(1))
CCCCC END CHANGE
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*1 ICARAT
      CHARACTER*1 IQUOTE
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOF2.INC'
CCCCC MARCH 2002: ADD FOLLOWING LINE FOR SVG DEVICE
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
CCCCC MARCH 2002: ADD FOLLOWING LINE FOR SVG DEVICE
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='DRPL'
      IERRG4='NO'
C
      NCSTR=(-999)
      ISAVE=(-999)
      NLOOP=0
      DEL=0.0
      AI=0.0
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'DRPL')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRDRPL--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IGUNIT,NP,IFIG,IPATT,JPATT
   52   FORMAT('IGUNIT,NP,IFIG,IPATT,JPATT = ',2I8,3(2X,A4))
        CALL DPWRST('XXX','BUG ')
        DO55I=1,NP
          WRITE(ICOUT,56)PX(I),PY(I)
   56     FORMAT('PX(I),PY(I) = ',2G15.7)
          CALL DPWRST('XXX','BUG ')
   55   CONTINUE
        WRITE(ICOUT,60)PTHICK,JTHICK,PTHIC2
   60   FORMAT('PTHICK,JTHICK,PTHIC2 = ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,61)ICOL,IMANUF,IMODEL,JCOL
   61   FORMAT('ICOL,IMANUF,IMODEL,JCOL = ',3(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,63)ICOLR,ICOLG,ICOLB,IRGBFL
   63   FORMAT('ICOLR,ICOLG,ICOLB,IRGBFL = ',4I5)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)IBUGG4,ISUBG4,IERRG4
   69   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4027')GOTO1200
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               **************************************************************
C               **  STEP 11--                                               **
C               **  TREAT THE TEKTRONIX 400X, 401X, 405X, AND 4114 CASES    **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES)        **
C               **  TO DRAW A POLYLINE,  DO THE FOLLOWING--
C               **  STEP 1--SET THE MODE AS GRAPHICS MODE                   **
C               **         (AS OPPOSED TO ALPHANUMERIC MODE)                **
C               **  STEP 2--TRANSLATE THE COORDINATES FOR THE START POINT.  **
C               **          THE ORDER IS HIY, LSBYX, LOY, HIX, LOX          **
C               **  STEP 3--TRANSLATE THE COORDINATES FOR THE STOP POINT.   **
C               **          THE ORDER IS HIY, LSBYX, LOY, HIX, LOX          **
C               **  STEP 4--WRITE OUT THE MODE PLUS (ON THE SAME LINE)      **
C               **          THE 2 TRANSLATED PAIRS OF COORDINATE POINTS.    **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1100 CONTINUE
      IFACTO=4
CCCCC IF(NUMHPP.GE.4000)IFACTO=1
CCCCC FOLLOWING LINE MODIFIED MARCH, 1990 (TO ALLOW PORT, SQUARE ORIENT)
      IF(NUMVPP.GE.3000)IFACTO=1
      IF(NP.LE.0 .OR. JPATT.EQ.-1)GOTO9000
C
      IF(IMODEL.EQ.'4006'.OR.IMODEL.EQ.'4010')THEN
        ICSTR(1:1)=IGSC
        NCSTR=1
        ISAVE=NCSTR
      ELSE
        ICSTR(1:1)=IESCC
        CALL DPCONA(JPATT,ICSTR(2:2))
        ICSTR(3:3)=IGSC
        NCSTR=3
        ISAVE=NCSTR
      ENDIF
C
      I=0
      I=I+1
C
 1110 CONTINUE
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      CALL TKTRPT(IX,IY,IFACTO,ICSTR,NCSTR,ISUBN0)
C
 1120 CONTINUE
      I=I+1
      IF(I.GT.NP)THEN
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        CALL TKTRPT(IX,IY,IFACTO,ICSTR,NCSTR,ISUBN0)
C
        IF(NCSTR.GE.70)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=ISAVE
          GOTO1110
        ELSE
          GOTO1120
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX 4027 CASE                   **
C               **  (COLOR RASTER DEVICE).                          **
C               **  TO DRAW A POLYLINE,  DO THE FOLLOWING--         **
C               **  STEP 1--SET THE MODE AS GRAPHICS MODE           **
C               **         (AS OPPOSED TO ALPHANUMERIC MODE)        **
C               **  STEP 2--TRANSLATE THE COORDINATES FOR THE       **
C               **          START POINT.                            **
C               **          THE ORDER IS HIY, LSBYX, LOY, HIX, LOX  **
C               **  STEP 3--TRANSLATE THE COORDINATES FOR THE       **
C               **          STOP POINT.                             **
C               **          THE ORDER IS HIY, LSBYX, LOY, HIX, LOX  **
C               **  STEP 4--WRITE OUT THE MODE PLUS (ON THE SAME LIN**
C               **          THE 2 TRANSLATED PAIRS OF COORDINATE POI**
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1200 CONTINUE
      NPM1=NP-1
      IF(NPM1.LE.0 .OR. JPATT.EQ.-1)GOTO9000
      I=0
      IP1=I+1
      CALL GRTRSD(PX(IP1),PY(IP1),IX2,IY2,ISUBN0)
      DO1210I=1,NPM1
        IP1=I+1
        IX1=IX2
        IY1=IY2
        IP1=I+1
        CALL GRTRSD(PX(IP1),PY(IP1),IX2,IY2,ISUBN0)
        ICSTR(1:5)='!VEC '
        NCSTR=5
        NCHTOT=8
        CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
        CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
        CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
        CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1210 CONTINUE
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO DRAW A POLYLINE--                            **
C               **  USE THE LOWER CASE P (= MOVE) INSTRUCTION       **
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  AND THE LOWER CASE Q (= DRAW) INSTRUCTION       **
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH ARE THE**
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 80-85, 253-254.                 **
C               ******************************************************
C
 2100 CONTINUE
      IF(NP.LE.0)GOTO9000
      I=1
      ICSTR(1:1)='p'
      NCSTR=1
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      CALL HPTRPT(IX,IY,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(NP.GT.1)THEN
        DO2120I=2,NP
          ICSTR(1:1)='q'
          NCSTR=1
          CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
          CALL HPTRPT(IX,IY,ICSTR,NCSTR,ISUBN0)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='}'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 2120   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO DRAW A POLYLINE--                            **
C               **  USE THE PU (= PEN UP) INSTRUCTION               **
C               **  AND THE PA (= PLOT ABSOLUTE) INSTRUCTION        **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  AND THE PD (= PEN DOWN) INSTRUCTION             **
C               **  AND THE PA (= PLOT ABSOLUTE) INSTRUCTION        **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  (WITH   TRAILING SEMI-COLONS WHICH ARE THE      **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 62, 143.                        **
C               **             PAGE 65-67, 143.                     **
C               ******************************************************
C
C  MODIFIED MAY, 1990 (PACK THE OUTPOUT FOR A SMALLER FILE)
 2200 CONTINUE
CCCCC IF(NP.LE.0)GOTO2290
      IF(NP.LE.1)GOTO9000
C
      I=1
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      ICSTR(1:5)='PU;PA'
      NCSTR=5
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(11:11)=','
      NCSTR=11
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(17:17)=';'
      NCSTR=17
      ICSTR(18:20)='PD;'
      NCSTR=20
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:2)='PA'
      NCSTR=2
      NCHTOT=5
      DO2220I=2,NP
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        IF(NCSTR.LE.65)THEN
          IF(I.GT.2)THEN
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
          ENDIF
        ELSE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=';'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=2
        ENDIF
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
 2220 CONTINUE
C
      IF(NCSTR.GT.2)THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=';'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-12, 10-13.                       **
C               **********************************************************
C
CCCCC JULY, 1990.  PACK COORDINATES (AT REQUEST OF MIKE KELLY TO SPEED HIS
CCCCC EMULATOR PACKAGE).   NOTE THAT WHEN THE COORDINATES ARE PACKED, SOME
CCCCC CODES DO NOT NEED TO BE REPEATED.
 2300 CONTINUE
      IF(NP.LE.1)GOTO9000
C
      I=1
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='*pa'
      NCSTR=4
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(10:10)=','
      NCSTR=10
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
C
      DO2320I=2,NP
        IF(NCSTR.GT.112)THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='Z'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:1)=IESCC
          ICSTR(2:3)='*p'
          NCSTR=3
        ENDIF
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='b'
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
 2320 CONTINUE
C
      IF(NCSTR.GT.3)THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='Z'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT                  CASE    **
C               ******************************************************
C
 2600 CONTINUE
C
      IF(NP.GT.1)THEN
        DO2610I=1,NP
          DPXP(I)=DBLE(PX(I))
          DPYP(I)=DBLE(PY(I))
 2610   CONTINUE
#ifdef HAVE_LIBPLOT
        CALL PLDRAW(DPXP,DPYP,NP)
#endif
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      IF(NP.LE.0)GOTO9000
      I=1
      ICSTR(1:8)='MOVE TO '
      NCSTR=8
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
      CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(19:20)='  '
      NCSTR=20
      CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(NP.LE.1)GOTO9000
C
      DO3120I=2,NP
        ICSTR(1:8)='DRAW TO '
        NCSTR=8
        NCHTOT=10
        NCHDEC=5
        CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
        CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(19:20)='  '
        NCSTR=20
        CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3120 CONTINUE
C
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
C  DECEMBER 1997.  FOR GUI, CONVERT COORDINATES TO INTEGER (BY
C  MULTIPLYING BY 100).  DO NOT PRINT OUT SUCCESSIV POINTS IF THEY
C  ARE IDENTICAL.
C
 3200 CONTINUE
      IF(NP.LE.0)GOTO9000
      IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
        I=1
        ICSTR(1:2)='M '
        NCSTR=2
        CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
        IPXTMP=INT(AX*10.**IGENFA+0.5)
        IPYTMP=INT(AY*10.**IGENFA+0.5)
        NCHTOT=IGENFA+3
        CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IPXOLD=IPXTMP
        IPYOLD=IPYTMP
C
        IF(NP.LE.1)GOTO9000
        DO3270I=2,NP
          CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
          IPXTMP=INT(AX*10.**IGENFA+0.5)
          IPYTMP=INT(AY*10.**IGENFA+0.5)
          IF(I.GT.2.AND.IPXTMP.EQ.IPXOLD.AND.IPYTMP.EQ.IPYOLD)GOTO3270
          IPXOLD=IPXTMP
          IPYOLD=IPYTMP
C
          ICSTR(1:2)='D '
          NCSTR=2
          NCHTOT=IGENFA+3
          CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3270   CONTINUE
      ELSE
        I=1
        ICSTR(1:5)='MOTO '
        NCSTR=5
        NCHTOT=10
        NCHDEC=5
        CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
        CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(16:17)='  '
        NCSTR=17
        CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(NP.LE.1)GOTO9000
        DO3220I=2,NP
          ICSTR(1:5)='DRTO '
          NCSTR=5
          NCHTOT=10
          NCHDEC=5
          CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
          CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
          ICSTR(16:17)='  '
          NCSTR=17
          CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3220   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3300 CONTINUE
      IF(NP.LE.0)GOTO9000
C
      I=1
      ICSTR(1:6)='LINE '
      NCSTR=6
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
      CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(17:17)=','
      NCSTR=17
      CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(28:28)=','
      NCSTR=28
      IF(NP.LE.1)THEN
        ICSTR(28:28)=';'
        GOTO9000
      ENDIF
C
      DO3320I=2,NP
        IF(NCSTR.GT.55)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
        CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        IF(I.EQ.NP)ICSTR(NCSTR:NCSTR)=';'
 3320 CONTINUE
      IF(NCSTR.GT.0)CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO DRAW A POLYLINE--                            **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  REFERENCE--CALCOMP LIBRARY                      **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.-1)GOTO9000
      IF(JPATT.EQ.-1)GOTO9000
      I=1
C
      IPEN=3
#ifdef HAVE_CALCOMP
      CALL CALCPT(PX(I),PY(I),AX,AY,ISUBN0)
      CALL PLOT(AX,AY,IPEN)
#endif
C
      IF(NP.GT.1)THEN
        DO4120I=2,NP
          IPEN=2
#ifdef HAVE_CALCOMP
          CALL CALCPT(PX(I),PY(I),AX,AY,ISUBN0)
          CALL PLOT(AX,AY,IPEN)
#endif
 4120   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
#ifdef HAVE_LAHEY_CALCOMP
      IF(NP.LE.0 .OR. JPATT.EQ.-1)GOTO9000
      I=1
C
      IPEN=3
      CALL CALCPT(PX(I),PY(I),AX,AY,ISUBN0)
      CALL PLOT(AX,AY,IPEN)
C
      IF(NP.GT.1)THEN
        DO4620I=2,NP
          IPEN=2
          CALL CALCPT(PX(I),PY(I),AX,AY,ISUBN0)
          CALL PLOT(AX,AY,IPEN)
 4620   CONTINUE
      ENDIF
#endif
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.0)GOTO9000
      I=1
C
      PYTEMP=PY(I)
      CALL GRTRSD(PX(I),PYTEMP,IX,IY,ISUBN0)
#ifdef HAVE_QWIN
      CALL MOVETO(INT2(IX),INT2(IY),WXY)
#endif
C
      DO4720I=2,NP
        PYTEMP=PY(I)
        CALL GRTRSD(PX(I),PYTEMP,IX,IY,ISUBN0)
#ifdef HAVE_QWIN
        ISTATUS=LINETO(INT2(IX),INT2(IY))
#endif
 4720 CONTINUE
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(NP.LE.1 .OR. JPATT.EQ.-1)GOTO9000
C
      DO4810I=1,NP
        PXP(I)=PX(I)
        PYP(I)=PY(I)
 4810 CONTINUE
#ifdef HAVE_OPEN_GL
      CALL GLDRAW(PXP,PYP,NP)
#endif
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.0)GOTO9000
      I=1
C
      PYTEMP=PY(I)
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
#ifdef HAVE_INTERACTER
      CALL IGrMoveTo(REAL(IX),REAL(IY))
#endif
C
      DO4920I=2,NP
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
#ifdef HAVE_INTERACTER
        CALL IGrLineTo(REAL(IX),REAL(IY))
#endif
 4920 CONTINUE
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 49b-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.0)GOTO9000
      I=1
C
      PYTEMP=PY(I)
#ifdef HAVE_WININTERACTER
      CALL IGrMoveTo(PX(I),PY(I))
#endif
C
      DO4970I=2,NP
#ifdef HAVE_WININTERACTER
        CALL IGrLineTo(PX(I),PY(I))
#endif
 4970 CONTINUE
C
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO DRAW A POLYLINE--                            **
C               **  WRITE OUT    ZZZZZZZZZZ                         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE THE CALCOMP LIBRARY ROUTINES                **
C               **  PLOT USED TO DRAW LINES                         **
C               **  VALUE OF IPEN DETERMINES DASH PATTERN           **
C               **  REFERENCE: FUNDAMENTAL PLOTTING SUBROUTINES,    **
C               **             FORTRAN, NICOLET-ZETA, 1984          **
C               **  PAGES: 2-2, 3-8, 3-9                            **
C               ******************************************************
C
 5100 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.-1)GOTO9000
      I=1
C
      IPEN=3
#ifdef HAVE_ZETA
      CALL CALCPT(PX(I),PY(I),AX,AY,ISUBN0)
      CALL PLOT(AX,AY,IPEN)
#endif
C
      IF(NP.GT.1)THEN
        IPEN=2
        IF(JPATT.GT.0)IPEN=13+JPATT
        IF(IPEN.NE.2 .AND. (IPEN.LT.14.OR.IPEN.GT.19))IPEN=2
        DO5120I=2,NP
#ifdef HAVE_ZETA
          CALL CALCPT(PX(I),PY(I),AX,AY,ISUBN0)
          CALL PLOT(AX,AY,IPEN)
#endif
 5120   CONTINUE
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               ******************************************************
C
C  SEPTEMBER, 1990.  ONLY PLOT 1,000 POINTS AT A TIME.
C  GOT AN ERROR MESSAGE ("TOO MANY POINTS") WHEN TRIED TO DO MORE.
C
 6600 CONTINUE
      IF (NP.EQ.1 .OR. JPATT.EQ.-1)GOTO 9000
      NLOOPS=(NP-1)/1000+1
      DO 6605 K=1,NLOOPS
        ISTRT=(K-1)*1000+1
        ILAST=K*1000+1
        IF(ILAST.GT.NP)ILAST=NP
        IF(ILAST.LE.ISTRT)ISTRT=ISTRT-1
        JCOUNT=0
        DO 6610 IDUMMY=ISTRT,ILAST
          JCOUNT=JCOUNT+1
          I = IDUMMY
          CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
          IPX(JCOUNT) = IX
          IPY(JCOUNT) = IY
 6610   CONTINUE
#ifdef HAVE_SUN
        CALL cfpolyline(IPX,IPY,JCOUNT)
#endif
 6605 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO DRAW A POLYLINE--                            **
C               **  USE THE P[  (= POSITION) INSTRUCTION            **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  AND THE V[ (= VECTOR) INSTRUCTION               **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  WITH   TRAILING ]                               **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 106 AND 100                    **
C               ******************************************************
C
C  MARCH, 1991.  PACK REGIS OUTPUT.
 8100 CONTINUE
      NCSTR=0
      IF(NP.LE.0)GOTO9000
C
      MAXREG=130
      I=1
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      ICSTR(1:2)='P['
      NCSTR=2
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(8:8)=','
      NCSTR=8
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=']'
      NCSTR=14
      ICSTR(15:17)='V[]'
      NCSTR=17
C
      IF(NP.LE.1)GOTO9000
      DO8120I=2,NP
C
        IF(NCSTR.GT.MAXREG-15)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        END IF
C
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+1
        ICSTR(NCSTR:NCSTR2)='V['
        NCSTR=NCSTR2
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=']'
C
 8120 CONTINUE
C
      IF(NCSTR.GT.0)CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **    NEW PATH                                      **
C               **    XCOOR YCOOR MOVETO                            **
C               **    %LOOP                                         **
C               **    XCOOR YCOOR LINETO                            **
C               **    %END LOOP                                     **
C               **    STROKE                                        **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **             COOKBOOK, ADOBE SYSTEMS              **
C               ******************************************************
C
CCCCC JUNE, 1990.  IF "BLANK" LINE PATTERN, THEN SKIP.
 8600 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.0)GOTO9000
      I=1
C
      ICSTR(1:8)='newpath '
      NCSTR=8
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=' '
      NCSTR=14
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(20:22)=' m '
      NCSTR=22
      IF(NP.LE.1)GOTO8650
C
CCCCC FOLLOWING LINE ADDED AUGUST, 1990.
      MAXPSP=200
      DO8620I=2,NP
CCCCC   FOLLOWING LINES ADDED AUGUST 1990.
CCCCC   SOME POSTSCRIPT PRINTERS SEEMED TO CHOKE IF TOO MANY LINES DRAWN
CCCCC   ON SAME PATH, SO SET AN UPPER LIMIT.
        IF(MOD(I,MAXPSP).EQ.0)THEN
          IF(NCSTR.GT.110)THEN
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            NCSTR=0
          ENDIF
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+14
          ICSTR(NCSTR:NCSTR2)='stroke newpath '
          NCSTR=NCSTR2
          IPREV=I-1
          CALL GRTRSD(PX(IPREV),PY(IPREV),IX,IY,ISUBN0)
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+2
          ICSTR(NCSTR:NCSTR2)=' m '
          NCSTR=NCSTR2
        ENDIF
CCCCC   END AUGUST, 1990 CHANGE.
        IF(NCSTR.GT.110)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
C
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+2
        ICSTR(NCSTR:NCSTR2)=' l '
        NCSTR=NCSTR2
 8620 CONTINUE
C
 8650 CONTINUE
      NCSTR=NCSTR+1
      NCSTR2=NCSTR+5
      ICSTR(NCSTR:NCSTR2)='stroke'
      NCSTR=NCSTR2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC LANDSCAPE CASE                   **
C               **  <ICARAT>IGV       - ENABLE VECTOR GRAPHICS MODE **
C               **  <ICARAT>Wtttttbbbbblllllrrrrr - SET PAGE MARGINS**
C               **  NOTE: ENFORCE MARGIN WITH THE "OFFSET" AND NUMBER*
C               **        OF PICTURE POINTS.  WE ONLY WANT TO CLIP  **
C               **        AT THE MARGIN, NOT FORCE A PAGE ERASE.    **
C               **  <ICARAT>Tttttt    - SET Y ORGIN FROM TOP OF PAGE**
C               **  <ICARAT>Jjjjjj    - SET X ORGIN FROM LEFT       **
C               **  <ICARAT>PWnn      - SET PEN WIDTH (3 CLOSEST TO **
C               **                      0.1 DATAPLOT UNITS)         **
C               **  <ICARAT>Vp        - SELECT LINE PATTERN         **
C               **  <ICARAT>UXXXXX:YYYYY - MOVE                     **
C               **  <ICARAT>DXXXXX:YYYYY - DRAW                     **
C               **  REFERENCE: QUIC PROGRAMMERS MANUAL - CHAPTER 14 **
C               **          ON VECTOR GRAPHICS                      **
C               ******************************************************
C
 9100 CONTINUE
      IF(NP.LE.0 .OR. JPATT.EQ.-1)GOTO9000
      I=1
C
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:4)='IGV'
      ICSTR(5:5)=ICARAT
      ICSTR(6:6)='W'
C
      IF(IORNSW.EQ.'PORT')THEN
        IX2=8500
        IY2=11000
      ELSE
        IX2=11000
        IY2=8500
      ENDIF
C
      IX=0
      IY=0
      NCSTR=6
      NCHTOT=-5
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      ICSTR(27:27)=ICARAT
      ICSTR(28:33)='T00000'
      ICSTR(34:34)=ICARAT
      ICSTR(35:40)='J00000'
      ICSTR(41:41)=ICARAT
      ICSTR(42:43)='PW'
      NCSTR=43
      NCHTOT=-2
      IJUNK=INT(PTHIC2+0.5)
      CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
      NCSTR=45
      ICSTR(46:46)=ICARAT
      ICSTR(47:47)='V'
      NCSTR=47
      NCHTOT=-1
      CALL GRTRIN(JPATT,NCHTOT,ICSTR,NCSTR)
      ICSTR(49:49)=ICARAT
      ICSTR(50:50)='U'
      NCSTR=50
C     NOTE: QUIC POSIOTIONS FROM TOP OF PAGE NOT THE BOTTOM, REVERSE Y
      PYTEMP=100.-PY(I)
      CALL QUICPT(PX(I),PYTEMP,IX,IY,ISUBN0)
      NCHTOT=-5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(56:56)=':'
      NCSTR=56
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(NP.LE.1)GOTO9000
C
      NCSTR=0
      NCHTOT=-5
      DO9130I=2,NP
        IF(NCSTR.GE.110)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=ICARAT
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='D'
        PYTEMP=100.-PY(I)
        CALL QUICPT(PX(I),PYTEMP,IX,IY,ISUBN0)
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=':'
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
 9130 CONTINUE
C
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=ICARAT
      NCTMP1=NCSTR+1
      NCSTR=NCSTR+3
      ICSTR(NCTMP1:NCSTR)='IGE'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF' .OR. NP.EQ.1 .OR. JPATT.EQ.-1)GOTO9000
      DO9610IDUMMY=1,NP
         I = IDUMMY
         CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
         IPX(IDUMMY) = IX
         IPY(IDUMMY) = IY
 9610 CONTINUE
      CALL XDRAW(IPX,IPY,NP)
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 69.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 98.                        **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 32-33.      **
C               *************************************************
C
10000 CONTINUE
      IF(ITCST.EQ.'CLOS' .OR. NP.EQ.1 .OR. JPATT.EQ.-1)GOTO9000
      DO10100I=1,NP
         PX1P=PX(I)
         PY1P=PY(I)
         CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
         PXP(I)=AX
         PYP(I)=AY
10100 CONTINUE
CTURB CALL TCDRPL(PXP,PYP,NP)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      IF(JPATT.EQ.-1)GOTO9000
#ifdef HAVE_GKS
      IF(NP.GE.2)THEN
        CALL GSLN(1)
        DO11010
          PXP(I)=PX(I)/100.0
          PYP(I)=PY(I)/100.0
          CALL GPL(NP, PXP, PYP)
11010   CONTINUE
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      IF(NP.LE.1 .OR. JPATT.EQ.-1)GOTO9000
C
      DO12010I=2,NP
        CALL GRTRSD(PX(I-1),PY(I-1),IX1,IY1,ISUBN0)
        CALL GRTRSD(PX(I),PY(I),IX2,IY2,ISUBN0)
#ifdef HAVE_GD
        CALL GDDRAW(IX1,IY1,IX2,IY2,JCOL,JPATT)
#endif
12010 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      IF(NP.LE.1 .OR. JPATT.EQ.-1)GOTO9000
C
#ifdef HAVE_ABSOFT
      CALL MovePen(PX(1),PY(1))
#endif
      DO13010I=2,NP
#ifdef HAVE_ABSOFT
        CALL MoveDraw(PX(I),PY(I))
#endif
13010 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C     2014/06: SEND POINTS IN INCREMENTS OF 1,000.
C              NOTE THAT IN ORDER FOR LINE TO STAY
C              CONNECTED, NEED TO REPEAT LAST POINT
C              IN NEXT LOOP ITERATION.
C
C
13500 CONTINUE
      IF(NP.LE.1 .OR. JPATT.EQ.-1)GOTO9000
C
      DO13510I=1,NP
        CALL GRTRSD(PX(I),PY(I),IX1,IY1,ISUBN0)
        PXP(I)=REAL(IX1)
        PYP(I)=REAL(IY1)
13510 CONTINUE
COLD  CALL aqtAddPolylineTo(PXP,PYP,NP)
      ICAP=1
      IF(IAQUCS.EQ.'ROUN')ICAP=2
      IF(IAQUCS.EQ.'SQUA')ICAP=3
      IF(NP.LE.1000)THEN
#ifdef HAVE_AQUA
        CALL aqdraw(PXP,PYP,NP,ICAP)
#endif
      ELSE
        NMAXPT=999
        NLOOP=NP/NMAXPT
        IF(MOD(NP,NMAXPT).GT.0)NLOOP=NLOOP+1
        DO13520I=1,NLOOP
          ISTRT=(I-1)*NMAXPT + 1
          IF(I.GT.1)ISTRT=ISTRT-1
          ISTOP=I*NMAXPT
          IF(ISTOP.GT.NP)ISTOP=NP
          NPTEMP=ISTOP-ISTRT+1
#ifdef HAVE_AQUA
          CALL aqdraw(PXP(ISTRT),PYP(ISTRT),NPTEMP,ICAP)
#endif
13520   CONTINUE
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      IF(NP.LE.1 .OR. JPATT.EQ.-1)GOTO9000
      IF(JPATT.EQ.1)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:13)='drawline[ 0]'
        NCSTR=13
      ELSEIF(JPATT.EQ.3)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:15)='dottedline{12}'
        NCSTR=15
      ELSEIF(JPATT.EQ.2)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:13)='dashline{24}'
        NCSTR=13
      ELSEIF(JPATT.EQ.4)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:18)='dashline[-30]{12}'
        NCSTR=18
      ELSEIF(JPATT.EQ.5)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:18)='dashline[-30]{24}'
        NCSTR=18
      ELSEIF(JPATT.EQ.6)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:18)='dashline[+30]{12}'
        NCSTR=18
      ELSEIF(JPATT.EQ.7)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:18)='dashline[+30]{24}'
        NCSTR=18
      ELSE
        ICSTR(1:1)=IBASLC
        ICSTR(2:13)='drawline[ 0]'
        NCSTR=13
      ENDIF
C
      IPTS=0
      NCHTOT=5
      DO15010I=1,NP
        IPTS=IPTS+1
        CALL GRTRSD(PX(I),PY(I),IX1,IY1,ISUBN0)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='('
        CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=')'
        IF(NCSTR.GT.80)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
          IF(JPATT.EQ.1)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:13)='drawline[ 0]'
            NCSTR=13
          ELSEIF(JPATT.EQ.3)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:15)='dottedline{12}'
            NCSTR=15
          ELSEIF(JPATT.EQ.2)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:13)='dashline{24}'
            NCSTR=13
          ELSEIF(JPATT.EQ.4)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:18)='dashline[-30]{12}'
            NCSTR=18
          ELSEIF(JPATT.EQ.5)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:18)='dashline[-30]{24}'
            NCSTR=18
          ELSEIF(JPATT.EQ.6)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:18)='dashline[+30]{12}'
            NCSTR=18
          ELSEIF(JPATT.EQ.7)THEN
            ICSTR(1:1)=IBASLC
            ICSTR(2:18)='dashline[+30]{24}'
            NCSTR=18
          ELSE
            ICSTR(1:1)=IBASLC
            ICSTR(2:13)='drawline[ 0]'
            NCSTR=13
          ENDIF
          IPTS=0
          IPTS=IPTS+1
          CALL GRTRSD(PX(I),PY(I),IX1,IY1,ISUBN0)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='('
          CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=','
          CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=')'
        ENDIF
15010 CONTINUE
      IF(IPTS.GE.2)CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      IF(NP.LE.0 .OR. JPATT.LE.0)GOTO9000
      CALL DPCONA(34,IQUOTE)
C
      ISVGLN=ISVGLN+1
      ICSTR(1:9)='   <g id='
      ICSTR(10:10)=IQUOTE
      NCSTR=10
      IF(ISVGLN.LE.9)THEN
        NCHTOT=1
      ELSEIF(ISVGLN.LE.99)THEN
        NCHTOT=2
      ELSEIF(ISVGLN.LE.999)THEN
        NCHTOT=3
      ELSEIF(ISVGLN.LE.9999)THEN
        NCHTOT=4
      ELSEIF(ISVGLN.LE.99999)THEN
        NCHTOT=5
      ELSE
        NCHTOT=6
      ENDIF
      CALL GRTRIN(ISVGLN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='>'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:12)='   <polyline'
      NCSTR=-12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(ISVGSS(1:3).EQ.'EXT')THEN
C
        NCSTR=12
        ICSTR(1:NCSTR)='      class='
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
C
        JTEMP=INT(PTHIC2+0.5)
        IF(JTEMP.LE.1)THEN
          ICSTR(NCSTR:NCSTR+6)='narrow-'
          NCSTR=NCSTR+7
        ELSEIF(JTEMP.GE.2 .AND. JTEMP.LE.3)THEN
          ICSTR(NCSTR:NCSTR+6)='medium-'
          NCSTR=NCSTR+7
        ELSEIF(JTEMP.GE.4 .AND. JTEMP.LE.5)THEN
          ICSTR(NCSTR:NCSTR+4)='wide-'
          NCSTR=NCSTR+5
        ELSE
          ICSTR(NCSTR:NCSTR+9)='extrawide-'
          NCSTR=NCSTR+10
        ENDIF
        IF(JPATT.EQ.1)THEN
          ICSTR(NCSTR:NCSTR+4)='solid'
          NCSTR=NCSTR+5
        ELSEIF(JPATT.EQ.2)THEN
          ICSTR(NCSTR:NCSTR+3)='dash'
          NCSTR=NCSTR+4
        ELSEIF(JPATT.EQ.3)THEN
          ICSTR(NCSTR:NCSTR+5)='dotted'
          NCSTR=NCSTR+6
        ELSEIF(JPATT.EQ.4)THEN
          ICSTR(NCSTR:NCSTR+4)='dash2'
          NCSTR=NCSTR+5
        ELSEIF(JPATT.EQ.5)THEN
          ICSTR(NCSTR:NCSTR+4)='dash3'
          NCSTR=NCSTR+5
        ELSEIF(JPATT.EQ.6)THEN
          ICSTR(NCSTR:NCSTR+4)='dash4'
          NCSTR=NCSTR+5
        ELSEIF(JPATT.EQ.7)THEN
          ICSTR(NCSTR:NCSTR+4)='dash5'
          NCSTR=NCSTR+5
        ELSE
          ICSTR(NCSTR:NCSTR+4)='solid'
          NCSTR=NCSTR+5
        ENDIF
C
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        CALL GRTRCO('FORE',ISVGFC,JCOL2)
        NCSTR=21
        ICSTR(1:NCSTR)='      style="stroke:#'
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          IF(IRGBFL.EQ.0)THEN
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          IF(IRGBFL.EQ.0)THEN
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
C
        ICSTR(1:12)='      style='
        ICSTR(13:13)=IQUOTE
        NCSTR=-13
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:26)='             stroke-width:'
        NCSTR=26
        JTEMP=INT(PTHIC2+0.5)
        IF(JTEMP.LT.1)JTEMP=1
        IF(JTEMP.GT.50)JTEMP=50
        NCHTOT=1
        IF(JTEMP.GE.10)NCHTOT=2
        CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        IF(ISVGCA.EQ.'ROUN')THEN
          NCSTR=35
          ICSTR(1:NCSTR)='             stroke-linecap: round;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGCA.EQ.'SQUA')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linecap: square;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGCA.EQ.'BUTT')THEN
          NCSTR=34
          ICSTR(1:NCSTR)='             stroke-linecap: butt;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          CONTINUE
        ENDIF
C
        IF(ISVGJS.EQ.'ROUN')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linejoin: round;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGJS.EQ.'BEVE')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linejoin: bevel;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(ISVGJS.EQ.'MITE')THEN
          NCSTR=36
          ICSTR(1:NCSTR)='             stroke-linejoin: miter;'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          CONTINUE
        ENDIF
C
        ICSTR(1:21)='             stroke:#'
        NCSTR=21
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          IF(IRGBFL.EQ.0)THEN
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            JRED=ICOLR
            JBLUE=ICOLG
            JGREEN=ICOLB
          ENDIF
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          IF(IRGBFL.EQ.0)THEN
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        IF(JPATT.GE.2 .AND. JPATT.LE.8)THEN
          NCHTOT=3
          NCSTR=31
          ICSTR(1:NCSTR)='             stroke-dasharray: '
          IF(JPATT.EQ.2)THEN
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ELSEIF(JPATT.EQ.3)THEN
            JTEMP=1
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=1
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ELSEIF(JPATT.EQ.4)THEN
            JTEMP=9
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=5
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ELSEIF(JPATT.EQ.5)THEN
            JTEMP=5
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=9
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=2
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ELSEIF(JPATT.EQ.6)THEN
            JTEMP=9
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=5
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=9
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=5
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ELSEIF(JPATT.EQ.7)THEN
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=1
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=3
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=1
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ELSEIF(JPATT.EQ.8)THEN
            JTEMP=5
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=2
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=5
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            JTEMP=2
            CALL GRTRIN(JTEMP,NCHTOT,ICSTR,NCSTR)
          ENDIF
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=';'
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
C
        NCSTR=23
        ICSTR(1:NCSTR)='             fill:none;'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:13)='             '
        ICSTR(14:14)=IQUOTE
        NCSTR=-14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      END IF
C
      ICSTR(1:13)='      points='
      ICSTR(14:14)=IQUOTE
      NCSTR=-14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      NCSTR=3
      ICSTR(1:NCSTR)='   ' 
      I=1
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      IF(NP.LE.1)THEN
        ICSTR(NCSTR:NCSTR)=','
        GOTO16050
      ELSE
        ICSTR(NCSTR:NCSTR)=','
      ENDIF
C
      DO16020I=2,NP
        IF(NCSTR.GT.110)THEN
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=3
          ICSTR(1:NCSTR)='   '
        ENDIF
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        IF(I.EQ.NP)THEN
          ICSTR(NCSTR:NCSTR)=' '
        ELSE
          ICSTR(NCSTR:NCSTR)=','
        ENDIF
        IF(NCSTR.LE.110)GOTO16020
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=3
        ICSTR(1:NCSTR)='   '
16020 CONTINUE
C
16050 CONTINUE
      IF(NCSTR.GT.3)THEN
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      ICSTR(1:3)='   '
      ICSTR(4:4)=IQUOTE
      ICSTR(5:6)='/>'
      NCSTR=-6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:7)='   </g>'
      NCSTR=-7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
      IF(NP.LE.1 .OR. JPATT.EQ.-1)GOTO9000
C
C     SET CAP AND JOIN STYLES
C
      IF(ICAICA.EQ.'BUTT')THEN
        ICAP=2
      ELSEIF(ICAICA.EQ.'ROUN')THEN
        ICAP=3
      ELSEIF(ICAICA.EQ.'SQUA')THEN
        ICAP=4
      ELSE
        ICAP=1
      ENDIF
      IF(ICAIJS.EQ.'MITE')THEN
        IJOIN=2
      ELSEIF(ICAIJS.EQ.'ROUN')THEN
        IJOIN=3
      ELSEIF(ICAICA.EQ.'BEVE')THEN
        IJOIN=4
      ELSE
        IJOIN=1
      ENDIF
C
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
      DO17010I=1,NP
        PXP(I)=PX(I)
        PYP(I)=PY(I)
        CALL GRTRSD(PXP(I),PYP(I),IX1,IY1,ISUBN0)
17010 CONTINUE
C
      IF(NP.LE.1000)THEN
        CALL CADRAW(IVAL2,PXP,PYP,NP,ICAP,IJOIN,JPATT,PTHIC2)
      ELSE
        NMAXPT=999
        NLOOP=NP/NMAXPT
        IF(MOD(NP,NMAXPT).GT.0)NLOOP=NLOOP+1
        DO17520I=1,NLOOP
          ISTRT=(I-1)*NMAXPT + 1
          IF(I.GT.1)ISTRT=ISTRT-1
          ISTOP=I*NMAXPT
          IF(ISTOP.GT.NP)ISTOP=NP
          NPTEMP=ISTOP-ISTRT+1
          CALL CADRAW(IVAL2,PXP(ISTRT),PYP(ISTRT),NPTEMP,
     1            ICAP,IJOIN,JPATT,PTHIC2)
17520   CONTINUE
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON' .OR. ISUBG4.EQ.'DRPL')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRDRPL--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9033)IERRG4,NCSTR
 9033   FORMAT('IERRG4,NCSTR = ',A4,2X,I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9035I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9036)I,ICSTR(I:I),IASCNE
 9036       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9035     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRERSC(JCOL,ICOLT,IBACC2)
C
C     PURPOSE--ERASE THE SCREEN OF A SPECIFIC GRAPHICS DEVICE, AND (IF A
C              COLOR DEVICE) FLOOD THE SCREEN WITH THE PRE-SCRIBED
C              BACKGROUND COLOR.
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1990. ADD AF COMMAND TO HP-GL (BY ALAN)
C     UPDATED         --JULY     1990. BACKGROUND COLOR FOR SOME HP 2622 (ALAN)
C     UPDATED         --NOVEMBER 1990. POSTSCRIPT BUG FIX (BY ALAN)
C     UPDATED         --JANUARY  1991. ADD COLOR SUPPORT TO REGIS (ALAN)
C     UPDATED         --MAY      1991. 3 ISUBNO TO ISUBN0 (JJF)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --MAY      1991. FIX 4027
C     UPDATED         --OCTOBER  1991. POSTSCRIPT FONTS TABLE DRIVEN (ALAN)
C     UPDATED         --MAY      1992. AVOID POSTSCRIPT BLANK PAGE
C     UPDATED         --MAY      1992. DEBUG STATEMENTS
C     UPDATED         --AUGUST   1992. SET BACKGROUND FOR CGM (ALAN)
C                                      HP-GL FOR LASERJET III
C     UPDATED         --JANUARY  1993. POSTSCRIPT PAGE NUMBER (ALAN)
C     UPDATED         --JANUARY  1993. POSTSCRIPT "%%" LINES (ALAN)
C     UPDATED         --OCTOBER  1993. POSTSCRIPT SET BACKGROUND (ALAN)
C     UPDATED         --MAY      1996. MINOR FIX TO X11
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      (OLD CALCOMP STYLE)
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --FEBRUARY 1997. BUG FIX FOR QWIN
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C                     --MARCH    2002. CHANGE TO QUARTZ (NEW MAC GRAPHICS
C                                      LIBRARY)
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C                     --MARCH    2002. CHANGE TO GHOSTSCRIPT
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --JANUARY  2003. SOME POSTSCRIPT FIXES
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT LATEX DRIVER
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --DECEMBER 2009. FIX FOR DEVICE 3 POSTSCRIPT OUTPUT
C     UPDATED         --NOVEMNER 2015. IDEVO3 OPTION FOR DEVICE 3 OUTPUT
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      DEVICE DRIVERS (CAIRO, WMF, D3)
C     UPDATED         --OCTOBER  2020. SUPPORT RGB COLOR FOR BACKGROUND
C     UPDATED         --OCTOBER  2023. UPDATE TO GD DRIVER TO SET
C                                      BACKGROUND COLOR
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
CCCCC LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*4 ICOLT
      CHARACTER*1 IQUOTE
      CHARACTER*1 ICARAT
      CHARACTER*2 ICJUNK
C  AUGUST 1992.  ADD FOLLOWING LINE
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C  OCTOBER 1993.  ADD FOLLOWING LINE
      DIMENSION PX(5)
      DIMENSION PY(5)
C  JULY 1996.  ADD FOLLOWING SECTION.
#ifdef HAVE_LAHEY_CALCOMP
      INTEGER ILAHEY(9)
      REAL RLAHEY(8)
      CHARACTER*40 CLAHEY
#endif
C  FEBRUARY 2001.  ADD FOLLOWING SECTION FOR JPEG, PNG DRIVER.
      INTEGER IADE(81)
      INTEGER IBACC2(3)
      INTEGER IXTMP(2)
      INTEGER IYTMP(2)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
CCCCC THE FOLLOWING LINE WAS ADDED    MAY 1992 (JJF)
      INCLUDE 'DPCOF2.INC'
C
      CHARACTER*4 IPSTNW
      CHARACTER*4 IPSTN2
      COMMON/IPSTNW/IPSTNW,IPSTN2
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
C-----COMMON VARIABLES (GENERAL)--------------------------------------
C
C  AUGUST 1992.  DEFINE RGB COLORS FOR CGM
C
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='ERSC'
      IERRG4='NO'
C
      NCSTR=(-999)
      ICHAPS=0
      INULLI=0
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'ERSC')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRERSC--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)JCOL,IGBAUD,AGERDE
   53   FORMAT('JCOL,IGBAUD,AGERDE = ',2I8,G15.7)
        CALL DPWRST('XXX','BUG ')
CCCCC   THE FOLLOWING 2 LINES WERE ADDED   MAY 1992
        WRITE(ICOUT,54)IPL1CS,IPL2CS,IPSTBP,IPSTPN
   54   FORMAT('IPL1CS,IPL2CS,IPSTBP, IPSTPN = '3(A4,2X),2X,I6)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IMANUF,IMODEL,IBUGG4,IGUNIT
   55   FORMAT('IMANUF,IMODEL,IBUGG4,IGUNIT = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO9000
C
        IF(IMODEL.EQ.'4020')GOTO1200
        IF(IMODEL.EQ.'4022')GOTO1200
        IF(IMODEL.EQ.'4025')GOTO1200
        IF(IMODEL.EQ.'4027')GOTO1200
C
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
C
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ************************************************************
C               **  STEP 11--                                             **
C               **  TREAT THE TEKTRONIX 400X, 401X, 405X, AND 4114 CASES  **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES)      **
C               **  TO ERASE THE SCREEN,                                  **
C               **  WRITE OUT AN ESCAPE FORM-FEED                         **
C               ************************************************************
C
 1100 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=IFFC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      DO1130J=1,10
        ICSTR(J:J)=INULC
 1130 CONTINUE
      NCSTR=10
C
      INULLI=INT(AGERDE+0.5)
      IF(INULLI.GT.0)THEN
        DO1135I=1,INULLI
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1135   CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX 4020, 4022, AND 4025 CASES  **
C               **  (NON-COLOR RASTER DEVICES).                     **
C               **  TO ERASE THE SCREEN,                            **
C               **  USE THE !ERA COMMAND                            **
C               **  REFERENCE--4027 OPERATOR'S MANUAL, PAGE 5-6.    **
C               ******************************************************
C
 1200 CONTINUE
      ICSTR(1:9)='!ERA G C;'
      IX=JCOL+48
      CALL DPCONA(IX,ICSTR(10:10))
      ICSTR(11:11)=';'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 13--                                       **
C               **  TREAT THE 4105 CASE                             **
C               **  (COLOR DEVICE)                                  **
C               **  TO ERASE THE SCREEN,                            **
C               **  SET THE BACKGROUND COLOR AND                    **
C               **  THEN CARRY OUT THE ERASE                        **
C               **  REFERENCE--PAGE 5-51                            **
C               ******************************************************
C
 1300 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='RA1'
      IX=JCOL+48
      CALL DPCONA(IX,ICSTR(5:5))
      ICSTR(6:6)='0'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=IFFC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  THERE IS NO    ERASE      INSTRUCTION PER SE.   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO    ERASE      INSTRUCTION PER SE.   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
C  MAY, 1990.  ADD AN "ADVANCE PAGE" COMMAND.  HOWEVER, DO NOT SEND ON FIRST
C  PLOT.
C
C  AUGUST, 1992.  HANDLE LASER JET III CASE SEPARATELY.  TO ADVANCE
C  PAGE, NEED TO EXIT BACK INTO LASER JET MODE.
 2200 CONTINUE
      IF(IMODE3.EQ.'LJET')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:2)='E'
        NCSTR=2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(2:4)='%0B'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:3)='IN;'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:4)='RO90'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(IHPGSW.EQ.'ON')THEN
        ICSTR(1:3)='AF;'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        IHPGSW='ON'
      ENDIF
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-4, 10-3.                         **
C               **********************************************************
C
C  JULY, 1990.  SET BACKGROUND COLOR FOR 2622 TYPE DEVICES THAT SUPPORT COLOR
C
 2300 CONTINUE
      NCSTR=1
      ICSTR(NCSTR:NCSTR)=IESCC
      NCSTR=NCSTR+1
      NCSTR2=NCSTR+3
      ICSTR(NCSTR:NCSTR2)='*daZ'
      NCSTR=NCSTR2
      IF(IGCOLO.EQ.'ON')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IESCC
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+1
        ICSTR(NCSTR:NCSTR2)='*e'
        NCSTR=NCSTR2
        NCHTOT=1
        CALL GRTRIN(JCOL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='B'
      ENDIF
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT              CASE            **
C               **********************************************************
C
 2600 CONTINUE
C
      IFACT=65535/255
      IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1   IBACC2(3).GE.0)THEN
        IVALR=IFACT*IBACC2(1)
        IVALG=IFACT*IBACC2(2)
        IVALB=IFACT*IBACC2(3)
      ELSE
        IVALR=IFACT*IRED(JCOL)
        IVALG=IFACT*IGREEN(JCOL)
        IVALB=IFACT*IBLUE(JCOL)
      ENDIF
C
      IXTEMP = INT(ANUMHP+0.5)
      IYTEMP = INT(ANUMVP+0.5)
      IADE(1)=53
      IADE(2)=55
      IADE(3)=48
      IADE(4)=ICHAR('x')
      IADE(5)=53
      IADE(6)=55
      IADE(7)=48
      IADE(8)=0
C
#ifdef HAVE_LIBPLOT
      CALL PLERAS(IADE,IVALR,IVALG,IVALB)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:21)='SET COLOR BACKGROUND '
      ICSTR(22:25)=ICOLT(1:4)
      NCSTR=25
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='ERASE SCREEN'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:10)='SECO BACK '
      ICSTR(11:14)=ICOLT(1:4)
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:4)='ERSC'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  1) IF A PICTURE IS CURRENTLY ACTIVE, CLOSE IT            **
C               **  2) ACTIVATE A NEW PICTURE                                **
C               ***************************************************************
C
 3300 CONTINUE
C
      IF(ICGMSW.EQ.'ON')THEN
        ICSTR(1:7)='ENDPIC;'
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        CALL DPCONA(39,IQUOTE)
        ICSTR(1:7)='BEGPIC '
        ICSTR(8:8)=IQUOTE
        ICSTR(9:9)=' '
        ICSTR(10:10)=IQUOTE
        ICSTR(11:11)=';'
        NCSTR=11
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICGMSW='ON'
C
C       NOTE:  BACKGROUND COLOR SHOULD SPECIFY RGB COMPONENTS (EVEN IF
C              COLOR MODE IS INDEXED OTHERWISE), SO LEAVE OFF.  LET POST
C              PROCESSOR SET THE BACKGROUND COLOR.  MAYBE AT FUTURE TIME
C              CAN ADD OPTION TO TRANSLATE DATAPLOT COLORS TO RGB
C              COMPONENTS.
        ICSTR(1:11)='BEGPICBODY;'
        NCSTR=11
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       AUGUST 1992.  SPECIFY BACKGROUND COLOR AS RGB VALUES.
C
        ICSTR(1:9)='BACKCOLR '
        NCSTR=9
        NCHTOT=3
        IVAL=IRED(JCOL)
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        IVAL=IGREEN(JCOL)
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        IVAL=IBLUE(JCOL)
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=';'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               *******************************************************
C               **  STEP 34--                                        **
C               **  TREAT THE CGM (BINARY) GENERAL CASE              **
C               **  1) IF A PICTURE IS CURRENTLY ACTIVE, CLOSE IT    **
C               **  2) ACTIVATE A NEW PICTURE                        **
C               *******************************************************
C
 3400 CONTINUE
C
      IF(ICGMSW.EQ.'ON')THEN
        CONTINUE
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO ERASE SCREEN---                              **
C               **  USE CALCOMP LIBRARY                             **
C               **  GRINDE DOES INITIAL PAGE ERASE, CHECK FOR THIS  **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      IF(ICALSW.EQ.'ON')THEN
        ICALSW='OFF'
      ELSE
        IPEN=-3
        YNEW=0.
        DOTPPI=1000.
        XPAGE=ANUMHP/DOTPPI
        XNEW=XPAGE+1.
#ifdef HAVE_CALCOMP
        CALL PLOT(XNEW,YNEW,IPEN)
#endif
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IF(ILAHSW.EQ.'OFF')THEN
        IX1=0
        IF(ILAHGR.EQ.'BIOS')THEN
          IX2=0
        ELSEIF(ILAHGR.EQ.'DIRE')THEN
          IX2=1
        ELSE
          IX2=1
        ENDIF
        IMODE=0
#ifdef HAVE_LAHEY_CALCOMP
        CALL PLOTS(IX1,IX2,IMODE)
#endif
        ILAHSW='ON'
      ELSE
        AX=0.0
        AY=0.0
        IPEN=-999
#ifdef HAVE_LAHEY_CALCOMP
        CALL PLOT(AX,AY,IPEN)
#endif
      ENDIF
#ifdef HAVE_LAHEY_CALCOMP
      CALL GRINFO(ILAHEY,RLAHEY,CLAHEY)
      ILAHNC=ILAHEY(4)
      ANUMHP=REAL(ILAHEY(1))
      ANUMVP=REAL(ILAHEY(2))
#endif
CCCCC FILL A RECTANGLE WITH THE COLOR
      PX(1)=0.0
      PX(2)=11.0
      PX(3)=11.0
      PX(4)=0.0
      PX(5)=0.0
      PY(1)=0.0
      PY(2)=0.0
      PY(3)=8.5
      PY(4)=8.5
      PY(5)=0.0
      NP=5
#ifdef HAVE_LAHEY_CALCOMP
      CALL NEWPEN(JCOL)
      CALL FILL(NP,PX,PY)
#endif
      ILAHCC=JCOL
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
C
CCCCC FEBRUARY 1995.  BE SURE TO SET FOCUS TO GRAPHICS SCREEN!
#ifdef HAVE_QWIN
      ISTATS=FOCUSQQ(99)
      IF(IQWNCL.EQ.'VGA')THEN
        ISTATS=SETBKCOLOR(JCOL)
      ELSEIF(IQWNCL.EQ.'RGB')THEN
        IFLAG=0
        IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1     IBACC2(1).GE.0)IFLAG=1
        IF(IFLAG.EQ.0)THEN
          IF(JCOL.GE.0)THEN
            JTEMP=RGBTOINTEGER(IRED(JCOL),IGREEN(JCOL),IBLUE(JCOL))
            ISTATUS=SETBKCOLORRGB(JTEMP)
          ELSE
            AVAL=ABS(REAL(JCOL)/100.)*255.
            IVAL=INT(AVAL+0.5)
            IF(IVAL.LT.0)IVAL=0
            IF(IVAL.GT.255)IVAL=255
            JTEMP=IVAL
            JTEMP2=RGBTOINTEGER(JTEMP,JTEMP,JTEMP)
            ISTATUS=SETBKCOLORRGB(JTEMP2)
          ENDIF
        ELSE
          ICOLR=IBACC2(1)
          ICOLG=IBACC2(2)
          ICOLB=IBACC2(3)
          IF(ICOLR.LT.0)ICOLR=0
          IF(ICOLR.GT.255)ICOLR=255
          IF(ICOLG.LT.0)ICOLG=0
          IF(ICOLG.GT.255)ICOLG=255
          IF(ICOLB.LT.0)ICOLB=0
          IF(ICOLB.GT.255)ICOLB=255
          JTEMP2=RGBTOINTEGER(ICOLR,ICOLG,ICOLB)
          ISTATUS=SETBKCOLORRGB(JTEMP2)
        ENDIF
      ELSE
        ISTATS=SETBKCOLOR(JCOL)
      ENDIF
      CALL CLEARSCREEN($GCLEARSCREEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(IOPGOF.EQ.'OFF')GOTO9000
#ifdef HAVE_OPEN_GL
      CALL GLCLEA
      CALL GLCHEC(IEXPOSE,IERRNO)
      IF(IERRNO.EQ.0)THEN
        GOTO4819
      ELSE
        WRITE(ICOUT,4821)
 4821   FORMAT(1X,'WARNING: OPEN-GL GRAPHICS WINDOW HAS BEEN DESTROYED.')
        CALL DPWRST('XXX','BUG ')
        IOPGOF='OFF'
        GOTO9000
      ENDIF
      IF(IEXPOSE.EQ.1)THEN
        IJUNK=0
        CALL GLUPDA(IJUNK)
      ENDIF
      IXTEMP = INT(ANUMHP+0.5)
      IYTEMP = INT(ANUMVP+0.5)
      IF(IORNSW.EQ.'LAND')THEN
        IORIEN=0
      ELSE IF(IORNSW.EQ.'PORT')THEN
        IORIEN=1
      ELSE IF(IORNSW.EQ.'SQUA')THEN
        IORIEN=3
      ELSE
        IORIEN=2
      END IF
      IFLAG=0
      IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
      IF(IFLAG.EQ.0)THEN
        ATEMP=255.0
        ARED=REAL(IRED(JCOL))/ATEMP
        AGREEN=REAL(IGREEN(JCOL))/ATEMP
        ABLUE=REAL(IBLUE(JCOL))/ATEMP
        CALL GLERAS(IXTEMP,IYTEMP,IORIEN,IXPIX,IYPIX,ARED,AGREEN,ABLUE)
      ELSE
        ATEMP=255.0
        ARED=REAL(IBACC2(1))/ATEMP
        AGREEN=REAL(IBACC2(2))/ATEMP
        ABLUE=REAL(IBACC2(3))/ATEMP
        CALL GLERAS(IXTEMP,IYTEMP,IORIEN,IXPIX,IYPIX,ARED,AGREEN,ABLUE)
      ENDIF
      ANUMHP=REAL(IXPIX)
      ANUMVP=REAL(IYPIX)
4899  CONTINUE
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL IGrPaletteRGB(0,IRED(JCOL),IGREEN(JCOL),IBLUE(JCOL))
      CALL IgrColourN(0)
      CALL IGrArea(0.,1.,0.,1.)
      CALL IClearScreen()
      CALL IGrUnits(0.0,100.0,0.0,100.0)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      IF(IWINCL.EQ.'RGB')THEN
        CALL IGrPaletteRGB(0,IRED(JCOL),IGREEN(JCOL),IBLUE(JCOL))
        CALL IgrColourN(0)
      ELSE
        CALL IgrColourN(0)
      ENDIF
      CALL IGrArea(0.,1.,0.,1.)
      CALL IGrAreaClear()
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  THERE IS NO    ERASE      INSTRUCTION PER SE.   **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY ROUTINES                    **
C               ******************************************************
C
 5100 CONTINUE
      IF(IZETSW.EQ.'OFF')THEN
        IPEN=-3
        YNEW=0.
        DOTPPI=1000.
        XPAGE=ANUMHP/DOTPPI
        XNEW=XPAGE+1.
#ifdef HAVE_ZETA
        CALL PLOT(XNEW,YNEW,IPEN)
#endif
      ENDIF
      IZETSW='OFF'
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               **             PAGES 96 AND 145                     **
C               ******************************************************
C
 6600 CONTINUE
#ifdef HAVE_SUN
      CALL cfclrvws(ivsnam,0,0)
CCCCC CALL cfclosecgi()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO ERASE SCREEN---                              **
C               **  WRITE OUT AN ESC P p S ( E ) ESC \              **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 96 AND 145                     **
C               **  JANUARY, 1991.  ADD SUPPORT FOR COLOR REGIS.    **
C               **  DEFINE COLOR MAP LOCATION TO 0, DEFINE BACKGROUND*
C               **  COLOR IN LOCATION 0.                            **
C               ******************************************************
C
 8100 CONTINUE
      IF(IGCOLO.EQ.'OFF')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='Pp'
        ICSTR(4:7)='S(E)'
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:25)='S(M0(AH   L   S   ))S(I0)'
        NCHTOT=3
        ITEMP=IRGHUE(JCOL)
        NCSTR=7
        CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
        ITEMP=IRGLGT(JCOL)
        NCSTR=11
        CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
        ITEMP=IRGSAT(JCOL)
        NCSTR=15
        CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
        ICSTR(26:26)=IESCC
        ICSTR(27:28)='Pp'
        ICSTR(29:32)='S(E)'
        NCSTR=32
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  TO PRINT CURRENT PAGE - SHOWPAGE                **
C               **  ALSO SET NEW PAGE AS EITHER LANDSCAPE OR        **
C               **  PORTRAIT ORIENTATION.                           **
C               **  THE "GRESTORE/GSAVE" PAIR RESETS THE DEFAULT AND**
C               **  THE NEW "TRANSFORMATION" MATRIX IS DEFINED.     **
C               **  REFERENCE - POSTSCRIPT LANGUAGE TUTORIAL AND    **
C               **              COOKBOOK FROM ADOBE SYSTEMS         **
C               **  PAGE - 19                                       **
C               **  MODIFIED JANUARY, 1990.                         **
C               **  A) ADD CODE TO MAKE A "CONFORMING" POSTSCRIPT   **
C               **     FILE                                         **
C               **  B) SUPPORT ENCAPSULATED POSTSCRIPT.  NOTE THAT  **
C               **     FOR ENCAPSULATED POSTSCRIPT, EACH PAGE MUST  **
C               **     BE A SELF-CONTAINED FILE, SO EACH PAGE WILL  **
C               **     REPEAT WHAT WOULD NORMALLY BE IN THE GRINDE  **
C               **     GREXIT ROUTINES.                             **
C               ******************************************************
C
C  NOVEMBER 1990. BUG FIX.  MODIFY HOW MARGINS HANDLED.
C  OCTOBER  1991. MAKE FONTS TABLE DRIVEN (EASIER UPDATING, SIMPLER CODE)
C  JANUARY  1993. ONLY UPDATE PAGE NUMBER FOR DEVICE 2 (DEVICE 3
C                 ALWAYS 1).
C  JANUARY  1993. FOR "%%" LINES, CHECK FOR LEADING SPACE (FRAMEMAKER
C                 WON'T ACCEPT IF LEADING SPACE PRESENT).
C  OCTOBER  1993. FOR COLOR POSTSCRIPT, SET BACKGROUND COLOR.
C  JANUARY  2003: FOR REGULAR POSTSCRIPT, HAVE A CHECK FOR INITIAL PAGE
C                 ERASE (I.E., GRINDE DOES INITIAL PAGE, NO NEED TO
C                 REPEAT HERE).  THIS WILL SUPPRESS THE INITIAL BLANK
C                 PAGE.
C  JANUARY 1993:  ONLY COUNT PAGE FOR DEVICE 2.
C  JANUARY 2003:  IPSTNW USED TO ACCOUNT FOR INITIAL PAGE ERASE
C  DECEMBER 2009: SKIP A FEW LINES FOR DEVICE 3 POSTSCRIPT OUTPUT
C  NOVEMBER 2015: THE "SET DEVICE 3 <AUTOMATIC/USER>" COMMAND WAS ADDED
C                 TO SPECIFY WHETHER OR NOT DATAPLOT HANDLES
C                 OPENING/CLOSING OF DEVICE 3 AUTOMATICALLY (SO THAT
C                 DEVICE 3 OUTPUT CONTAINS MOST RECENT GRAPH).
C  OCTOBER  2020: SUPPORT RGB FOR BACKGROUND COLOR
C
 8600 CONTINUE
      IF(IMODE3.NE.'DEV3')THEN
        IF(IGUNIT.EQ.IPL1NU)THEN
          IF(IPSTNW.EQ.'ON')THEN
            IPSTNW='OFF'
            IF(IMODEL.EQ.'ENCA')GOTO8710
            GOTO9000
          ELSE
            IPSTPN=IPSTPN+1
          ENDIF
        ELSEIF(IGUNIT.EQ.IPL2NU)THEN
          IF(IPSTN2.EQ.'ON')THEN
            IPSTN2='OFF'
            IF(IMODEL.EQ.'ENCA')GOTO8710
            GOTO9000
          ELSE
            IPSTP2=IPSTP2+1
          ENDIF
        ENDIF
      ENDIF
CCCCC END CHANGE
CCCCC JANUARY 1993.  ADD FOLLOWING LINE
      IF(IPSTSP.EQ.'OFF'.OR.IPSTSP.EQ.'NO'.OR.IPSTSP.EQ.'FALS')
     1 IPSTSP='OFF'
CCCCC ENCAPSULATED POSTSCRIPT HANDLED DIFFERENTLY
      IF(IMODEL.EQ.'ENCA')GOTO8710
C
CCCCC THE FOLLOWING 12 LINES WERE ADDED MAY 1992 (JJF)
CCCCC IF(IPSTBP.EQ.'ON'.OR.IPSTPN.GE.3)THEN
CCCCC IF(IMODE3.NE.'DEV3'.AND.IPSTPN.GE.3)THEN
      IF(IMODE3.NE.'DEV3')THEN
        IF(IGUNIT.EQ.IPL1NU)THEN
          IF(IDV2SP.EQ.'OFF')THEN
            ICSTR(1:8)='showpage'
            NCSTR=8
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ELSE
            IF(IPSTBP.EQ.'ON')THEN
              ICSTR(1:8)='showpage'
              NCSTR=8
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ENDIF
          ENDIF
        ELSEIF(IGUNIT.EQ.IPL2NU)THEN
CCCCC     IF(IPSTBP.EQ.'ON')THEN
             ICSTR(1:8)='showpage'
             NCSTR=8
             CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC     ENDIF
        ENDIF
      ELSE
        IF(IPSTBP.EQ.'ON')THEN
          ICSTR(1:8)='showpage'
          NCSTR=8
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
C
CCCCC DECEMBER 2009: FOR DEVICE 3 OUTPUT, OMIT THE NEXT FEW LINES AS
CCCCC                THESE ARE DONE IN GRINDE (TO ACCOUNT FOR
CCCCC                DIAGRAMMATIC GRAPHICS FOR DEVICE 3 OUTPUT).
C
      IF(IMODE3.NE.'DEV3')THEN
        ICSTR(1:8)='grestore'
        NCSTR=8
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C       FOLLOWING SECTION ADDED JANUARY, 1990
        ICSTR(1:8)='%%Page: '
        NCHTOT=5
        NCSTR=8
CCCCC   JANUARY 1993.  ADD FOLLOWING LINE
        IVALT=IPSTPN
        IF(IGUNIT.EQ.IPL2NU)IVALT=IPSTP2
        CALL GRTRIN(IVALT,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IVALT,NCHTOT,ICSTR,NCSTR)
        IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:5)='gsave'
        NCSTR=5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:11)='0 0 moveto '
        NCSTR=11
        XPPI=PSTPPI
        YPPI=PSTPPI
        XSCALE=72./XPPI
        YSCALE=72./YPPI
        NCSTR=11
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(XSCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(22:22)=' '
        NCSTR=22
        CALL GRTRRE(YSCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(33:39)=' scale '
        NCSTR=39
C
CCCCC   IXTR=IOFFSH
CCCCC   IYTR=IOFFSV
CCCCC   IF(IORNSW.NE.'PORT')IXTR=IOFFSH+ANUMVP+0.5
        IF(IORNSW.EQ.'LAND')THEN
          IVTEMP=IPSTBM
          IHTEMP=IPSTLM
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IVTEMP=IPS2BM
          IHTEMP=IPS2LM
        ELSEIF(IORNSW.EQ.'PORT')THEN
          IVTEMP=IPS2BM
          IHTEMP=IPS2LM
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IVTEMP=IPS2BM
          IHTEMP=IPS2LM
        ELSE
          IVTEMP=IPSTBM
          IHTEMP=IPSTLM
        END IF
        IXTR=IHTEMP
        IYTR=IVTEMP
        IF(IORNSW.NE.'PORT' .AND. IORNSW.NE.'LAN2' .AND.
     1    IORNSW.NE.'SQUA')IXTR=IHTEMP+INT(ANUMVP+0.5)
        NCHTOT=5
        CALL GRTRIN(IXTR,NCHTOT,ICSTR,NCSTR)
        ICSTR(45:45)=' '
        NCSTR=45
        CALL GRTRIN(IYTR,NCHTOT,ICSTR,NCSTR)
        ICSTR(51:61)=' translate '
C
        ICSTR(62:63)=' 0'
        IF(IORNSW.NE.'PORT' .AND. IORNSW.NE.'LAN2' .AND.
     1    IORNSW.NE.'SQUA')ICSTR(62:63)='90'
        ICSTR(64:71)=' rotate '
        NCSTR=71
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
C  NOTE: NEW PAGE DOES A RESTORE, WHICH SETS INITIAL FONT SIZE
C        SO SET CURRENT FONT SIZE TO ORIGINAL FONT SIZE
      IPSTPC=IPSTPO
C  JUNE, 1989.  A NEW PAGE RESETS THE FONT TO WHAT IS SET IN GRINDE.
C  ADDED IPSTFO TO DPCODV COMMON BLOCK.
      IPSTFC=IPSTFO
CCCCC OCTOBER 1993.  FILL BACKGROUND FOR COLOR POSTSCRIPT.
CCCCC NOTE THAT THIS WILL ONLY BE DONE FOR COLOR POSTSCRIPT DEVICES
      IF(IGCOLO.NE.'ON')GOTO9000
CCCCC SET A GREYSCALE COLOR
      IFLAG=0
      IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1   IBACC2(3).GE.0)IFLAG=1
C
      IF(IFLAG.EQ.0)THEN
        IF(JCOL.LT.0)THEN
          AVAL=REAL(JCOL)/100.
          AVAL=ABS(AVAL)
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.1.0)AVAL=1.0
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC SET A NON-GRAY SCALE COLOR
        ELSE
          IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
          AVAL=REAL(IRED(JCOL))/255.
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          AVAL=REAL(IGREEN(JCOL))/255.
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          AVAL=REAL(IBLUE(JCOL))/255.
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ELSE
        AVAL=REAL(IBACC2(1))/255.
        NCSTR=0
        NCHTOT=7
        NCHDEC=5
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        AVAL=REAL(IBACC2(2))/255.
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        AVAL=REAL(IBACC2(3))/255.
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+10
        ICSTR(NCSTR:NCSTR2)='setrgbcolor'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
CCCCC FILL A RECTANGLE WITH THE COLOR
      PX(1)=0.
      PX(2)=100.
      PX(3)=100.
      PX(4)=0.
      PX(5)=0.
      PY(1)=0.
      PY(2)=0.
      PY(3)=100.
      PY(4)=100.
      PY(5)=0.
      NP=5
      NCHTOT=5
      NCSTR=0
      CALL GRTRSD(PX(1),PY(1),IX,IY,ISUBN0)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(6:6)=' '
      NCSTR=6
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(12:13)=' m'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      DO8811I=2,NP
      NCSTR=0
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(6:6)=' '
      NCSTR=6
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(12:13)=' l'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8811 CONTINUE
      ICSTR(1:35)='closepath fill 0. 0. 0. setrgbcolor'
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C  JANUARY, 1990.  ADD CODE FOR ENCAPSULATED POSTSCRIPT.  NOTE THAT EACH
C  PAGE MUST BE SELF-CONTAINED, SO MIMIC CODE FROM GREXIT AND GRINDE USED
C  BY REGULAR POSTSCRIPT.
C
 8710 CONTINUE
      IVALT=IPSTPN
      IF(IMODE3.NE.'DEV3')THEN
        IVALT=IPSTPN
        IF(IGUNIT.EQ.IPL2NU)IVALT=IPSTP2
      ENDIF
      IF(IVALT.LE.1)GOTO8719
      ICSTR(1:8)='showpage'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:3)='end'
      NCSTR=3
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:8)='grestore'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='%%Trailer'
      NCSTR=9
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:33)='% END OF DATAPLOT POSTSCRIPT PAGE'
      NCSTR=33
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC JANUARY 1993.  CHECK FOR LEADING SPACE ON "%%" LINES
 8719 CONTINUE
      ICSTR(1:23)='%!PS-Adobe-2.0 EPSF-1.2'
      NCSTR=23
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:19)='%%Creator: Dataplot'
      NCSTR=19
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:46)='%%Title: Dataplot Encapsulated Postscript File'
      NCSTR=46
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:20)='%%CreationDate: NULL'
      NCSTR=20
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:40)='%%DocumentFonts: Times-Roman Times-Bold '
      ICSTR(41:69)='Times-Italic Times-BoldItalic'
      NCSTR=69
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:46)='%%+ Helvetica Helvetica-Bold Helvetica-Oblique'
      ICSTR(47:76)=' Helvetica-BoldOblique Courier'
      NCSTR=76
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:33)='%%+ Courier-Bold Courier-Oblique '
      ICSTR(34:53)=' Courier-BoldOblique'
      NCSTR=53
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  OCTOBER 1991.  ADDITIONAL FONTS ADDED
      ICSTR(1:42)='%%+ AvantGarde-Book AvantGarde-BookOblique'
      ICSTR(43:81)=' AvantGarde-Demi AvantGarde-DemiOblique'
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Bookman-Demi Bookman-DemiItalic       '
      ICSTR(43:81)='Bookman-Light Bookman-LightItalic      '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Helvetica-Narrow Helvetica-Narrow-Bold'
      ICSTR(43:81)=' Helvetica-Narrow-BoldOblique          '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Helvetica-Narrow-Oblique              '
      ICSTR(43:81)='NewCentury-Schlbk-Bold                 '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ NewCentury-Schlbk-Italic              '
      ICSTR(43:81)='NewCenturySchlbk-BoldItalic            '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Palatino-Roman Palatino-Bold          '
      ICSTR(43:81)='Palatino-Italic Palatino-BoldItalic    '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ ZapfChancery-Medium Italic Symbol     '
      ICSTR(43:81)='                                       '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  END CHANGE
C  JANUARY 1993.  FOLLOWING 9 LINES MOVED
CCCCC ICSTR(1:48)='% BoundingBox given in Postscript default units '
CCCCC ICSTR(49:75)='(72 ppi), accomodate either'
CCCCC NCSTR=75
CCCCC IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC ICSTR(1:41)='% portrait or landscape mode at 11 inches'
CCCCC NCSTR=41
CCCCC IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC NOVEMBER 1996.  FOLLOWING SECTION MODIFIED TO BASE BOUNDING BOX
CCCCC ON WHETHER OR NOT USE LANDSCAPE, PORTRAIT, OR LANDSCAPE
CCCCC WORDPERFECT (LAN2) MODE USED.
      IF(IORNSW.EQ.'PORT')THEN
        ICSTR(1:26)='%%BoundingBox: 0 0 612 792'
        NCSTR=26
      ELSEIF(IORNSW.EQ.'LAND')THEN
        ICSTR(1:26)='%%BoundingBox: 0 0 792 612'
        NCSTR=26
      ELSEIF(IORNSW.EQ.'LAN2')THEN
        ICSTR(1:26)='%%BoundingBox: 0 0 612 468'
        NCSTR=26
      ELSEIF(IORNSW.EQ.'SQUA')THEN
        ICSTR(1:26)='%%BoundingBox: 0 0 612 612'
        NCSTR=26
      ELSE
        ICSTR(1:26)='%%BoundingBox: 0 0 792 792'
        NCSTR=26
      ENDIF
CCCCC NCHTOT=5
CCCCC IJUNK=11*72
CCCCC CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
CCCCC NCSTR=NCSTR+1
CCCCC ICSTR(NCSTR:NCSTR)=' '
CCCCC CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='%%EndComments'
      NCSTR=13
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC JANUARY 1993.  FOLLOWING 9 LINES MOVED HERE.
CCCCC NOVEMBER 1996.  FOLLOWING SECTION COMMENTED OUT
CCCCC ICSTR(1:48)='% BoundingBox given in Postscript default units '
CCCCC ICSTR(49:75)='(72 ppi), accomodate either'
CCCCC NCSTR=75
CCCCC IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC ICSTR(1:41)='% portrait or landscape mode at 11 inches'
CCCCC NCSTR=41
CCCCC IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:43)='% DATAPLOT POSTSCRIPT DRIVER, JANUARY, 1990'
      NCSTR=43
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:43)='% PROLOG SECTION: DATAPLOT DEFINITIONS     '
      NCSTR=43
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='15 dict begin'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:43)='% REDEFINE "showpage" TO BE A NULL OPERATOR'
      NCSTR=43
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:16)='/showpage {} def'
      NCSTR=16
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:44)='%DEFINE PROCEDURE "rightshow" TO PRINT RIGHT'
      ICSTR(45:72)=' JUSTIFIED STRING.  CALL BY:'
      NCSTR=72
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:20)='% (STRING) rightshow'
      NCSTR=20
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/rightshow'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IX exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   IY moveto'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:44)='%DEFINE PROCEDURE "centshow" TO PRINT CENTER'
      ICSTR(45:72)=' JUSTIFIED STRING.  CALL BY:'
      NCSTR=72
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:19)='% (STRING) centshow'
      NCSTR=19
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='/centshow'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:8)='   2 div'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IX exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   IY moveto'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:44)='%DEFINE PROCEDURE "leftshow" TO PRINT LEFT  '
      ICSTR(45:72)=' JUSTIFIED STRING.  CALL BY:'
      NCSTR=72
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:19)='% (STRING) leftshow'
      NCSTR=19
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='/leftshow'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:25)='  {IX IY moveto show} def'
      NCSTR=25
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "vrightshow" TO PRINT RIGHT'
      ICSTR(46:82)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=82
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:28)='% newpath IX IY moveto gsave'
      NCSTR=28
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:30)='% (STRING) vrightshow grestore'
      NCSTR=30
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:11)='/vrightshow'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IY exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='   IX exch moveto'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='    90 rotate'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "vcentshow" TO PRINT CENTER'
      ICSTR(46:82)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=82
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:28)='% newpath IX IY moveto gsave'
      NCSTR=28
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:29)='% (STRING) vcentshow grestore'
      NCSTR=29
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/vcentshow'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:8)='   2 div'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IY exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='   IX exch moveto'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='     90 rotate'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "vleftshow" TO PRINT LEFT  '
      ICSTR(46:82)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=82
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:28)='% newpath IX IY moveto gsave'
      NCSTR=28
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:29)='% (STRING) vleftshow grestore'
      NCSTR=29
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/vleftshow'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:36)='  {IX IY moveto 90 rotate show} def'
      NCSTR=36
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:52)='% DEFINE PROCEDURE "l" AS ABBREVIATION OF lineto'
      NCSTR=52
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:15)='/l {lineto} def'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:52)='% DEFINE PROCEDURE "m" AS ABBREVIATION OF moveto'
      NCSTR=52
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:15)='/m {moveto} def'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      APOINT=ANUMVP*2.0/100.
      IPOINT=INT(APOINT)
C  FOLLOWING CODE MODIFIED OCTOBER 1991.
      IJUNK=7
      DO8695I=1,IPSTMF
        IF(IPSTFN.NE.IPSTT1(I))GOTO8695
        IJUNK=I
        GOTO8697
 8695 CONTINUE
 8697 CONTINUE
      ICSTR(1:1)='/'
      ICSTR(2:41)=IPSTT2(IJUNK)(1:40)
      ICSTR(42:51)=' findfont '
      NCHTOT=3
      NCSTR=51
      CALL GRTRIN(IPOINT,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      NCSTR2=NCSTR+17
      ICSTR(NCSTR:NCSTR2)=' scalefont setfont'
      NCSTR=NCSTR2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC ICSTR(1:33)='/Times-Roman            findfont '
CCCCC IF(IPSTFN.EQ.'TBOL')
CCCCC1ICSTR(1:23)='/Times-Bold            '
CCCCC IF(IPSTFN.EQ.'TITA')
CCCCC1ICSTR(1:23)='/Times-Italic          '
CCCCC IF(IPSTFN.EQ.'TBIT')
CCCCC1ICSTR(1:23)='/Times-BoldItalic      '
CCCCC IF(IPSTFN.EQ.'HELV')
CCCCC1ICSTR(1:23)='/Helvetica             '
CCCCC IF(IPSTFN.EQ.'HELB')
CCCCC1ICSTR(1:23)='/Helvetica-Bold        '
CCCCC IF(IPSTFN.EQ.'HELO')
CCCCC1ICSTR(1:23)='/Helvetica-Oblique     '
CCCCC IF(IPSTFN.EQ.'HEBO')
CCCCC1ICSTR(1:23)='/Helvetica-BoldOblique '
CCCCC IF(IPSTFN.EQ.'COUR')
CCCCC1ICSTR(1:23)='/Courier               '
CCCCC IF(IPSTFN.EQ.'CBOL')
CCCCC1ICSTR(1:23)='/Courier-Bold          '
CCCCC IF(IPSTFN.EQ.'COBL')
CCCCC1ICSTR(1:23)='/Courier-Oblique       '
CCCCC IF(IPSTFN.EQ.'CBOB')
CCCCC1ICSTR(1:23)='/Courier-BoldOblique   '
CCCCC NCSTR=33
CCCCC NCHTOT=3
CCCCC CALL GRTRIN(IPOINT,NCHTOT,ICSTR,NCSTR)
CCCCC ICSTR(37:54)=' scalefont setfont'
CCCCC NCSTR=54
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C  END CHANGE
      IPSTFC=IPSTFN
      IPSTPS=IPOINT
      IPSTPC=IPOINT
      IPSTPO=IPOINT
      IPSTFO=IPSTFN
C
      ICSTR(1:41)='gsave    % SAVE INITIAL GRAPHICS STATE'
      NCSTR=41
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  ADD FOLLOWING LINES JANUARY, 1990.
      ICSTR(1:11)='%%EndProlog'
      NCSTR=11
CCCCC JANUARY 1993.  ADD FOLLOWING LINE
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:11)='0 0 moveto '
      NCSTR=11
      XPPI=PSTPPI
      YPPI=PSTPPI
      XSCALE=72./XPPI
      YSCALE=72./YPPI
      NCSTR=11
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(XSCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(22:22)=' '
      NCSTR=22
      CALL GRTRRE(YSCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(33:39)=' scale '
      NCSTR=39
C
      IF(IORNSW.EQ.'LAND')THEN
        IVTEMP=IPSTBM
        IHTEMP=IPSTLM
      ELSEIF(IORNSW.EQ.'LAN2')THEN
        IVTEMP=IPS2BM
        IHTEMP=IPS2LM
      ELSEIF(IORNSW.EQ.'PORT')THEN
        IVTEMP=IPS2BM
        IHTEMP=IPS2LM
      ELSEIF(IORNSW.EQ.'SQUA')THEN
        IVTEMP=IPS2BM
        IHTEMP=IPS2LM
      ELSE
        IVTEMP=IPSTBM
        IHTEMP=IPSTLM
      END IF
      IXTR=IHTEMP
      IYTR=IVTEMP
      IF(IORNSW.NE.'PORT' .AND. IORNSW.NE.'LAN2' .AND. IORNSW.NE.'SQUA')
     1IXTR=IHTEMP+INT(ANUMVP+0.5)
      NCHTOT=5
      CALL GRTRIN(IXTR,NCHTOT,ICSTR,NCSTR)
      ICSTR(45:45)=' '
      NCSTR=45
      CALL GRTRIN(IYTR,NCHTOT,ICSTR,NCSTR)
      ICSTR(51:61)=' translate '
C
      ICSTR(62:63)=' 0'
      IF(IORNSW.NE.'PORT' .AND. IORNSW.NE.'LAN2' .AND. IORNSW.NE.'SQUA')
     1ICSTR(62:63)='90'
      ICSTR(64:71)=' rotate '
      NCSTR=71
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC OCTOBER 1993.  FILL BACKGROUND FOR COLOR POSTSCRIPT.
CCCCC NOTE THAT THIS WILL ONLY BE DONE FOR COLOR POSTSCRIPT DEVICES
      IF(IGCOLO.NE.'ON')GOTO9000
CCCCC SET A GREYSCALE COLOR
      IFLAG=0
      IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1   IBACC2(3).GE.0)IFLAG=1
C
      IF(IFLAG.EQ.0)THEN
        IF(JCOL.LT.0)THEN
          AVAL=REAL(JCOL)/100.
          AVAL=ABS(AVAL)
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.1.0)AVAL=1.0
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC SET A NON-GRAY SCALE COLOR
        ELSE
          IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
          AVAL=REAL(IRED(JCOL))/255.
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          AVAL=REAL(IGREEN(JCOL))/255.
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          AVAL=REAL(IBLUE(JCOL))/255.
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ELSE
        AVAL=REAL(IBACC2(1))/255.
        NCSTR=0
        NCHTOT=7
        NCHDEC=5
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        AVAL=REAL(IBACC2(2))/255.
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        AVAL=REAL(IBACC2(3))/255.
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+10
        ICSTR(NCSTR:NCSTR2)='setrgbcolor'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
CCCCC FILL A RECTANGLE WITH THE COLOR
      PX(1)=0.
      PX(2)=100.
      PX(3)=100.
      PX(4)=0.
      PX(5)=0.
      PY(1)=0.
      PY(2)=0.
      PY(3)=100.
      PY(4)=100.
      PY(5)=0.
      NP=5
      NCHTOT=5
      NCSTR=0
      CALL GRTRSD(PX(1),PY(1),IX,IY,ISUBN0)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(6:6)=' '
      NCSTR=6
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(12:13)=' m'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      DO8911I=2,NP
      NCSTR=0
      CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(6:6)=' '
      NCSTR=6
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(12:13)=' l'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8911 CONTINUE
      ICSTR(1:35)='closepath fill 0. 0. 0. setrgbcolor'
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  TO PRINT CURRENT PAGE - "^,"                    **
C               **  REFERENCE - QUIC PROGRAMMING MANUAL             **
C               **  PAGES 5-10, 5-11
C               ******************************************************
C
 9100 CONTINUE
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:2)=','
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  1) CLEAR THE BUFFER (TO FINISH CURRENT PLOT)    **
C               **     AND OPTIONALLY WAIT FOR CARRIAGE RETURN      **
C               **  2) CHECK THE "INPUT" BUFFER FOR CONFIG AND      **
C               **     WINDOW EVENTS                                **
C               **  3) CLEAR THE WINDOW                             **
C               ******************************************************
C
 9600 CONTINUE
      IF(IX11OF.EQ.'OFF')GOTO9000
#ifdef HAVE_X11
      CALL XCLEAR
      IF(IX11PA.EQ.'ON')THEN
CCCCC   WRITE(ICOUT,9605)
C9605   FORMAT('PRESS CARRIAGE RETURN TO CONTINUE:')
CCCCC   CALL DPWRST('XXX','BUG ')
CCCCC   READ(IRD,'(A1)')IA
      ENDIF
      CALL XCHECK(IEXPOSE,IERRNO)
      IF(IERRNO.NE.0)THEN
        WRITE(ICOUT,9621)
 9621   FORMAT(1X,'WARNING: X11 GRAPHICS WINDOW HAS BEEN DESTROYED.')
        CALL DPWRST('XXX','BUG ')
        IX11OF='OFF'
        GOTO9000
      ENDIF
      IF(IEXPOSE.EQ.1 .AND. IX11PM.EQ.'ON')THEN
        IJUNK=0
        CALL XUPDAT(IJUNK)
      ENDIF
      IXTEMP = INT(ANUMHP+0.5)
      IYTEMP = INT(ANUMVP+0.5)
      IF(IORNSW.EQ.'LAND')THEN
        IORIEN=0
      ELSE IF(IORNSW.EQ.'PORT')THEN
        IORIEN=1
      ELSE IF(IORNSW.EQ.'SQUA')THEN
        IORIEN=3
      ELSE
        IORIEN=2
      END IF
      IPIX=0
      IF(IX11PM.EQ.'ON')IPIX=1
      CALL XERASE(IXTEMP,IYTEMP,IORIEN,IXPIX,IYPIX,JCOL,IPIX)
      ANUMHP=REAL(IXPIX)
      ANUMVP=REAL(IYPIX)
      NUMHPP=INT(ANUMHP+0.1)
      NUMVPP=INT(ANUMVP+0.1)
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
10000 CONTINUE
CTURB CALL TCERSC(ICOLT)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
CCCCC IGKSCL = 1: CLEAR ALWAYS
CCCCC IGKSCL = 0: CLEAR CONDITIONALLY
      IGKSCL=1
C
#ifdef HAVE_GKS
      CALL GCLRWK(IGKSWK, IGKSCL)
      ITNR=1
      XMIN=0.0
      XMAX=1.0
      YMIN=0.0
      YMAX=1.0
      CALL GSWN(ITNR,XMIN,XMAX,YMIN,YMAX)
      NINDX=1
CCCCC CALL GSCR(IGKSWK,NINDX,1.0,1.0,1.0)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               **  4) GIF                                          **
C               **  5) TIFF ?                                       **
C               ******************************************************
C
C     NOTE 3/2008: SPECIFY WHETHER IMAGE WILL BE "TRUE COLOR" OR
C                  "FIXED" COLOR.
12000 CONTINUE
      IXTEMP=INT(ANUMHP)
      IYTEMP=INT(ANUMVP)
C
      IF(IGUNIT.EQ.44)THEN
        DO12001I=80,1,-1
          ILAST=I
          IF(IPL2NA(I:I).NE.' ')GOTO12009
12001   CONTINUE
        ILAST=1
12009   CONTINUE
      ELSE
        DO12010I=80,1,-1
          ILAST=I
          IF(IPL1NA(I:I).NE.' ')GOTO12019
12010   CONTINUE
        ILAST=1
12019   CONTINUE
      ENDIF
C
      DO12020I=1,ILAST
        CALL DPCOAN(IPL1NA(I:I),IJUNK)
        IADE(I)=IJUNK
12020 CONTINUE
      IADE(ILAST+1)=0
      ICOLTY=0
      IF(IGDCO.EQ.'TRUE')ICOLTY=1
C
C     FOR BACKGROUND COLOR:
C
C        1. "TRUE" COLOR MODE ON
C           A. RGB BACKGROUND COLOR BEEN SET
C           B. RGB BACKGROUND COLOR NOT SET
C        2. "FIXED" COLOR MODE ON
C
      IFLAG=0
      JREDT=-1
      JGREENT=-1
      JBLUET=-1
#ifdef HAVE_GD
      IF(IGDCO.EQ.'FIXE')THEN
        CALL GDERAS(IXTEMP,IYTEMP,JCOL,ICOLTY,IADE)
      ELSE
C
C       FOR TRUE COLOR, DRAW FILLED RECTANGLE AFTER GDERAS
C       ROUTINE
C
        IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1     IBACC2(3).GE.0)IFLAG=1
        IF(IFLAG.EQ.1)THEN
          AFACT=1.0
          IF(IRGBMX.NE.255)THEN
            AFACT=REAL(IRGBMX)/255.
          ENDIF
          AREDT=REAL(IBACC2(1))/AFACT
          AGREENT=REAL(IBACC2(2))/AFACT
          ABLUET=REAL(IBACC2(3))/AFACT
          IREDT=INT(AREDT)
          IGREENT=INT(AGREENT)
          IBLUET=INT(ABLUET)
          IF(IREDT.GT.255)IREDT=255
          IF(IGREENT.GT.255)IGREENT=255
          IF(IBLUET.GT.255)IBLUET=255
        ENDIF
        CALL GDERAS(IXTEMP,IYTEMP,JCOL,ICOLTY,IADE)
        IXTMP(1)=0
        IYTMP(1)=0
        IXTMP(2)=IXTEMP
        IYTMP(2)=IYTEMP
        NPTS=2
        IF(IFLAG.EQ.1)THEN
          IF(IREDT.GE.0 .AND. IGREENT.GE.0 .AND. IBLUET.GE.0)THEN
            CALL GDSEC2(IREDT,IGREENT,IBLUET,IRET)
          ELSE
            IF(JCOL.GE.1 .AND. JCOL.LE.163)THEN
              IREDT=IRED(JCOL)
              IGREENT=IGREEN(JCOL)
              IBLUET=IBLUE(JCOL)
              CALL GDSEC2(IREDT,IGREENT,IBLUET,IRET)
            ELSEIF(JCOL.GE.-100 .AND. JCOL.LE.-1)THEN
              AVAL=255.*ABS(REAL(JCOL)/100.)
              IVALT=INT(AVAL+0.01)
              IF(IVALT.LT.0)IVALT=0
              IF(IVALT.GT.255)IVALT=255
              IREDT=IVALT
              IGREENT=IVALT
              IBLUET=IVALT
              CALL GDSEC2(IREDT,IGREENT,IBLUET,IRET)
            ELSE
              CALL GDSECO(JCOL)
            ENDIF
          ENDIF
        ELSE
          IF(JCOL.GE.1 .AND. JCOL.LE.163)THEN
            IREDT=IRED(JCOL)
            IGREENT=IGREEN(JCOL)
            IBLUET=IBLUE(JCOL)
            CALL GDSEC2(IREDT,IGREENT,IBLUET,IRET)
          ELSEIF(JCOL.GE.-100 .AND. JCOL.LE.-1)THEN
            AVAL=255.*ABS(REAL(JCOL)/100.)
            IVALT=INT(AVAL+0.01)
            IF(IVALT.LT.0)IVALT=0
            IF(IVALT.GT.255)IVALT=255
            IREDT=IVALT
            IGREENT=IVALT
            IBLUET=IVALT
            CALL GDSEC2(IREDT,IGREENT,IBLUET,IRET)
          ELSE
            CALL GDSECO(JCOL)
          ENDIF
        ENDIF
        CALL GDRGFL(IXTMP,IYTMP,NPTS,JCOL)
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      NPLOT=1
COLD  CALL aqtOpenPlot(NPLOT)
COLD  CALL aqtSetPlotSize(ANUMHP,ANUMVP)
COLD  CALL aqtSetPlotTitle('Dataplot Graphics Window')
#ifdef HAVE_AQUA
      CALL aqeras(NPLOT,NUMHPP,NUMVPP,JCOL)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)            DRIVER **
C               ******************************************************
15000 CONTINUE
      IF(ILATOS.EQ.'ON')THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:13)='end{picture}'
        NCSTR=13
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:1)=IBASLC
        ICSTR(2:8)='newpage'
        NCSTR=8
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      ILATOS='ON'
C
      ICSTR(1:1)=IBASLC
      ICSTR(2:31)='setlength{ unitlength}{0.24pt}'
      ICSTR(12:12)=IBASLC
      NCSTR=31
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:1)=IBASLC
      ICSTR(2:16)='begin{picture}('
      NCSTR=16
      NCHTOT=5
      CALL GRTRIN(NUMHPP,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      NCHTOT=5
      CALL GRTRIN(NUMVPP,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=')'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(ILATCO.EQ.'ON' .AND. JCOL.NE.0)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:16)='pagecolor{    }'
        ICSTR(12:15)=ICOLT(1:4)
        NCSTR=16
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
C
      CALL DPCONA(34,IQUOTE)
C
      IF(ISVGOS.EQ.'ON')THEN
        IF(ISVGCN.GT.0)THEN
          ICSTR(1:7)='   </g>'
          NCSTR=-7
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:6)='</svg>'
          NCSTR=-6
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:26)='<!--  END OF SVG GRAPH -->'
          NCSTR=-26
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:1)=' '
          NCSTR=-1
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ELSE
        ISVGOS='ON'
      ENDIF
      ISVGCN=ISVGCN+1
C
      IF(ISVGCN.GT.1)THEN
        ICSTR(1:14)='<?xml version='
        ICSTR(15:15)=IQUOTE
        ICSTR(16:18)='1.0'
        ICSTR(19:19)=IQUOTE
        ICSTR(20:29)=' encoding='
        ICSTR(30:30)=IQUOTE
        ICSTR(31:40)='ISO-8859-1'
        ICSTR(41:41)=IQUOTE
        ICSTR(42:53)=' standalone='
        ICSTR(54:54)=IQUOTE
        ICSTR(55:56)='no'
        ICSTR(57:57)=IQUOTE
        ICSTR(58:59)='?>'
        NCSTR=-59
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:21)='<!DOCTYPE svg PUBLIC '
        ICSTR(22:22)=IQUOTE
        ICSTR(23:50)='-//W3C//DTD SVG 20010904//EN'
        ICSTR(51:51)=IQUOTE
        NCSTR=-51
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:5)='     '
        ICSTR(6:6)=IQUOTE
        ICSTR(7:50)='http://www.w3.org./TR/2001/REC-SVG-20010904/'
        ICSTR(51:63)='DTD/svg10.dtd'
        ICSTR(64:64)=IQUOTE
        ICSTR(65:65)='>'
        NCSTR=-65
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        IF(ISVGSS(1:3).EQ.'EXT')THEN
          NCSTR=22
          ICSTR(1:NCSTR)='<?xml-stylesheet href='
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCTEMP=1
          DO16001I=80,1,-1
            NCTEMP=I
            IF(ISVGSN(I:I).NE.' ')GOTO16003
16001     CONTINUE
16003     CONTINUE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+NCTEMP-1)=ISVGSN(1:NCTEMP)
          NCSTR=NCSTR+NCTEMP
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=22
          ICSTR(1:NCSTR)='                 type='
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+7)='text/css'
          NCSTR=NCSTR+8
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)='?>'
          NCSTR=-(NCSTR+1)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
C
        ICSTR(1:11)='<svg xmlns='
        ICSTR(12:12)=IQUOTE
        ICSTR(13:38)='http://www.w3.org/2000/svg'
        ICSTR(39:39)=IQUOTE
        NCSTR=-39
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:17)='     xmlns:xlink='
        ICSTR(18:18)=IQUOTE
        ICSTR(19:46)='http://www.w3.org/1999/xlink'
        ICSTR(47:47)=IQUOTE
        ICSTR(48:58)=' xml:space='
        ICSTR(59:59)=IQUOTE
        ICSTR(60:67)='preserve'
        ICSTR(68:68)=IQUOTE
        NCSTR=-68
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCHTOT=6
        IXTEMP=INT(ANUMHP)
        IYTEMP=INT(ANUMVP)
C
        ICSTR(1:11)='     width='
        ICSTR(12:12)=IQUOTE
        NCSTR=12
        CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+7)=' height='
        NCSTR=NCSTR+8
        ICSTR(NCSTR:NCSTR)=IQUOTE
        CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:13)='     viewBox='
        ICSTR(14:14)=IQUOTE
        ICSTR(15:18)='0 0 '
        NCSTR=18
        CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='>'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:9)='   <desc>'
        NCSTR=-9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:47)='   SVG GRAPHIC CREATED BY DATAPLOT: SEPTEMBER, '
        ICSTR(48:60)='2010 VERSION.'
        NCSTR=-60
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:10)='   </desc>'
        NCSTR=-10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:9)='   <g id='
        ICSTR(10:10)=IQUOTE
        ICSTR(11:15)='graph'
        NCSTR=15
        NCHTOT=1
        IF(ISVGCN.GT.9)NCHTOT=2
        IF(ISVGCN.GT.99)NCHTOT=3
        IF(ISVGCN.GT.999)NCHTOT=4
        IF(ISVGCN.GT.9999)NCHTOT=5
        CALL GRTRIN(ISVGCN,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='>'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       CREATE BACKGROUND VIA FILLED RECTANGLE
C
        ICSTR(1:11)='   <rect x='
        NCSTR=-11
        ICSTR(12:12)=IQUOTE
        ICSTR(13:13)='0'
        ICSTR(14:14)=IQUOTE
        ICSTR(15:17)=' y='
        ICSTR(18:18)=IQUOTE
        ICSTR(19:19)='0'
        ICSTR(20:20)=IQUOTE
        NCSTR=-20
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:15)='         width='
        ICSTR(16:16)=IQUOTE
        ICSTR(17:20)='100%'
        ICSTR(21:21)=IQUOTE
        ICSTR(22:29)=' height='
        ICSTR(30:30)=IQUOTE
        ICSTR(31:34)='100%'
        ICSTR(35:35)=IQUOTE
        NCSTR=-35
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        IF(ISVGSS(1:3).EQ.'EXT')THEN
          ICSTR(1:17)='           class='
          ICSTR(18:18)=IQUOTE
          ICSTR(19:28)='background'
          ICSTR(29:29)=IQUOTE
          NCSTR=-29
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          ICSTR(1:15)='         style='
          ICSTR(16:16)=IQUOTE
          ICSTR(17:29)='stroke:none; '
          ICSTR(30:35)='fill:#'
          NCSTR=35
          NCHTOT=2
          IFLAG=0
          IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1       IBACC2(3).GE.0)IFLAG=1
          IF(IFLAG.EQ.0)THEN
            JTEMP=JCOL
            IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JTEMP=1
            JRED=IRED(JTEMP)
            CALL DPCONX(JRED,ICJUNK)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
            JGREEN=IGREEN(JTEMP)
            CALL DPCONX(JGREEN,ICJUNK)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
            JBLUE=IBLUE(JTEMP)
            CALL DPCONX(JBLUE,ICJUNK)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+2
            ICSTR(NCSTR:NCSTR)=';'
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=IQUOTE
            ICSTR(NCSTR+1:NCSTR+2)='/>'
            NCSTR=NCSTR+2
            NCSTR=-NCSTR
          ELSE
            JRED=IBACC2(1)
            CALL DPCONX(JRED,ICJUNK)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
            JGREEN=IBACC2(2)
            CALL DPCONX(JGREEN,ICJUNK)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+1
            JBLUE=IBACC2(3)
            CALL DPCONX(JBLUE,ICJUNK)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
            NCSTR=NCSTR+2
            ICSTR(NCSTR:NCSTR)=';'
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=IQUOTE
            ICSTR(NCSTR+1:NCSTR+2)='/>'
            NCSTR=NCSTR+2
            NCSTR=-NCSTR
          ENDIF
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
C     DO A SHOW PAGE TO GENERATE THE CURRENT PLOT.
C
C     NOTE: SINCE GRINDE ESSENTIALLY STARTS A NEW PAGE, DO NOT GENERATE
C           A PAGE ERASE FOR THE FIRST PLOT (USER CAN ENTER AN ERASE
C           COMMAND IF THIS IS DESIRED).
C
17000 CONTINUE
C
#ifdef HAVE_CAIRO
C
C     2023/10: ONLY CALL CACHEC FOR X11 MODEL
C
      IF(IMODEL.EQ.'X11')THEN
        CALL CACHEC(IEXPOSE,IERRNO)
        IF(IERRNO.NE.0)THEN
          WRITE(ICOUT,17621)
17621     FORMAT(1X,'WARNING: X11 GRAPHICS WINDOW HAS BEEN DESTROYED.')
          CALL DPWRST('XXX','BUG ')
          GOTO9000
        ENDIF
      ENDIF
C
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IF(IMODEL.EQ.'POST')IVAL1=2
      IF(IMODEL.EQ.'PDF')IVAL1=3
      IF(IMODEL.EQ.'SVG')IVAL1=4
      IF(IMODEL.EQ.'QUAR')IVAL1=5
      IF(IMODEL.EQ.'PNG')IVAL1=6
      IF(IMODEL.EQ.'WIND')IVAL1=7
      IF(IMODEL.EQ.'EPS')IVAL1=8
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)THEN
        IVAL2=2
        IPSTPN=IPSTPN+1
      ELSEIF(IGUNIT.EQ.IPL2NU)THEN
        IVAL2=3
        IPSTP2=IPSTP2+1
      ENDIF
      ATEMP=255.0
      IFLAG=0
      IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1  IBACC2(3).GE.0)IFLAG=1
      IF(IVAL1.EQ.1)IFLAG=0
      IF(IFLAG.EQ.0)THEN
        ARED=REAL(IRED(JCOL))/ATEMP
        AGREEN=REAL(IGREEN(JCOL))/ATEMP
        ABLUE=REAL(IBLUE(JCOL))/ATEMP
      ELSE
        ARED=REAL(IBACC2(1))/ATEMP
        AGREEN=REAL(IBACC2(2))/ATEMP
        ABLUE=REAL(IBACC2(3))/ATEMP
      ENDIF
      IXRET=INT(ANUMHP+0.5)
      IYRET=INT(ANUMVP+0.5)
C
      IF(IVAL2.EQ.1)THEN
        CALL CAREND(IVAL2,IVAL1)
        CALL CACHEC(IEXPOSE,IERRNO)
        CALL CAERAS(IVAL2,IVAL1,ANUMHP,ANUMVP,ARED,AGREEN,ABLUE,
     1              IXRET,IYRET)
      ELSE
        IF(IVAL2.EQ.2 .AND. IPSTPN.EQ.1)GOTO9000
        IF(IVAL2.EQ.3 .AND. IPSTP2.EQ.1)GOTO9000
        CALL CAREND(IVAL2,IVAL1)
        CALL CAERAS(IVAL2,IVAL1,ANUMHP,ANUMVP,ARED,AGREEN,ABLUE,
     1              IXRET,IYRET)
      ENDIF
C
C     RESET SIZE OF WINDOW IF NEEDED
C
      IF(IVAL1.EQ.1 .AND. IVAL2.EQ.1)THEN
        ANUMHP=REAL(IXRET)
        ANUMVP=REAL(IYRET)
        NUMHPP=INT(ANUMHP+0.1)
        NUMVPP=INT(ANUMVP+0.1)
      ENDIF
C
      IF(IVAL2.EQ.1)THEN
        CALL CACHEC(IEXPOSE,IERRNO)
      ENDIF
      IF(IERRNO.NE.0)THEN
        WRITE(ICOUT,17621)
        CALL DPWRST('XXX','BUG ')
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'ERSC')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRERSC--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9014)JCOL,IGBAUD,AGERDE,ICHAPS,INULLI
 9014   FORMAT('JCOL,IGBAUD,AGERDE,ICHAPS,INULLI = ',2I8,G15.7,2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9015)IESCC,IFFC,ISYNC,IERRG4
 9015   FORMAT('IESCC,IFFC,ISYNC,IERRG4 = ',3(A1,2X),A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GREXIT
C
C     PURPOSE--SHUT DOWN A DEVICE BEFORE EXITING DATAPLOT TO DEFAULT
C              POWER-ON CONDITIONS.  PERFORMS FUNCTION ANALOGOUS TO
C              GRINDE (GRINDE DONE WHEN DEVICE FIRST TURNED ON, GREXIT
C              WHEN EXIT DATAPLOT).  THIS ROUTINE REQUIRED BY MANY LASER
C              PRINTERS TO FORCE A PAGE ERASE BEFORE EXITING.
C
C     WRITTEN BY--ALAN HECKERT
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2899
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--89.2
C     ORIGINAL VERSION--JANUARY   1989.
C     UPDATED         --MARCH     1990.  X11 DEVICE ADDED (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --AUGUST   1992. UPDATE FOR HP-GL (LASER JET III)
C     UPDATED         --JANUARY  1993. POSTSCRIPT "%%" LINES (ALAN)
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE, OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT LATEX DRIVER
C     UPDATED         --APRIL    2009. IMPLEMENT UNIX LIBPLOT LIBRARY
C     UPDATED         --APRIL    2009. REMOVE "XXXX",RAMTEK, PCL, PRIN
C     UPDATED         --NOVEMBER 2015. IDEVO3 OPTION
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      DEVICE DRIVERS (CAIRO, WMF, D3)
C
C-----NON-COMMON VARIABLES (GRAPHICS)-----------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*130 ICSTR
      CHARACTER*130 IATEMP
      CHARACTER*4 IERROR
      CHARACTER*4 ISUBN0
      CHARACTER*4 ISUBRO
      CHARACTER*1 ICARAT
      INTEGER IADE(81)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOF2.INC'
C
      CHARACTER*4 IQWNFL
      COMMON/QUICKW5/IQWNFL
C
CCCCC CHARACTER*80 IFILE1
      CHARACTER (LEN=MAXFNC) :: IFILE1
      CHARACTER*12 ISTAT1
      CHARACTER*12 IFORM1
      CHARACTER*12 IACCE1
      CHARACTER*12 IPROT1
      CHARACTER*12 ICURS1
      CHARACTER*4 IENDF1
      CHARACTER*4 IREWI1
      CHARACTER*4 IERRF1
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
C-----COMMON VARIABLES (GENERAL)--------------------------------------
C
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='EXIT'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'EXIT')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GREXIT--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,IMODE2,IMODE3
   52   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IGCODE,ISOFT,ISOFT2,ISOFT3
   54   FORMAT('IGCODE,ISOFT,ISOFT2,ISOFT3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IGUNIT,IGBAUD
   55   FORMAT('IGUNIT,IGBAUD = ',2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)IBUGG4,ISUBG4,IERRG4
   56   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 11--                                    **
C               **  TREAT THE TEKTRONIX 4027 CASE--              **
C               **  (A COLOR TERMINAL).                          **
C               ***************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               ****************************************************
C               **  STEP 21--                                     **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE           **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER          **
C               **             OPERATING AND PROGRAMMING MANUAL,  **
C               **             PAGE XX.                           **
C               ****************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               ******************************************************
C
C  AUGUST 1992.  UPDATE FOR LASER JET III.
C
 2200 CONTINUE
      ICSTR(1:3)='SP;'
      NCSTR=3
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(IMODE3.NE.'LJET')GOTO9000
      ICSTR(1:1)=IESCC
      ICSTR(2:2)='E'
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **********************************************************
C
 2300 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  UNIX LIBPLOT LIBRARY                                **
C               **********************************************************
C
 2600 CONTINUE
      IERR=0
#ifdef HAVE_LIBPLOT
      CALL PLEND(IERR)
#endif
      IF(IERR.EQ.1)THEN
        WRITE(ICOUT,2601)
 2601   FORMAT('***** ERROR FROM LIBPLOT DEVICE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,2603)
 2603   FORMAT('      ERROR OCCURED IN CALL TO  pl_closepl  ROUTINE.')
        CALL DPWRST('XXX','BUG ')
      ELSEIF(IERR.EQ.2)THEN
        WRITE(ICOUT,2601)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,2613)
 2613   FORMAT('      ERROR OCCURED IN CALL TO  pl_deletepl  ROUTINE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 33--                                    **
C               **  TREAT THE CGM     (DEVICE-INDEPENDENT) CASE  **
C               **  1) CHECK IF A "PICTURE" IS CURRENTLY ACTIVE  **
C               **  2) END OF METAFILE                           **
C               ***************************************************
C
 3300 CONTINUE
      IF(ICGMSW.EQ.'ON')THEN
        ICSTR(1:7)='ENDPIC;'
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      ICSTR(1:6)='ENDMF;'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               **  1) CHECK IF A "PICTURE" IS CURRENTLY ACTIVE  **
C               **  2) END OF METAFILE                           **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  USE CALCOMP LIBRARY ROUTINE                     **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      IPEN=999
      XNEW=0.
      YNEW=0.
#ifdef HAVE_CALCOMP
      CALL PLOT(XNEW,YNEW,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
C
C  ILAHSW  = ON IF GRAPHICS MODE SET, OFF IF NORMAL VIDEO MODE SET
C
CCCCC IF(ILAHSW.EQ.'ON')THEN
        IPEN=999
        XNEW=0.
        YNEW=0.
#ifdef HAVE_LAHEY_CALCOMP
        CALL PLOT(XNEW,YNEW,IPEN)
#endif
CCCCC ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
#ifdef HAVE_OPEN_GL
      CALL GLEND()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL IScreenQuit('C')
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IHAND2=1
#ifdef HAVE_WINTERACTER
CCCCC CALL WindowCloseChild(IHAND2)
      CALL WindowClose()
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO INITIALIZE DEVICE--                          **
C               **  USE THE 70 OP CODE (= RESET)                    **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 , B-1, AND E-1             **
C               ******************************************************
C
 5100 CONTINUE
      IPEN=999
      XNEW=0.
      YNEW=0.
#ifdef HAVE_ZETA
      CALL PLOT(XNEW,YNEW,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               **  WRITTEN BY BILL ANDERSON                        **
C               ******************************************************
C
 6600 CONTINUE
#ifdef HAVE_SUN
      CALL cfclosevws(IVSNAM)
      CALL cfclosecgi()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO INITIALIZE DEVICE---                         **
C               **  WRITE OUT AN   XX                               **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 85.1--                                     **
C               **  TREAT THE POSTSCRIPT  CASE                      **
C               **  1) PRINT THE CURRENT PAGE                       **
C               **  2) RESTORE PAGE DEFAULTS                        **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **             COOKBOOK, ADOBE SYSTEMS              **
C               **  MODIFIED JANUARY, 1990 TO MAKE "CONFORMING" STYLE*
C               ******************************************************
C
 8600 CONTINUE
      ICSTR(1:8)='showpage'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  JANUARY, 1990.  FOLLOWING 4 LINES ADDED FOR ENCAPSULATED POSTSCRIPT
      IF(IMODEL.EQ.'ENCA')THEN
        ICSTR(1:3)='end'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      ICSTR(1:8)='grestore'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  JANUARY, 1990.  FOLLOWING LINES ADDED.
      ICSTR(1:9)='%%Trailer'
      NCSTR=9
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(IMODEL.NE.'ENCA')THEN
        ICSTR(1:9)='%%Pages: '
        NCHTOT=5
        NCSTR=9
CCCCC   JANUARY 1993.  HANDLE DEVICE 2 AND DEVICE 3 SEPARATELY.
        IVALT=IPSTPN
CCCCC   IF(IMODE3.EQ.'DEV3')IVALT=IPSTP2
        IF(IGUNIT.EQ.IPL2NU)IVALT=IPSTP2
        NTEMP=IVALT
        IF(IMODE3.EQ.'DEV3' .AND. IDEVO3.EQ.'AUTO')NTEMP=1
        CALL GRTRIN(NTEMP,NCHTOT,ICSTR,NCSTR)
        IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      ICSTR(1:33)='% END OF DATAPLOT POSTSCRIPT FILE'
      NCSTR=33
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 90--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  1) PRINT CURRENT PAGE - "^,"                    **
C               **  2) RESET DEFAULTS - "^ISYNTAX00000"             **
C               **  3) TURN QUIC OFF  - "^-^PN-"                    **
C               **  REFERENCE--QUIC PROGRAMMING MANUAL              **
C               ******************************************************
C
 9100 CONTINUE
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:2)=','
      ICSTR(3:3)=ICARAT
      ICSTR(4:15)='ISYNTAX00000'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=ICARAT
      ICSTR(2:2)='-'
      ICSTR(3:3)=ICARAT
      ICSTR(4:5)='PN'
      ICSTR(6:6)=ICARAT
      ICSTR(7:7)='-'
      NCSTR=7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.NE.'OFF')CALL XEND
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
#ifdef HAVE_GKS
      CALL GDAWK(IGKSWK)
      CALL GCLWK(IGKSWK)
      CALL GCLKS
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
C
      IF(IGUNIT.EQ.44)THEN
        DO12001I=80,1,-1
          ILAST=I
          IF(IPL2NA(I:I).NE.' ')GOTO12009
12001   CONTINUE
        ILAST=1
12009   CONTINUE
      ELSE
        DO12010I=80,1,-1
          ILAST=I
          IF(IPL1NA(I:I).NE.' ')GOTO12019
12010   CONTINUE
        ILAST=1
12019   CONTINUE
      ENDIF
C
      DO12020I=1,ILAST
        CALL DPCOAN(IPL1NA(I:I),IJUNK)
        IADE(I)=IJUNK
12020 CONTINUE
      IADE(ILAST+1)=0
#ifdef HAVE_GD
      CALL GDEND(IADE)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
COLD  CALL aqtClosePlot()
#ifdef HAVE_AQUA
      CALL aqend()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
C
      ICSTR(1:1)=IBASLC
      ICSTR(2:13)='end{picture}'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(IMODEL.NE.'STAN')THEN
C
        ICSTR(1:1)=' '
        NCSTR=1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:18)='begin{verbatim}'
        NCSTR=18
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSEIF(ILATFO.EQ.'NULL')THEN
C
        ICSTR(1:1)=' '
        NCSTR=1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:16)='end{document}'
        NCSTR=16
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
        IOUNI1=IST1NU
        IFILE1=ILATFO
        ISTAT1='OLD'
        IFORM1='FORMATTED'
        IACCE1='SEQUENTIAL'
        IPROT1='READONLY'
        ICURS1='CLOSED'
        ISUBN0='CAPT'
        IERRF1='NO'
C
        IREWI1='ON'
        CALL DPOPFI(IOUNI1,IFILE1,ISTAT1,IFORM1,IACCE1,IPROT1,ICURS1,
     1                IREWI1,ISUBN0,IERRF1,IBUGG4,ISUBRO,IERROR)
        IF(IERRF1.EQ.'YES')GOTO9000
C
C  NOW LOOP THROUGH FILE (ASSUME MAXIMUM OF 1,000 LINES).
C
        DO15301I=1,1000
          IATEMP=' '
          READ(IOUNI1,15392,END=15399,ERR=15399)IATEMP
15392     FORMAT(A240)
          ILAST=1
          DO15410J=240,1,-1
            IF(IATEMP(J:J).NE.' ')THEN
              ILAST=J
              GOTO15419
            ENDIF
15410     CONTINUE
15419     CONTINUE
          ICSTR(1:ILAST)=IATEMP(1:ILAST)
          NCSTR=ILAST
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
15301   CONTINUE
15399   CONTINUE
        IENDF1='OFF'
        IREWI1='ON'
        ISUBRO='    '
        CALL DPCLFI(IOUNI1,IFILE1,ISTAT1,IFORM1,IACCE1,IPROT1,ICURS1,
     1                IENDF1,IREWI1,ISUBN0,IERRF1,IBUGG4,ISUBRO,IERROR)
        IF(IERRF1.EQ.'YES')GOTO9000
      ENDIF
      ILATOS='OFF'
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      IF(ISVGOS.EQ.'ON')THEN
        ICSTR(1:7)='   </g>'
        NCSTR=-7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:6)='</svg>'
        NCSTR=-6
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:26)='<!--  END OF SVG GRAPH -->'
        NCSTR=-26
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:1)=' '
        NCSTR=-1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ISVGOS='OFF'
        ISVGCN=0
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IF(IMODEL.EQ.'POST')IVAL1=2
      IF(IMODEL.EQ.'PDF')IVAL1=3
      IF(IMODEL.EQ.'SVG')IVAL1=4
      IF(IMODEL.EQ.'QUAR')IVAL1=5
      IF(IMODEL.EQ.'PNG')IVAL1=6
      IF(IMODEL.EQ.'WIND')IVAL1=7
      IF(IMODEL.EQ.'EPS')IVAL1=8
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
#ifdef HAVE_CAIRO
      CALL CAREND(IVAL2,IVAL1)
      CALL CAEND(IVAL2,IVAL1)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'EXIT')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GREXIT--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)NCSTR,IERRG4
 9023   FORMAT('NCSTR,IERRG4 = ',I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRFIRE(PX,PY,NP,IFIG,
     1                  IPATT,JPATT,IHORPA,IVERPA,
     1                  IDUPPA,IDDOPA,PXSPA2,PYSPA2,
     1                  PTHICK,JTHICK,PTHIC2,
     1                  ICOLF,JCOLF,ICOLP,JCOLP,
     1                  ICOLFR,ICOLFG,ICOLFB,ICOLPR,ICOLPG,ICOLPB,
     1                  IRGBFL,IPATT2)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, FILL THE REGION DEFINED
C              BY THE VERTICES AS GIVEN IN THE PX(.) AND PY(.) VECTORS.
C     NOTE--THE COORDINATES IN (PX(.),PY(.)) ARE IN
C           STANDARDIZED (0.0 TO 100.0) UNITS.
C     NOTE--THERE ARE NP SUCH COORDINATE PAIRS.
C     NOTE--THIS SUBROUTINE IS CALLED BY DPFIRE, DPSCR8, AND DPFIMA
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY   1989. SUN (BY BILL ANDERSON)
C                                       DRIVER OBSOLETE
C     UPDATED         --JANUARY   1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL     1989. ICOL MADE CHARACTER*4 (BOMB ON FILL)
C     UPDATED         --MARCH     1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY       1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY       1991. VGA/TURBOC DRIVER (JJF)
C                                       DRIVER OBSOLETE
C     UPDATED         --AUGUST    1992. POSTSCRIPT COLOR (ALAN)
C     UPDATED         --AUGUST    1992. SET ICOL TO ICOLP (ALAN)
C     UPDATED         --OCTOBER   1993. HATCH PATTERNS FOR NON-BOX AREAS
C                                       (ADD GRFIR3 ROUTINE) (ALAN)
C     UPDATED         --NOVEMBER  1993. "POLY" IN SOFTWARE (ALAN)
C     UPDATED         --JULY      1996. LAHEY DRIVER (ALAN HECKERT)
C                                       OLD STYLE CALCOMP
C                                       DRIVER OBSOLETE
C     UPDATED         --OCTOBER   1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER   1996. OPENGL DRIVER (ALAN)
C                                       USE BILL MITCHELLS OPENGL
C                                       BINDING FOR FORTRAN
C     UPDATED         --OCTOBER   1996. GKS (ALAN)
C                                       CODED, NOT TESTED
C     UPDATED         --OCTOBER   1996. BINARY CGM (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996. DISPLAY POSTSCRIPT (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER  1997. GENERAL CODED FOR GUI
C     UPDATED         --JULY      1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE      2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE      2000. MACINTOSH
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --JUNE      2000. PC PRINTER
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --JULY      2001. ADD COLOR INDEX ARGUMENT TO
C                                       CALLS TO GRFIR2.
C     UPDATED         --MARCH     2002. LATEX USING EEPIC
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --MARCH     2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH     2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL     2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL     2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                       (THESE WERE NEVER ACTUALLY IMPLENENTED)
C     UPDATED         --SEPTEMBER 2015. FIX GREYSCALE COLOR FOR SVG
C     UPDATED         --JULY      2019. TWEAK SCRATCH SPACE
C     UPDATED         --OCTOBER   2020. SUPPORT FOR RGB COLOR
C
C-----NON-COMMON VARIABLES (GRAPHICS)----------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*4 IFIG
      CHARACTER*4 IPATT
      CHARACTER*4 IHORPA
      CHARACTER*4 IVERPA
      CHARACTER*4 IDUPPA
      CHARACTER*4 IDDOPA
      CHARACTER*4 ICOLF
      CHARACTER*4 ICOLP
      CHARACTER*4 ICOL
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*1 ICOL2
      CHARACTER*2 ICJUNK
      CHARACTER*1 IQUOTE
      CHARACTER*4 IPATT2
      CHARACTER*4 IFLAG
C
      DIMENSION PX(*)
      DIMENSION PY(*)
C
      DIMENSION PX2(2)
      DIMENSION PY2(2)
C
      INCLUDE 'DPCOPA.INC'
      DIMENSION PXP(MAXPOP)
      DIMENSION PYP(MAXPOP)
      INCLUDE 'DPCOZZ.INC'
      EQUIVALENCE (GARBAG(JGAR17),PXP(1))
      EQUIVALENCE (GARBAG(JGAR19),PYP(1))
C
      DIMENSION IX(100)
      DIMENSION IY(100)
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
C     THERE ARE 3 TYPES OF FILLS:
C       1. A BOX  (SOFTWARE FILL IN GRDRBP)
C       2. A SOLID FILLED SIMPLE (CONCAVE POLYGON) (SOFTWARE FILL IN GRFIR2)
C       3. A GENERAL POLYGON (SOFTWARE FILL IN GRFIR3)
C
C     HARDWARE FILLS ARE DONE FOR CASES 1 AND 2 WHERE THE HARDWARE 
C     PERMITS.  CURRENTLY, ONLY POSTSCRIPT DOES CASE 3 IN HARDWARE.  OTHER
C     DEVICES MAY BE ADDED AS WE GET A CHANCE TO PROPERLY TEST THEM 
C     (HARDWARE FILLS IN THE GENERAL CASE TEND TO BE SOMEWHAT BUGGY, 
C     ALTHOUGH MUCH FASTER WHEN THEY WORK).
C
CCCCC OCTOBER 1993.  MODIFY ALL CALLS TO GRFIR2 TO CALL GRFIR2 FOR
CCCCC SOLID FILLS AND TO GO TO GRFIR3 FOR NON-SOLID FILLS.
CCCCC GRFIR3 CAN HANDLE CONVEX OR CONCAVE POLYGONS.
CCCCC ADD FOLLOWING LINES TO DETECT SOLID OR VERTICAL PATTERN
      IFLAG='NONS'
      IF(IPATT.EQ.'SOLI')IFLAG='SOLI'
      IF(IPATT.EQ.'FILL')IFLAG='SOLI'
      IF(IPATT.EQ.'ON  ')IFLAG='SOLI'
      IF(IPATT.EQ.'VERT')IFLAG='SOLI'
      IF(IPATT.EQ.'V   ')IFLAG='SOLI'
      IF(IFIG.EQ.'POLY')IFLAG='NONS'
CCCCC END CHANGE
      ISUBN0='FIRE'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'FIRE')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRFIRE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IGUNIT,NP,JPATT,IFIG,IPATT
   52   FORMAT('IGUNIT,NP,JPATT,IFIG,IPATT = ',3I8,2(2X,A4))
        CALL DPWRST('XXX','BUG ')
        DO55I=1,NP
          WRITE(ICOUT,56)PX(I),PY(I)
   56     FORMAT('PX(I),PY(I) = ',2G15.7)
          CALL DPWRST('XXX','BUG ')
   55   CONTINUE
        WRITE(ICOUT,63)IHORPA,IVERPA,IDUPPA,IDDOPA
   63   FORMAT('IHORPA,IVERPA,IDUPPA,IDDOPA = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,65)PXSPA2,PYSPA2,PTHICK,JTHICK,PTHIC2
   65   FORMAT('PXSPA2,PYSPA2,PTHICK,JTHICK,PTHIC2 = ',3G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,66)ICOLF,ICOLP,JCOLF,JCOLP
   66   FORMAT('ICOLF,ICOLP,JCOLF,JCOLP = ',2(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,67)ICOLFR,ICOLFG,ICOLFB,IRGBFL
   67   FORMAT('ICOLFR,ICOLFG,ICOLFB,IRGBFL = ',4I5)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,68)IMANUF,IMODEL,ISUBG4,IERRG4
   68   FORMAT('IMANUF,IMODEL,ISUBG4,IERRG4 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C     2021/02: FOR "BOX" CASE, IF Y-COORDINATES ARE ALL EQUAL
C              OR X-COORDINATES ARE ALL EQUAL, THEN SKIP THE
C              FILL REGION STEP
C
      IF(IFIG.EQ.'BOX')THEN
        AVAL=PY(1)
        DO110I=2,NP
          IF(PY(I).NE.AVAL)GOTO119
  110   CONTINUE
        GOTO9000
  119   CONTINUE
C
        AVAL=PX(1)
        DO120I=2,NP
          IF(PX(I).NE.AVAL)GOTO129
  120   CONTINUE
        GOTO9000
  129   CONTINUE
      ENDIF
C
CCCCC AUGUST 1992.  SET ICOL TO ICOLP FOR GRDRBP (AFFECTS COLOR
CCCCC DEVICES WHEN DOING A PATTERN FILL, E.G., 'HORI').
C
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        ICOL=ICOLF
        ICOLR=ICOLFR
        ICOLG=ICOLFG
        ICOLB=ICOLFB
      ELSE
        ICOL=ICOLP
        ICOLR=ICOLPR
        ICOLG=ICOLPG
        ICOLB=ICOLPB
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4027')GOTO1200
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4113')GOTO1300
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               **************************************************************
C               **  STEP 11--                                               **
C               **  TREAT THE TEKTRONIX 400X, 401X, 405X, AND 4114 CASES    **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES)        **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1100 CONTINUE
      IFACTO=4
      IF(NUMVPP.GE.3000)IFACTO=1
      GOTO8900
C
C               **************************************************************
C               **  STEP 12--                                               **
C               **  TREAT THE TEKTRONIX 4027 CASE                           **
C               **  (COLOR RASTER DEVICE).                                  **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1200 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        DO1211I=1,NP
          CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
 1211   CONTINUE
        ICSTR(1:5)='!POL '
        NCSTR=5
        NCHTOT=6
        DO1215I=1,NP
          CALL GRTRIN(IX(I),NCHTOT,ICSTR,NCSTR)
          CALL GRTRIN(IY(I),NCHTOT,ICSTR,NCSTR)
 1215   CONTINUE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        IFACTO=4
        IF(NUMVPP.GE.3000)IFACTO=1
        IF(IFIG.EQ.'BOX')THEN
          CALL GRDRBP(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1                IHORPA,IVERPA,IDUPPA,IDDOPA,
     1                IPATT2,PTHICK,ICOL,ICOLR,ICOLG,ICOLB,IRGBFL)
        ELSEIF(IFIG.NE.'BOX')THEN
          CALL GRFIR3(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1                IHORPA,IVERPA,IDUPPA,IDDOPA,IPATT2,PTHICK,
     1                ICOL,ICOLR,ICOLG,ICOLB,IRGBFL)
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ****************************************************************
C               **  STEP 13--                                                 **
C               **  TREAT THE TEKTRONIX 4105 CASE                             **
C               **  (COLOR RASTER DEVICE)                                     **
C               **  SWITCH TO DIALOGUE MODE (AN UNDOCUMENTED NECESSITY!)      **
C               **  WRITE OUT ESCAPE LP FIRST-POINT,DRAW-BOUNDARY (PAGE 5-7)  **
C               **  LIST OUT BOUNDARY POINTS WITH DRAW COMMAND (PAGE 5-7)     **
C               **  WRITE OUT ESCAPE LE  TO FINISH PANEL DEFINITION           **
C               **  SWITCH BACK TO GRAPHICS MODE (AGAIN, UNDOCUMENTED!)       **
C               **  REFERENCE--PAGES 5-7, 5-17, 5-32                          **
C               **  REFERENCE--PAGE 5-9                                       **
C               ****************************************************************
C
 1300 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IFACTO=4
        IF(NUMVPP.GE.3000)IFACTO=1
C
        IF(JCOLF.EQ.0)JCOL2=48
        IF(JCOLF.NE.0)JCOL2=JCOLF+32
        CALL DPCONA(JCOL2,ICOL2)
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='MP'
        ICSTR(4:4)=ICOL2
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IESCC
        ICSTR(2:4)='KA1'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='LP'
        NCSTR=3
        I=1
        CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
        CALL TKTRPT(IX(I),IY(I),IFACTO,ICSTR,NCSTR,ISUBN0)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='0'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='LG'
        DO1315I=2,NP
          NCSTR=3
          CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
          CALL TKTRPT(IX(I),IY(I),IFACTO,ICSTR,NCSTR,ISUBN0)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1315   CONTINUE
C
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='LE'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IESCC
        ICSTR(2:4)='KA0'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        IFACTO=4
        IF(NUMVPP.GE.3000)IFACTO=1
        IF(IFIG.EQ.'BOX')THEN
          CALL GRDRBP(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1                IHORPA,IVERPA,IDUPPA,IDDOPA,
     1                IPATT2,PTHICK,ICOL,ICOLR,ICOLG,ICOLB,IRGBFL)
        ELSEIF(IFIG.NE.'BOX')THEN
          CALL GRFIR3(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1                IHORPA,IVERPA,IDUPPA,IDDOPA,IPATT2,PTHICK,
     1                ICOL,ICOLR,ICOLG,ICOLB,IRGBFL)
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ****************************************************
C               **  STEP 21--                                     **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE           **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER          **
C               **             OPERATING AND PROGRAMMING MANUAL,  **
C               **             PAGE XX.                           **
C               ****************************************************
C
 2100 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IFACTO=(-999)
      GOTO8900
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IFACTO=(-999)
      GOTO8900
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-10, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IFACTO=(-999)
      GOTO8900
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT                  CASE    **
C               ******************************************************
C
 2600 CONTINUE
C
C     DO RECTANGULAR SOLID FILLS (BUT MAKE OPTIONAL).  FOR NOW,
C     DO NON-RECTANGULAR SOLID FILLS IN SOFTWARE.
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IFIG.EQ.'BOX' .AND. ILPLFS.EQ.'ON')THEN
        IF(NP.LE.3)GOTO9000
        IF(IRGBFL.EQ.0)THEN
          IFACT=65535/255
          IVALR=IFACT*IRED(JCOLF)
          IVALG=IFACT*IGREEN(JCOLF)
          IVALB=IFACT*IBLUE(JCOLF)
        ELSE
          IVALR=ICOLFR
          IVALG=ICOLFG
          IVALB=ICOLFB
        ENDIF
#ifdef HAVE_LIBPLOT
        CALL PLRGFL(DBLE(PX(1)),DBLE(PY(1)),DBLE(PX(2)),DBLE(PY(2)),
     1              IVALR,IVALG,IVALB)
#endif
      ELSE
        GOTO8900
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
C
C     DECEMBER 1987: ADD "SET PATTERN REGION HORIZIONTAL SPACING" AND
C                    "SET PATTERN REGION VERTICAL SPACING" AND
C                    "SET PATTERN LINE" COMMANDS
C     JANUARY 1988: ADD A SOFTWARE SETTABLE SWITCH.  EITHER PRINT OUT
C                   THE DESCRIPTION OF THE PATTERN (E.G. "HORIZONTAL") OR
C                   HAVE DATAPLOT DO THE FILL (I.E., THE "MOVE TO" AND
C                   "DRAW TO" COMMANDS).
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IRFLSW.EQ.'ON' .OR. IFLAG.EQ.'NONS')THEN
        GOTO8900
      ELSE
        ICSTR(1:11)='SET FILL ON'
        NCSTR=11
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:38)='SET PATTERN REGION HORIZONTAL SPACING '
        NCSTR=38
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PXSPA2,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:36)='SET PATTERN REGION VERTICAL SPACING '
        NCSTR=36
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PYSPA2,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:24)='SET PATTERN REGION LINE '
        ICSTR(25:28)=IPATT2
        NCSTR=28
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:11)='FILL REGION'
        NCSTR=11
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        DO3120I=1,NP
          NCSTR=0
          NCHTOT=10
          NCHDEC=5
          CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
          CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
          ICSTR(11:12)='  '
          NCSTR=12
          CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3120   CONTINUE
        ICSTR(1:18)='END OF FILL REGION'
        NCSTR=18
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
C
C     DECEMBER 1987: ADD "SET PATTERN REGION HORIZIONTAL SPACING" AND
C                    "SET PATTERN REGION VERTICAL SPACING" AND
C                    "SET PATTERN LINE" COMMANDS
C     JANUARY 1988: ADD A SOFTWARE SETTABLE SWITCH.  EITHER PRINT OUT
C                   THE DESCRIPTION OF THE PATTERN (E.G. "HORIZONTAL") OR
C                   HAVE DATAPLOT DO THE FILL (I.E., THE "MOVE TO" AND
C                   "DRAW TO" COMMANDS).
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IRFLSW.EQ.'ON' .OR. IFLAG.EQ.'NONS')THEN
        GOTO8900
      ELSE
        ICSTR(1:7)='SEFI ON'
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:31)='SEPA REGION HORIZONTAL SPACING '
        NCSTR=31
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PXSPA2,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:29)='SEPA REGION VERTICAL SPACING '
        NCSTR=29
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PYSPA2,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:17)='SEPA REGION LINE '
        ICSTR(18:21)=IPATT2
        NCSTR=21
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:4)='FIRE'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       DECEMBER 1997.  FOR GUI, CODE POINTS DIFFERENTLY.
C
        IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
          DO3270I=1,NP
            NCSTR=0
            NCHTOT=IGENFA+3
            CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
            IPXTMP=INT(AX*10.**IGENFA+0.5)
            IPYTMP=INT(AY*10.**IGENFA+0.5)
            CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=' '
            CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3270     CONTINUE
        ELSE
          DO3220I=1,NP
            NCSTR=0
            NCHTOT=10
            NCHDEC=5
            CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
            CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
            ICSTR(11:12)='  '
            NCSTR=12
            CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3220     CONTINUE
        ENDIF
        ICSTR(1:4)='ENFI'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ***************************************************
C               **  STEP 33--                                    **
C               **  TREAT THE GENERAL (CGM               ) CASE  **
C               ***************************************************
C
 3300 CONTINUE
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IRFLSW.EQ.'ON' .OR. IFLAG.EQ.'NONS')THEN
        GOTO8900
      ELSE
        ICSTR(1:7)='POLYGON'
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCHTOT=10
        NCHDEC=5
        DO3340I=1,NP
          NCSTR=0
          CALL GRTRSA(PX(I),PY(I),AX,AY,ISUBN0)
          CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
          ICSTR(11:12)=', '
          NCSTR=12
          CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
          ICSTR(23:23)=','
          IF(I.EQ.NP)ICSTR(23:23)=';'
          NCSTR=23
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3340   CONTINUE
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE GENERAL (CGM BINARY        ) CASE  **
C               ***************************************************
C
 3400 CONTINUE
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IRFLSW.EQ.'ON' .OR. IFLAG.EQ.'NONS')THEN
        GOTO8900
      ELSE
        CONTINUE
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO SET FILL--                                   **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--CALCOMP LIBRARY ROUTINE              **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      IFACTO=-999
      GOTO8900
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
#ifdef HAVE_LAHEY_CALCOMP
        CALL NEWPEN(JCOLF)
        ILAHCC=JCOLF
        CALL FILL(NP,PX,PY)
#endif
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      GOTO8900
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(IFIG.EQ.'BOX')THEN
          PX2(1)=PX(1)
          PY2(1)=PY(1)
          PX2(2)=PX(3)
          PY2(2)=PY(3)
          NP2=2
#ifdef HAVE_OPEN_GL
          CALL GLREFL(PX2,PY2,NP2)
#endif
        ELSE
#ifdef HAVE_OPEN_GL
          CALL GLREFL(PX,PY,NP)
#endif
        END IF
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        ISTYLE=4
        IDENSE=0
        IANGLE=0
#ifdef HAVE_INTERACTER
        CALL IGrFillPattern(ISTYLE,IDENSE,IANGLE)
        CALL IGrPolygonComplex(REAL(IX),REAL(IY),NP)
        CALL IGrPolygonComplex(PX,PY,NP)
#endif
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.2)GOTO9000
        ISTYLE=4
        IDENSE=0
        IANGLE=0
#ifdef HAVE_WININTERACTER
        CALL IGrFillPattern(ISTYLE,IDENSE,IANGLE)
        CALL IGrPolygonComplex(PX,PY,NP)
#endif
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY ROUTINE                     **
C               ******************************************************
C
 5100 CONTINUE
      IFACTO=-999
      GOTO8900
C
C               ****************************************************
C               **  STEP 66--                                     **
C               **  TREAT THE SUN - WRITTEN BY BILL ANDERSON      **
C               ****************************************************
C
 6600 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        DO6611I=1,NP
          CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
 6611   CONTINUE
#ifdef HAVE_SUN
        CALL cfflcolor(JCOLF)
        CALL cfperimcolor(JCOLP)
        CALL cfpolygon(IX,IY,NP)
#endif
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC REGIS      CASE                   **
C               **  TO FILL REG--                                   **
C               **  WRITE OUT AN                                    **
C               **    P[IX,IY]  - MOVE TO FIRST POINT               **
C               **    W(S1)     - ENABLE SHADING (SOLID FILL)       **
C               **    V[IX(I),IY(I)] - DRAW VECTOR ON REGION TO BE  **
C               **                     FILLED                       **
C               **    W(S0)     - DISABLE SHADING
C               **  (NOT DONE)                                      **
C               **  REFERENCE--VT 240 PROGRAMMER REFERENCE MANUAL   **
C               **             DEC (OCTOBER, 1983 EDITION)          **
C               **             PAGES 5-90 THRU 5-103                **
C               ******************************************************
C
 8100 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        DO8111I=1,NP
          CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
 8111   CONTINUE
        ICSTR(1:2)='P['
        NCSTR=2
        NCHTOT=5
        CALL GRTRIN(IX(1),NCHTOT,ICSTR,NCSTR)
        ICSTR(8:8)=','
        NCSTR=8
        CALL GRTRIN(IY(1),NCHTOT,ICSTR,NCSTR)
        ICSTR(14:14)=']'
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:5)='W(S1)'
        NCSTR=5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        DO8115I=1,NP
          ICSTR(1:2)='V['
          NCSTR=2
          NCHTOT=5
          CALL GRTRIN(IX(I),NCHTOT,ICSTR,NCSTR)
          ICSTR(8:8)=','
          NCSTR=8
          CALL GRTRIN(IY(I),NCHTOT,ICSTR,NCSTR)
          ICSTR(14:14)=']'
          NCSTR=14
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8115   CONTINUE
        ICSTR(1:5)='W(S0)'
        NCSTR=5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT           CASE             **
C               **  TO FILL REG--                                   **
C               **  <SHAD> SETGREY - SET GREY SCALE FOR SOLID FILL  **
C               **  <X Y COOR PAIRS> FILL                           **
C               **  REFERENCE--POSTSCRIPT LANGUAGE COOKBOOK AND     **
C               **             TUTORIAL FROM ADOBE SYSTEMS          **
C               **             PAGES XX AND XX                      **
C               **  MODIFIED JANUARY, 1990 TO SUPPORT COLOR.  IF    **
C               **  COLOR TURNED ON, COLOR FOR REGIONS SET IN       **
C               **  GRSECO, IF NOT THEN USE GREY SCALE FOR SOLID    **
C               **  FILL REGIONS.                                   **
C               ******************************************************
C
 8600 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
        NCHTOT=5
        NCSTR=0
        CALL GRTRSD(PX(1),PY(1),IXTEMP,IYTEMP,ISUBN0)
        CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
        ICSTR(6:6)=' '
        NCSTR=6
        CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
        ICSTR(12:13)=' m'
        NCSTR=13
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        DO8611I=2,NP
          NCSTR=0
          CALL GRTRSD(PX(I),PY(I),IXTEMP,IYTEMP,ISUBN0)
          CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
          ICSTR(6:6)=' '
          NCSTR=6
          CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
          ICSTR(12:13)=' l'
          NCSTR=13
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8611   CONTINUE
        IF(IGCOLO.EQ.'ON')THEN
          ICSTR(1:35)='closepath fill 0. 0. 0. setrgbcolor'
          NCSTR=35
        ELSE
          ICSTR(1:25)='closepath fill 0. setgray'
          NCSTR=25
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC           CASE                   **
C               **  TO FILL REG--                                   **
C               **  WRITE OUT AN ^LAFhhhhhvvvvv20^G                 **
C               **  IF PICK POINT IN MIDDLE OF REGION, WILL HARDWARE**
C               **  FILL TO LINES FORMING REGION AROUND THAT POINT. **
C               **  NOTE THAT FOR DATAPLOT, THE REGION BORDER MAY   **
C               **  BE BLANK, WHICH CAN CAUSE DISASTOROUS RESULTS,  **
C               **  ALSO DEPENDS ON BORDER BEING DRAW FIRST, WHICH  **
C               **  IS NOT GARUNTEED IN DATAPLOT                    **
C               **  THERFORE DO A SOFTWARE REGION FILL              **
C               **  REFERENCE--QUIC PROGRAMMERS MANUAL,             **
C               **             CHAPTER 8                            **
C               ******************************************************
C
 9100 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IFACTO=-999
      GOTO8900
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  SOLID FILLS DONE BY XLIB, PATTERNED FILLS WITH  **
C               **  SOFTWARE                                        **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IX11FS.EQ.'OFF'.AND.IFIG.NE.'BOX')THEN
        IFACTO=-999
        GOTO8900
      ELSEIF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
        CALL GRTRSD(PX(1),PY(1),IX(1),IY(1),ISUBN0)
        IF(IFIG.EQ.'BOX')THEN
          CALL GRTRSD(PX(3),PY(3),IX(2),IY(2),ISUBN0)
          NTEMP=2
        ELSE
          DO9611I=2,NP
            CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
 9611     CONTINUE
          NTEMP=NP
        END IF
        CALL XREGFL(IX,IY,NTEMP)
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
C
#endif
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 71.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 122.                       **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 13-16, 39-50**
C               *************************************************
C
10000 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
        CALL GRTRSD(PX(1),PY(1),IX(1),IY(1),ISUBN0)
        IF(IFIG.EQ.'BOX')THEN
           CALL GRTRSD(PX(3),PY(3),IX(2),IY(2),ISUBN0)
           NTEMP=2
        ELSE
           DO10611I=2,NP
             CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
10611      CONTINUE
           NTEMP=NP
        END IF
CTURB CALL TCFIRE(IX,IY,NTEMP)
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
#ifdef HAVE_GKS
        CALL GFA(PX,PY,NTEMP)
#endif
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
#ifdef HAVE_GD
C
      IF(IGDFS.EQ.'OFF' .AND. IFIG.NE.'BOX ')THEN
        IFACTO=-999
        GOTO8900
      ELSEIF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
        CALL GRTRSD(PX(1),PY(1),IX(1),IY(1),ISUBN0)
        IF(IFIG.EQ.'BOX')THEN
          CALL GRTRSD(PX(3),PY(3),IX(2),IY(2),ISUBN0)
          NTEMP=2
        ELSE
          DO12611I=2,NP
            CALL GRTRSD(PX(I),PY(I),IX(I),IY(I),ISUBN0)
12611     CONTINUE
          NTEMP=NP
        END IF
        CALL GDRGFL(IX,IY,NTEMP,JCOLF)
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               **  LIBRARY FROM ABSOFT COMPILER                    **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL' .AND. IAQUFS.EQ.'ON')THEN
        IF(NP.LE.3)GOTO9000
        IF(IFIG.EQ.'BOX')THEN
          CALL GRTRSD(PX(1),PY(1),IX1,IY1,ISUBN0)
          CALL GRTRSD(PX(3),PY(3),IX2,IY2,ISUBN0)
          IF(IX2.LT.IX1)THEN
            IXTEMP=IX2
            IX2=IX1
            IX1=IXTEMP
          ENDIF
          IX2=IX2-IX1
          IF(IY2.LT.IY1)THEN
            IYTEMP=IY2
            IY2=IY1
            IY1=IYTEMP
          ENDIF
          IY2=IY2-IY1
COLD      CALL aqtAddFilledRect(AX1,AX2,AY1,AY2)
#ifdef HAVE_AQUA
          CALL aqrect(IX1,IY1,IX2,IY2)
#endif
        ELSE
C
C         FOR AQUATERM, LIMIT MAXIMUM NUMBER OF POINTS IN
C         REGION TO 100 POINTS.
C
          DO13511I=1,MAX(100,NP)
            CALL GRTRSD(PX(I),PY(I),IX1,IY1,ISUBN0)
            PXP(I)=REAL(IX1)
            PYP(I)=REAL(IY1)
13511     CONTINUE
          NTEMP=NP
#ifdef HAVE_AQUA
          CALL aqrgfl(PXP,PYP,NTEMP)
#endif
        END IF
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IFACTO=-999
      GOTO8900
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABE VECTOR GRAPHICS) DRIVER  **
C               ******************************************************
C
16000 CONTINUE
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      CALL DPCONA(34,IQUOTE)
C
      IF(ISVGFS.EQ.'OFF'.AND.IFIG.NE.'BOX')GOTO8900
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
        CALL GRTRSD(PX(1),PY(1),IX(1),IY(1),ISUBN0)
        IF(IFIG.EQ.'BOX')THEN
          CALL GRTRSD(PX(3),PY(3),IX(2),IY(2),ISUBN0)
          IF(IX(1).LE.IX(2))THEN
            IXSTRT=IX(1)
            IXSTOP=IX(2)
          ELSE
            IXSTRT=IX(2)
            IXSTOP=IX(1)
          ENDIF
          IF(IY(1).LE.IY(2))THEN
            IYSTRT=IY(1)
            IYSTOP=IY(2)
          ELSE
            IYSTRT=IY(2)
            IYSTOP=IY(1)
          ENDIF
          IWID=IXSTOP-IXSTRT+1
          IHEIG=IYSTOP-IYSTRT+1
C
          ICSTR(1:11)='   <rect x='
          ICSTR(12:12)=IQUOTE
          NCSTR=12
          IF(IXSTRT.GE.10000)THEN
            NCHTOT=5
          ELSEIF(IXSTRT.GE.1000)THEN
            NCHTOT=4
          ELSEIF(IXSTRT.GE.100)THEN
            NCHTOT=3
          ELSEIF(IXSTRT.GE.10)THEN
            NCHTOT=2
          ELSE
            NCHTOT=1
          ENDIF
          CALL GRTRIN(IXSTRT,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+2)=' y='
          NCSTR=NCSTR+3
          ICSTR(NCSTR:NCSTR)=IQUOTE
          IF(IYSTRT.GE.10000)THEN
            NCHTOT=5
          ELSEIF(IYSTRT.GE.1000)THEN
            NCHTOT=4
          ELSEIF(IYSTRT.GE.100)THEN
            NCHTOT=3
          ELSEIF(IYSTRT.GE.10)THEN
            NCHTOT=2
          ELSE
            NCHTOT=1
          ENDIF
          CALL GRTRIN(IYSTRT,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:15)='         width='
          ICSTR(16:16)=IQUOTE
          NCSTR=16
          IF(IWID.GE.10000)THEN
            NCHTOT=5
          ELSEIF(IWID.GE.1000)THEN
            NCHTOT=4
          ELSEIF(IWID.GE.100)THEN
            NCHTOT=3
          ELSEIF(IWID.GE.10)THEN
            NCHTOT=2
          ELSE
            NCHTOT=1
          ENDIF
          CALL GRTRIN(IWID,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+7)=' height='
          NCSTR=NCSTR+8
          ICSTR(NCSTR:NCSTR)=IQUOTE
          IF(IHEIG.GE.10000)THEN
            NCHTOT=5
          ELSEIF(IHEIG.GE.1000)THEN
            NCHTOT=4
          ELSEIF(IHEIG.GE.100)THEN
            NCHTOT=3
          ELSEIF(IHEIG.GE.10)THEN
            NCHTOT=2
          ELSE
            NCHTOT=1
          ENDIF
          CALL GRTRIN(IHEIG,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:17)='           style='
          ICSTR(18:18)=IQUOTE
          ICSTR(19:31)='stroke:none; '
          NCSTR=-31
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:19)='             fill:#'
          NCSTR=19
          NCHTOT=2
          JTEMP=JCOLF
          IF(JTEMP.LE.0)THEN
C
C           DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C           THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C           SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
            AVAL=(255./100.)*REAL(ABS(JTEMP))
            IF(AVAL.LE.0.0)AVAL=0.0
            IF(AVAL.GE.255.0)AVAL=255.0
            IF(IRGBFL.EQ.0)THEN
              JRED=INT(AVAL+0.5)
              JBLUE=JRED
              JGREEN=JRED
            ELSE
              JRED=ICOLFR
              JGREEN=ICOLFG
              JBLUE=ICOLFB
            ENDIF
          ELSE
            IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
            IF(IRGBFL.EQ.0)THEN
              JRED=IRED(JTEMP)
              JGREEN=IGREEN(JTEMP)
              JBLUE=IBLUE(JTEMP)
            ELSE
              JRED=ICOLFR
              JGREEN=ICOLFG
              JBLUE=ICOLFB
            ENDIF
          ENDIF
          CALL DPCONX(JRED,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JGREEN,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JBLUE,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+2
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:7)='     />'
          NCSTR=-7
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ELSE
          ICSTR(1:11)='   <polygon'
          NCSTR=-11
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:17)='           style='
          ICSTR(18:18)=IQUOTE
          ICSTR(19:31)='stroke:none; '
          NCSTR=-31
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:19)='             fill:#'
          NCSTR=19
          NCHTOT=2
          JTEMP=JCOLF
          IF(JTEMP.LE.0)THEN
C
C           DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C           THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C           SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
            AVAL=(255./100.)*REAL(ABS(JTEMP))
            IF(AVAL.LE.0.0)AVAL=0.0
            IF(AVAL.GE.255.0)AVAL=255.0
            IF(IRGBFL.EQ.0)THEN
              JRED=INT(AVAL+0.5)
              JBLUE=JRED
              JGREEN=JRED
            ELSE
              JRED=ICOLFR
              JGREEN=ICOLFG
              JBLUE=ICOLFB
            ENDIF
          ELSE
            IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
            IF(IRGBFL.EQ.0)THEN
              JRED=IRED(JTEMP)
              JGREEN=IGREEN(JTEMP)
              JBLUE=IBLUE(JTEMP)
            ELSE
              JRED=ICOLFR
              JGREEN=ICOLFG
              JBLUE=ICOLFB
            ENDIF
          ENDIF
          CALL DPCONX(JRED,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JGREEN,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+1
          CALL DPCONX(JBLUE,ICJUNK)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
          NCSTR=NCSTR+2
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:12)='     points='
          NCSTR=13
          ICSTR(NCSTR:NCSTR)=IQUOTE
          NCSTR=-NCSTR
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCHTOT=5
C
          NCSTR=0
          DO16011I=1,NP
            IF(NCSTR.GT.80)THEN
              NCSTR=-NCSTR
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
              NCSTR=3
              ICSTR(1:NCSTR)='   '
            ENDIF
            CALL GRTRSD(PX(I),PY(I),IXTEMP,IYTEMP,ISUBN0)
            CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=','
            CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=' '
            IF(NCSTR.LE.80)GOTO16011
            NCSTR=-NCSTR
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            NCSTR=3
            ICSTR(1:NCSTR)='   '
16011     CONTINUE
C
          IF(NCSTR.GT.3)THEN
            NCSTR=-NCSTR
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ENDIF
C
          ICSTR(1:3)='   '
          ICSTR(4:4)=IQUOTE
          ICSTR(5:6)='/>'
          NCSTR=-6
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        END IF
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
C
C     FILL IN SOFTWARE
C
      IF(ICAIFS.EQ.'OFF'.AND.IFIG.NE.'BOX')THEN
        IFACTO=-999
        GOTO8900
      ENDIF
C
      IF(IPATT.EQ.'SOLI' .OR. IPATT.EQ.'FILL')THEN
        IF(NP.LE.3)GOTO9000
C
        IVAL2=1
        IF(IGUNIT.EQ.IPL1NU)IVAL2=2
        IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
        PX2(1)=PX(1)
        PY2(1)=PY(1)
        CALL GRTRSD(PX2(1),PY2(1),IX(1),IY(1),ISUBN0)
        IF(IFIG.EQ.'BOX')THEN
          PX2(2)=PX(3)
          PY2(2)=PY(3)
          CALL GRTRSD(PX2(2),PY2(2),IX(2),IY(2),ISUBN0)
          NTEMP=2
          CALL CARGFL(IVAL2,PX2,PY2,NTEMP)
        ELSE
          DO17011I=1,NP
            PXP(I)=PX(I)
            PYP(I)=PY(I)
            CALL GRTRSD(PXP(I),PYP(I),IX1,IY1,ISUBN0)
17011     CONTINUE
          NTEMP=NP
          CALL CARGFL(IVAL2,PXP,PYP,NTEMP)
        END IF
      ELSE
        IFACTO=-999
        GOTO8900
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 99--GENERIC CODE FOR DEVICES THAT DO NOT   **
C               **           SUPPORT HARDWARE FILLS                 **
C               ******************************************************
C
 8900 CONTINUE
      IF(IPATT.EQ.'EMPT' .OR. IPATT.EQ.'BLAN' .OR. IPATT.EQ.'    ' .OR.
     1   IPATT.EQ.'NONE' .OR. NP.LE.1)GOTO9000
      IF(IFIG.EQ.'BOX')THEN
        CALL GRDRBP(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1              IHORPA,IVERPA,IDUPPA,IDDOPA,
     1              IPATT2,PTHICK,ICOL,ICOLR,ICOLG,ICOLB,IRGBFL)
      ELSEIF(IFIG.NE.'BOX')THEN
        IF(IFLAG.EQ.'SOLI')THEN
          CALL GRFIR2(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1              IHORPA,IVERPA,IDUPPA,IDDOPA,JCOLF)
        ELSE
          CALL GRFIR3(PX,PY,NP,PXSPA2,PYSPA2,IFACTO,
     1              IHORPA,IVERPA,IDUPPA,IDDOPA,IPATT2,PTHICK,
     1              ICOL,ICOLR,ICOLG,ICOLB,IRGBFL)
        ENDIF
      ENDIF
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'FIRE')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRFIRE--')
        CALL DPWRST('XXX','BUG ')
        DO9015I=1,NP
          WRITE(ICOUT,9016)PX(I),PY(I),IX(I),IY(I)
 9016     FORMAT('PX(I),PY(I),IX(I),IY(I) = ',2G15.7,2I8)
          CALL DPWRST('XXX','BUG ')
 9015   CONTINUE
C
        WRITE(ICOUT,9033)NCSTR
 9033   FORMAT('NCSTR = ',I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GE.1)THEN
          DO9035I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9036)I,ICSTR(I:I),IASCNE
 9036       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9035     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRINDE
C
C     PURPOSE--INITIALIZE A SPECIFIC GRAPHICS DEVICE
C              TO DEFAULT POWER-ON CONDITIONS.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MAY      1989. CORRECT POSTSCRIPT SCALING (ALAN)
C     UPDATED         --MARCH    1990. ADD X11 DRIVER
C     UPDATED         --APRIL    1990. SUN PATCH (BILL ANDERSON)
C     UPDATED         --MAY      1990. ADD "SC" COMMAND TO HP-GL (ALAN)
C     UPDATED         --NOVEMBER 1990. POSTSCRIPT BUG FIX (BY ALAN HECKERT)
C     UPDATED         --JANUARY, 1991. REGIS (DEFINE MAX COLORS) (ALAN)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --MAY      1991. INCREASE CHARACTER INDICES
C     UPDATED         --OCTOBER  1991. POSTSCRIPT UPDATES (ALAN)
C     UPDATED         --DECEMBER 1991. POSTSCRIPT BUG (ALAN)
C     UPDATED         --AUGUST   1992. CGM COLOR TABLE (ALAN)
C     UPDATED         --AUGUST   1992. HPGL FOR LASERJET III (ALAN)
C     UPDATED         --JANUARY  1993. FIX POSTSCRIPT HEADER (HAD
C                                      PROBLEM WITH FRAMEMAKER) (ALAN)
C     UPDATED         --MAY      1995. PASS MODEL NUMBER (WINDOW IDENT)
C                                      FOR X11 (USED BY FRONT-END)
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. WININTERACTOR CODE
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C                     --MARCH    2002. CHANGE TO QUARTZ (NEW MAC GRAPHICS
C                                      LIBRARY)
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C                     --MARCH    2002. CHANGE TO GHOSTSCRIPT
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --NOVEMBER 2002. SUPPORT FOR QWIN "-TILE" OPTION
C     UPDATED         --JANUARY  2003. SUPPORT FOR POSTSCRIPT SET
C                                      BOUNDING BOX OPTION
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT THE LATEX DRIVER
C     UPDATED         --MARCH    2008. LAYER COUNTER FOR SVG
C     UPDATED         --MARCH    2008. PAGE COUNTER FOR POSTSCRIPT
C     UPDATED         --FEBRUARY 2009. ADD FOLLOWING PROCEDURES FOR
C                                      POSTSCRIPT
C                                      1) setpsfont
C                                      2) psstringwidthr
C                                      3) psstringwidthc
C                                      4) psstringwidthtv
C                                      5) psstringwidthcv
C                                      6) leftshow2
C                                      7) vleftshow2
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --JULY     2015. FOR HEIGHT/WIDTH SETTINGS ON SVG
C                                      DEVICE, REMOVE LEADING SPACES
C                                      (CAUSED PROBLEM WITH KONQUEROR
C                                      BROWSER)
C     UPDATED         --OCTOBER  2015. CHECK IF QWIN DEVICE ALREADY OPEN
C     UPDATED         --NOVEMBER 2015. IDEVO3
C     UPDATED         --AUGUST   2016. FOR POSTSCRIPT, CHECK IF ERROR
C                                      DETECTED IN GRWRST CALL
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C     UPDATED         --OCTOBER  2020. BACKGROUND COLOR FOR POSTSCRIPT
C     UPDATED         --MARCH    2021. TWEAK TO BACKGROUND COLOR FOR
C                                      POSTSCRIPT
C     UPDATED         --APRIL    2023. SOME TWEAKS TO QWIN TO
C                                      SUPPORT NEW INTEL API-ONE
C                                      VERSION OF COMPILER
C
C-----NON-COMMON VARIABLES (GRAPHICS)-----------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
      TYPE(WIN_STYLE)     :: WINDOW
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
C
      LOGICAL(4) MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      TYPE (QWINFO)  WINFO
      TYPE (FONTINFO) MSFONT
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
CCCCC NOVEMBER 2002.  ADD FOLLOWING TWO LINES
      CHARACTER*4 IQWNTL
      COMMON/QUICKW4/IQWNTL
#endif
      CHARACTER*4 IQWNFL
      COMMON/QUICKW5/IQWNFL
C
      CHARACTER*130 ICSTR
      CHARACTER*130 IATEMP
      CHARACTER*80 ISTEMP
      CHARACTER*4 ISUBN0
      CHARACTER*4 ISUBRO
      CHARACTER*4 IERROR
      CHARACTER*1 IQUOTE
      CHARACTER*1 ICARAT
      CHARACTER*2 ICJUNK
      CHARACTER*4 ICASE
      CHARACTER*4 ICASE2
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
      CHARACTER*8 CTEMP
      CHARACTER*1 IA
      INTEGER IWIND(8)
C
      INTEGER JCGM(MAXCLR)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      CHARACTER*200 CMAPNM
      INTEGER RETNED,DD,CMAPSZ
#ifdef HAVE_SUN
      CHARACTER*200 SCNNAM,WINNAM,PTR
      INTEGER WINDFD,FLAGS,NOARGS
#endif
      INTEGER RD(8),GN(8),BE(8)
      INTEGER IADE(81)
      INTEGER IADE2(20)
CCCCC SOME DEVICES (SVG IN PARTICULAR) MAY NEED BACKGROUND COLOR
CCCCC AT INITIALIZATION.
C
      CHARACTER*4 IERASW
      CHARACTER*4 IBELSW
      CHARACTER*4 ISORSW
      CHARACTER*4 ICOPSW
      CHARACTER*4 IPENSW
      CHARACTER*4 IBACCO
      CHARACTER*4 IMARCO
      CHARACTER*4 IANISW
      CHARACTER*4 IDEFXC
      CHARACTER*4 IDEFBK
      CHARACTER*4 IDEFMC
      CHARACTER*4 IDEPEC
      CHARACTER*4 ISEQSW
      CHARACTER*4 IFENSW
      CHARACTER*4 INEGSW
      CHARACTER*4 IDEFMA
      CHARACTER*4 IDEFMO
      CHARACTER*4 IDEFM2
      CHARACTER*4 IDEFM3
      CHARACTER*4 IDEFPO
      CHARACTER*4 IDEFCN
      CHARACTER*4 IDEFDC
      CHARACTER*4 IDEFTU
      COMMON /CMISC/
     1IERASW,IBELSW,ISORSW,ICOPSW,
     1IPENSW,
     1IBACCO,IMARCO,IANISW,
     1IDEFXC,IDEFBK,IDEFMC,IDEPEC,
     1ISEQSW,
     1IFENSW,
     1INEGSW,
     1IDEFMA,IDEFMO,IDEFM2,IDEFM3,
     1IDEFPO,IDEFCN,IDEFDC,
     1IDEFTU
C
      CHARACTER*4 IPSTNW
      CHARACTER*4 IPSTN2
      COMMON/IPSTNW/IPSTNW,IPSTN2
C
      INTEGER IX1TC2(3)
      INTEGER IX2TC2(3)
      INTEGER IY1TC2(3)
      INTEGER IY2TC2(3)
      INTEGER IZ1TC2(3)
      INTEGER IZ2TC2(3)
C
      INTEGER IX1FC2(3)
      INTEGER IX2FC2(3)
      INTEGER IY1FC2(3)
      INTEGER IY2FC2(3)
      INTEGER IZ1FC2(3)
      INTEGER IZ2FC2(3)
C
      INTEGER IX1ZC2(3)
      INTEGER IX2ZC2(3)
      INTEGER IY1ZC2(3)
      INTEGER IY2ZC2(3)
      INTEGER IZ1ZC2(3)
      INTEGER IZ2ZC2(3)
C
      INTEGER IVGRC2(3)
      INTEGER IHGRC2(3)
      INTEGER ITITC2(3)
      INTEGER IMARC2(3)
      INTEGER IBACC2(3)
C
      INTEGER IX1LC2(3)
      INTEGER IX2LC2(3)
      INTEGER IX3LC2(3)
      INTEGER IY1LC2(3)
      INTEGER IY2LC2(3)
      INTEGER IZ1LC2(3)
      INTEGER IZ2LC2(3)
C
      INTEGER ILEGC2(MAXLG,3)
      INTEGER IBOBC2(MAXBX,3)
      INTEGER IBOFC2(MAXBX,3)
      INTEGER IARRC2(MAXAR,3)
      INTEGER ISEGC2(MAXSG,3)
      INTEGER ILINC2(MAXLN,3)
      INTEGER ICHAC2(MAXCH2,3)
      INTEGER ITEXC2(3)
      INTEGER IFILC2(MAXFL,3)
      INTEGER IPATC2(MAXPT,3)
      INTEGER ISPIC2(MAXSP,3)
      INTEGER IBABC2(MAXBA,3)
      INTEGER IBAFC2(MAXBA,3)
      INTEGER IBAPC2(MAXBA,3)
      INTEGER IREBC2(MAXRG,3)
      INTEGER IREFC2(MAXRG,3)
      INTEGER IREPC2(MAXRG,3)
      INTEGER IMABC2(MAXMR,3)
      INTEGER IMAFC2(MAXMR,3)
      INTEGER IMAPC2(MAXMR,3)
      INTEGER ITEBC2(MAXTX,3)
      INTEGER ITEFC2(MAXTX,3)
      INTEGER ITEPC2(MAXTX,3)
C
      COMMON/RGBCOL/IX1TC2,IX2TC2,IY1TC2,IY2TC2,IZ1TC2,IZ2TC2,
     1              IX1FC2,IX2FC2,IY1FC2,IY2FC2,IZ1FC2,IZ2FC2,
     1              IX1ZC2,IX2ZC2,IY1ZC2,IY2ZC2,IZ1ZC2,IZ2ZC2,
     1              IVGRC2,IHGRC2,ITITC2,IBACC2,IMARC2,
     1              IX1LC2,IX2LC2,IY1LC2,IY2LC2,IZ1LC2,IZ2LC2,
     1              ILEGC2,IBOBC2,IBOFC2,IARRC2,ISEGC2,ILINC2,
     1              ICHAC2,ITEXC2,IFILC2,IPATC2,ISPIC2,IBABC2,
     1              IBAFC2,IBAPC2,IREBC2,IREFC2,IREPC2,IMABC2,
     1              IMAFC2,IMAPC2,ITEBC2,ITEFC2,ITEPC2,IX3LC2
#ifdef HAVE_GKS
      INTEGER ASF(13)
#endif
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      DIMENSION PX(10)
      DIMENSION PY(10)
C
CCCCC CHARACTER*80 IFILE1
      CHARACTER (LEN=MAXFNC) :: IFILE1
      CHARACTER*12 ISTAT1
      CHARACTER*12 IFORM1
      CHARACTER*12 IACCE1
      CHARACTER*12 IPROT1
      CHARACTER*12 ICURS1
      CHARACTER*4 IENDF1
      CHARACTER*4 IREWI1
      CHARACTER*4 IERRF1
C
      COMMON/GRAERR/IGFLAG
C
C-----COMMON VARIABLES (GENERAL)--------------------------------------
C
C  DEFINE RGB TABLES FOR CGM
C
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
#ifdef HAVE_GKS
      DATA ASF /13*1/
#endif
C
      DATA (JCGM(I),I=1,MAXCLR)/
     1   1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
     2  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     3  21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
     4  31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
     5  41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
     6  51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
     7  61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
     8  71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
     9  81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
     *  91, 92, 93, 94, 95, 96, 97, 98, 99,100,
     A 101,102,103,104,105,106,107,108,109,110,
     B 111,112,113,114,115,116,117,118,119,120,
     B 121,122,123,124,125,126,127,128,129,130,
     C 131,132,133,134,135,136,137,138,139,130,
     D 141,142,143,144,145,146,147,148,149,140,
     E 151,152,153,154,155,156,157,158,159,150,
     F 161,162,163/
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='INDE'
      IERROR='NO'
      ISUBRO=' '
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'INDE')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRINDE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,IMODE2,IMODE3
   52   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IGUNIT,IGBAUD,IGCODE,ISOFT,ISOFT2,ISOFT3
   54   FORMAT('IGUNIT,IGBAUD,IGCODE,ISOFT,ISOFT2,ISOFT3 = ',
     1         2I8,4(2X,A4))
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)IBUGG4,ISUBG4,IERRG4,IOFFSV,IOFFSH
   56   FORMAT('IBUGG4,ISUBG4,IERRG4,IOFFSV,IOFFSH = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        IF(IMODEL.EQ.'JPEG')GOTO12010
        IF(IMODEL.EQ.'PNG ')GOTO12020
        IF(IMODEL.EQ.'WBMP')GOTO12030
        IF(IMODEL.EQ.'GIF ')GOTO12040
        IF(IMODEL.EQ.'TIFF')GOTO12050
        IF(IMODEL.EQ.'BMP ')GOTO12060
        IF(IMODEL.EQ.'WEBP')GOTO12070
        IF(IMODEL.EQ.'TGA ')GOTO12080
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4020')GOTO1100
        IF(IMODEL.EQ.'4022')GOTO1100
        IF(IMODEL.EQ.'4025')GOTO1100
        IF(IMODEL.EQ.'4027')GOTO1100
C
        IF(IMODEL.EQ.'4105')GOTO1200
        IF(IMODEL.EQ.'4107')GOTO1200
        IF(IMODEL.EQ.'4109')GOTO1200
        IF(IMODEL.EQ.'4115')GOTO1200
        IF(IMODEL.EQ.'4107')GOTO1200
        IF(IMODEL.EQ.'4113')GOTO1200
C
        GOTO9000
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 11--                                    **
C               **  TREAT THE TEKTRONIX 4027 CASE--              **
C               **  (A COLOR TERMINAL).                          **
C               **  4. ENTER MONITOR AREA (SO CAN                **
C               **     COMMUNICATE WITH HOST)                    **
C               **     EXCLAMATION POINT MON K  (PAGE XXX)       **
C               **  2. DEFINE WORK AREA AS TOP 32 LINES          **
C               **     AND HAVE HOST OUTPUT TO TO WORK AREA      **
C               **     WHILE LEAVING KEYBOARD OUTPUT AS IS       **
C               **     EXCLAMATION POINT WOR 32 H  (PAGE XXX)    **
C               **  3. DEFINE DIALOGUE AREA AS TOP 32 LINES      **
C               **     OF WORK AREA (PLUS A BAD SIDE-EFFECT      **
C               **     OF MOVING CURSOR INTO DIALOGUE AREA       **
C               **     THERBY PROHIBITING FURTHER COMMIUNCITION  **
C               **     TO THE HOST SINCE CAN ONLY COMMUNICATE    **
C               **     WITH HOST IF IN MONITOR AREA.)            **
C               **     EXCLAMATION POINT GRA 1,32   (PAGE XXX)   **
C               **  4. RE-ENTER MONITOR AREA (SO CAN             **
C               **     COMMUNICATE WITH HOST)                    **
C               **     EXCLAMATION POINT MON K  (PAGE XXX)       **
C               ***************************************************
C
C     CORRECTIONS PROVIDED BY MARIA ZIMMER
C     WRIGHT-PATTERSON AFB, OHIO    JANUARY 1985
C
 1100 CONTINUE
      ICSTR(1:6)='!MON K'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='!WOR 32 H'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='!GRA 1,32'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:6)='!MON K'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               *******************************************************
C               **  STEP 2--                                         **
C               **  TREAT THE TEKTRONIX 4105 CASE                    **
C               **  (A COLOR DEVICE)                                 **
C               **  1. ENABLE DIALOGUE AREA                          **
C               **     ESCAPE KA1   (PAGE 5-14)                      **
C               **  2. MAKE DIALOGUE AREA VISIBLE                    **
C               **     ESCAPE LV1      (PAGE 5-39)                   **
C               **  3. SET DIALOGUE AREA COLOR MAP--ESCAPE TF 4      **
C               **     INDEX HUE LIGHT                               **
C               **     ESCAPE TF40000                                **
C               **     ESCAPE TF410F40                               **
C               **     ESCAPE TF42G8C2F4                             **
C               **     ESCAPE TF43O0C2F4                             **
C               **     ESCAPE TF440C2F4                              **
C               **     ESCAPE TF45R<C2F4                             **
C               **     ESCAPE TF46C<C2F4                             **
C               **     ESCAPE TF47K4C2F4                             **
C               **     (PAGE 5-37 AND G-1)                           **
C               **  4. SET TEXT, TEXT CELL , AND BACKGROUND COLOR    **
C               **     FOR DIALOGUE                                  **
C               **     ESCAPE LI100  (PAGE 5-37)                     **
C               **   ESCAPE LZ      (PAGE 5-8)                       **
C               **  1. SET GRAPHICS AREA COLOR MAP                   **
C               **     ESCAPE TG140000                               **
C               **     ESCAPE TG1410F40                              **
C               **     ESCAPE TG142G8C2F4                            **
C               **     ESCAPE TG143O0C2F4                            **
C               **     ESCAPE TG1440C2F4                             **
C               **     ESCAPE TG145R<C2F4                            **
C               **     ESCAPE TG146C<C2F4                            **
C               **     ESCAPE TG147K4C2F4                            **
C               **     (PAGE 5-37 AND G-1)                           **
C               **  2. SET BACKGROUND COLOR FOR GRAPHICS             **
C               **     ESCAPE RA101     (PAGE 5-51)                  **
C               **  3. SET TEXT COLOR FOR GRAPHICS                   **
C               **     ESCAPE MT0     (PAGE 5-50)                    **
C               **  4. SET LINE & MARKER COLOR FOR GRAPHICS          **
C               **     ESCAPE ML1   (PAGE 5-45)                      **
C               **  5. SET LINE PATTERN (TO SOLID)                   **
C               **     ESCAPE SINGLE (LEFT TO RIGHT) QUOTE           **
C               **    (PAGE 5-52)                                    **
C               **  6. SET WINDOW TO (0,0) AND (4095,3132)           **
C               **     ESCAPE RW????     (PAGE 5-52 AND 98)          **
C               **  7. ERASE SCREEN                                  **
C               **     ESCAPE FORM-FEED                              **
C               ********************************************************
C
 1200 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='KA1'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='LV1'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:8)='TF40000'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:9)='TF410F40'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:11)='TF42G8C2F4'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:11)='TF43O0C2F4'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:10)='TF440C2F4'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:11)='TF45R<C2F4'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:11)='TF46C<C2F4'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:11)='TF47K4C2F4'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:6)='LI100'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:9)='TG140000'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:10)='TG1410F40'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:12)='TG142G8C2F4'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:12)='TG143O0C2F4'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:11)='TG1440C2F4'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:12)='TG145R<C2F4'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:12)='TG146C<C2F4'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:12)='TG147K4C2F4'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:6)='RA101'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='MT0'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='ML1'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=IFFC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ****************************************************
C               **  STEP 21--                                     **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE           **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER          **
C               **             OPERATING AND PROGRAMMING MANUAL,  **
C               **             PAGE XX.                           **
C               ****************************************************
C
 2100 CONTINUE
      CALL GROPDE
      ICSTR(1:1)='+'
      ICSTR(2:2)=IESCC
      ICSTR(3:5)='.K}'
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      CALL GRCLDE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO INITIALIZE DEVICE--                          **
C               **  SEND    IN                                      **
C               **  (WITH A TRAILING SEMI-COLON WHICH IS THE        **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 40, 141.                        **
C               **  ALLOW GRAPH LIMITS ON THE PLOTTER TO            **
C               **  TAKE ON HARDWARE DEFAULT                        **
C               **  (X = 520 TO 15720 MACHINE UNITS                 **
C               **  AND Y = 380 TO 10380 MACHINE UNITS).            **
C               **  BY PURPOSELY NOT SETTING THE GRAPH LIMITS,      **
C               **  THIS WILL ALLOW THE USER TO MANUALLY            **
C               **  CHANGE LIMITS BY THE PLOTTER BUTTONS            **
C               **  SO AS TO ACCOMODATE DIFFERENT SIZE PAPER.       **
C               **  ALSO ALLOW THE PLOTTER UNITS                    **
C               **  (= PLOTTER "RESOLUTION") TO                     **
C               **  TAKE ON THE HARDWARE DEFAULT WHICH IS           **
C               **  3040 UNITS IN THE X DIRECTION AND               **
C               **  2000 UNITS IN THE Y DIRECTION                   **
C               ******************************************************
C
 2200 CONTINUE
C
C     THE FOLLOWING WAS COMMENTED OUT
C     ON THE SUGGESTION OF PETER VERDIER (DEC., 1984)
C
CCCCC ICSTR(1:3)='IN;'
CCCCC NCSTR=3
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC AUGUST 1992.  FOLLOWING LINES ADDED FOR LASER JET III
      IF(IMODE3.EQ.'LJET')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:2)='E'
        NCSTR=2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(2:4)='%0B'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:3)='IN;'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:4)='RO90'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      ICSTR(1:2)='SC'
      NCSTR=2
      NCHTOT=5
      IXMIN=0
      IXMAX=IHPGX
      IYMIN=0
      IYMAX=IHPGY
      CALL GRTRIN(IXMIN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IXMAX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IYMIN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IYMAX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=';'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  TO INITIATE DEVICE--
C               **     STEP 1--TURN GRAPHICS DISPLAY ON
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-4, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:5)='*dcZ'
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT                    CASE      **
C               **********************************************************
C
 2600 CONTINUE
      ILAST=0
      ITYPE=10
      IF(IMODEL.EQ.'X')ITYPE=1
      IF(IMODEL.EQ.'PNM')ITYPE=2
      IF(IMODEL.EQ.'PNM ' .AND. IMODE2.EQ.'ASCI')ITYPE=14
      IF(IMODEL.EQ.'GIF')ITYPE=3
      IF(IMODEL.EQ.'AI')ITYPE=4
      IF(IMODEL.EQ.'PS')ITYPE=5
      IF(IMODEL.EQ.'POST')ITYPE=5
      IF(IMODEL.EQ.'FIG')ITYPE=6
      IF(IMODEL.EQ.'XFIG')ITYPE=6
      IF(IMODEL.EQ.'PCL')ITYPE=7
      IF(IMODEL.EQ.'HPGL')ITYPE=8
      IF(IMODEL.EQ.'TEKT')ITYPE=9
      IF(IMODEL.EQ.'TEKT' .AND. IMODE2.EQ.'FILE')ITYPE=19
      IF(IMODEL.EQ.'META')ITYPE=10
      IF(IMODEL.EQ.'META' .AND. IMODE2.EQ.'ASCI')ITYPE=13
      IF(IMODEL.EQ.'SVG')ITYPE=11
      IF(IMODEL.EQ.'PNG')ITYPE=12
      IF(IMODEL.EQ.'REGI')ITYPE=15
      IF(IMODEL.EQ.'REGI' .AND. IMODE2.EQ.'FILE')ITYPE=16
      IF(IMODEL.EQ.'CGM')ITYPE=17
      IF(IMODEL.EQ.'CGM' .AND. IMODE2.EQ.'ASCI')ITYPE=18
      IERR=0
C
      DO2601I=1,20
        IADE(I)=0
        IADE2(I)=0
 2601 CONTINUE
      IF(IX11DN.EQ.'DEFAULT')THEN
        IADE(1)=0
      ELSE
        DO2610I=20,1,-1
          ILAST=I
          IF(IX11DN(I:I).NE.' ')GOTO2619
 2610   CONTINUE
        ILAST=0
 2619   CONTINUE
        IF(ILAST.GT.0)THEN
          DO2620I=1,ILAST
            CALL DPCOAN(IX11DN(I:I),IJUNK)
            IADE(I)=IJUNK
 2620     CONTINUE
        ENDIF
        IADE(ILAST+1)=0
      ENDIF
C
      IXSIZE=ILPLXS
      IYSIZE=ILPLYS
      NCHAR=0
      IF(IXSIZE.LE.999)THEN
        NCHAR=NCHAR+1
        WRITE(ISTEMP(NCHAR:NCHAR+2),'(I3)')IXSIZE
        NCHAR=NCHAR+2
      ELSEIF(IXSIZE.LE.9999)THEN
        NCHAR=NCHAR+1
        WRITE(ISTEMP(NCHAR:NCHAR+3),'(I4)')IXSIZE
        NCHAR=NCHAR+3
      ELSE
        NCHAR=NCHAR+1
        WRITE(ISTEMP(NCHAR:NCHAR+4),'(I5)')IXSIZE
        NCHAR=NCHAR+4
      ENDIF
      NCHAR=NCHAR+1
      ISTEMP(NCHAR:NCHAR)='x'
      IF(IYSIZE.LE.999)THEN
        NCHAR=NCHAR+1
        WRITE(ISTEMP(NCHAR:NCHAR+2),'(I3)')IYSIZE
        NCHAR=NCHAR+2
      ELSEIF(IXSIZE.LE.9999)THEN
        NCHAR=NCHAR+1
        WRITE(ISTEMP(NCHAR:NCHAR+3),'(I4)')IYSIZE
        NCHAR=NCHAR+3
      ELSE
        NCHAR=NCHAR+1
        WRITE(ISTEMP(NCHAR:NCHAR+4),'(I5)')IYSIZE
        NCHAR=NCHAR+4
      ENDIF
C
      DO2660I=NCHAR,1,-1
        ILAST=I
        IF(ISTEMP(I:I).NE.' ')GOTO2669
 2660 CONTINUE
 2669 CONTINUE
      DO2670I=1,ILAST
        CALL DPCOAN(ISTEMP(I:I),IJUNK)
        IADE2(I)=IJUNK
 2670 CONTINUE
      IADE2(ILAST+1)=0
C
#ifdef HAVE_LIBPLOT
      CALL PLINIT(ITYPE,IERR,IADE2,DBLE(PLPLRO),IADE)
#endif
C
      IF(IERR.EQ.1)THEN
        WRITE(ICOUT,2671)
 2671   FORMAT('***** ERROR FROM LIBPLOT DEVICE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,2673)
 2673   FORMAT('      ERROR OCCURED IN CALL TO  pl_newpl  ROUTINE.')
        CALL DPWRST('XXX','BUG ')
      ELSEIF(IERR.EQ.2)THEN
        WRITE(ICOUT,2671)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,2678)
 2678   FORMAT('      ERROR OCCURED IN CALL TO  pl_selectpl  ROUTINE.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
      ICSTR(1:17)='INITIALIZE DEVICE'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:4)='INDE'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 33--                                    **
C               **  TREAT THE CGM     (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
C     AUGUST 1992.  DEFINE COLOR TABLE (CURRENTLY SUPPORT 67 COLORS
C                   IN CGM).
C
 3300 CONTINUE
      CALL DPCONA(39,IQUOTE)
      ICSTR(1:6)='BEGMF '
      ICSTR(7:7)=IQUOTE
      ICSTR(8:24)='DATAPLOT CGM FILE'
      ICSTR(25:25)=IQUOTE
      ICSTR(26:26)=';'
      NCSTR=26
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:18)='MFVERSION 1;'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:7)='MFDESC '
      ICSTR(8:8)=IQUOTE
      ICSTR(9:21)='AUGUST,  1992'
      ICSTR(22:22)=IQUOTE
      ICSTR(23:23)=';'
      NCSTR=23
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:11)='MFELEMLIST '
      ICSTR(12:12)=IQUOTE
      ICSTR(13:23)='DRAWINGPLUS'
      ICSTR(24:24)=IQUOTE
      ICSTR(25:25)=';'
      NCSTR=25
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='VDCTYPE REAL;'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C     AUGUST 1992.  COMMENT OUT FOLLOWING 6 LINES.  NOW ALLOW FOR
C                   FULL SET OF 67 DATAPLOT COLORS.  DEFINE THE COLOR MAP.
CCCCC ICSTR(1:16)='COLRINDEXPREC 8;'
CCCCC NCSTR=16
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC ICSTR(1:15)='MAXCOLRINDEX 8;'
CCCCC NCSTR=15
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:18)='COLRINDEXPREC 255;'
      NCSTR=18
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='MAXCOLRINDEX '
      NCSTR=13
      NCHTOT=3
      CALL GRTRIN(MAXCLR,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=';'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='COLRTABLE '
      NCHTOT=3
      DO3310I=1,MAXCLR
        NCSTR=10
        IVAL=I
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        IVAL=IRED(I)
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        IVAL=IGREEN(I)
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        IVAL=IBLUE(I)
        CALL GRTRIN(IVAL,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=';'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 3310 CONTINUE
C      END CHANGE
      ICSTR(1:9)='FONTLIST '
      ICSTR(10:10)=IQUOTE
      ICSTR(11:24)='HARDWARE      '
      ICSTR(25:25)=IQUOTE
      ICSTR(26:26)=','
      NCSTR=26
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='         '
      ICSTR(11:24)='SIMPLEX       '
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(11:24)='DUPLEX        '
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(11:24)='TRIPLEX       '
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(11:24)='COMPLEX       '
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(11:24)='TRIPLEX ITALIC'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(11:24)='SIMPLEX SCRIPT'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(11:24)='COMPLEX SCRIPT'
      ICSTR(26:26)=';'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='BEGMFDEFAULTS;'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:30)='VDCEXT 0.0, 0.0, 100.0, 100.0;'
      NCSTR=30
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='COLRMODE INDEXED;'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:21)='LINEWIDTHMODE SCALED;'
      NCSTR=21
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='ENDMFDEFAULTS;'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  USE CALCOMP LIBRARY ROUTINE                     **
C               **  ROUTINE PLOTS INITIALIZES PLOTTER               **
C               ******************************************************
C
 4100 CONTINUE
      IUNIT=IGUNIT
      REWIND(IUNIT)
      IREL=53
      IDUM=0
#ifdef HAVE_CALCOMP
      CALL PLOTS(IREL,IDUM,IUNIT)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
C     DO NOT SWITCH TO GRAPHICS MODE UNTIL DO A SCREEN ERASE IN
C     GRERSC ROUTINE.  NORMAL ALPHANUMERIC DOES NOT WORK WELL IN
C     GRAPHICS MODE, SO LEAVE TERMINAL IN TEXT MODE AS LONG AS POSSIBLE.
C
 4600 CONTINUE
      ILAHSW='OFF'
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
C
      IF(IQWNFL.EQ.'OPEN')THEN
        WRITE(ICOUT,4711)
 4711   FORMAT('***** WARNING FROM QUICKWIN DEVICE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,4713)
 4713   FORMAT('      QUCIKWIN DEVICE APPEARS TO BE OPEN, ',
     1         'NOTHING DONE.')
        CALL DPWRST('XXX','BUG ')
        GOTO9000
      ENDIF
C
      IQWNFL='OPEN'
C
#ifdef HAVE_QWIN
CCCCC SPECIFY DESIRED DIMENSIONS AS MODEL (I.E., DEVICE 1 QWIN 400 300)
      IF(IMODEL.EQ.'DYNA')THEN
        AJUNK1=-1.
        AJUNK2=-1.
      ELSEIF(IMODEL.NE.' ' .AND. IMODE2.NE.' ')THEN
        READ(IMODEL(1:4),'(I4.4)',ERR=4701)ITEMP1
        READ(IMODEL(1:4),'(I4.4)',ERR=4701)ITEMP2
        IF(ITEMP1.GE.100 .AND.ITEMP1.LE.1000)AJUNK1=REAL(ITEMP1)
        IF(ITEMP2.GE.100 .AND.ITEMP2.LE.1000)AJUNK2=REAL(ITEMP2)
      ELSE
C
        IF(QWSCRN.EQ.'VGA')THEN
          AJUNK1=400.
          AJUNK2=300.
        ELSEIF(QWSCRN.EQ.'SVGA')THEN
          AJUNK1=600.
          AJUNK2=450.
        ELSEIF(QWSCRN.EQ.'LARG')THEN
          AJUNK1=700.
          AJUNK2=550.
        ELSEIF(QWSCRN.EQ.'LAPTOP')THEN
          AJUNK1=700.
          AJUNK2=450.
        ELSEIF(QWSCRN.EQ.'JJF')THEN
          AJUNK1=550.
          AJUNK2=500.
        ELSEIF(QWSCRN.EQ.'WIDE')THEN
          AJUNK1=900.
          AJUNK2=675.
        ELSEIF(QWSCRN.EQ.'LARG')THEN
          AJUNK1=700.
          AJUNK2=550.
        ELSE
          AJUNK1=600.
          AJUNK2=450.
        ENDIF
      ENDIF
 4701 CONTINUE
      DPSCREEN.NUMXPIXELS=-1
      DPSCREEN.NUMYPIXELS=-1
      DPSCREEN.NUMTEXTCOLS=-1
      DPSCREEN.NUMTEXTROWS=-1
      DPSCREEN.NUMCOLORS=-1
      DPSCREEN.FONTSIZE=-1
      DPSCREEN.TITLE="Dataplot Graphics"
      DPSCREEN.TITLE(18:18)=CHAR(0)
      OPEN(UNIT=99,FILE='USER',TITLE='Dataplot Graphics',
     1IOFOCUS=.TRUE.)
C
      IF(AJUNK1.LT.0.)GOTO9000
      IRESLT=INITIALIZEFONTS()
      IRESLT=SETFONT('fh16w8b')
      MODESTATUS=GETFONTINFO(MSFONT)
      ICHRHT=MSFONT.PIXHEIGHT
      ICHRWD=MSFONT.PIXWIDTH
      IF(ICHRWD.EQ.0)ICHRWD=MSFONT.AVGWIDTH
      IF(ICHRWD.EQ.0)ICHRWD=ICHRHT/2
      MODESTATUS=SETWINDOWCONFIG(DPSCREEN)
      IF(.NOT. MODESTATUS) MODESTATUS=SETWINDOWCONFIG(DPSCREEN)
      ISTATUS=DISPLAYCURSOR($GCURSORON)
      MODESTATUS=GETWINDOWCONFIG(DPSCREEN)
      IRESLT=GETWSIZEQQ(QWIN$FRAMEWINDOW,QWIN$SIZECURR,WINFO)
      AJUNK3=REAL(WINFO.W)
      AJUNK4=REAL(WINFO.H)
C
      WINFO.TYPE=QWIN$SET
      WINFO.W=50
      WINFO.H=20
      WINFO.X=10
      WINFO.Y=2
      IF(ICHRWD.GT.0)THEN
        WINFO.W=INT(AJUNK1/REAL(ICHRWD)+0.5)
        WINFO.X=MAX(INT((AJUNK3-AJUNK1)/REAL(ICHRWD)+0.5)-3,10)
      ENDIF
      IF(ICHRHT.GT.0)THEN
        WINFO.H=INT(AJUNK2/REAL(ICHRHT)+0.5)
        WINFO.Y=MAX(INT((AJUNK4-AJUNK2)/REAL(ICHRHT)+0.5)-3,2)
      ENDIF
      IRESLT=SETWSIZEQQ(99,WINFO)
      IRESLT=GETWSIZEQQ(99,QWIN$SIZECURR,WINFO)
C
      NUMHPP=WINFO.W*ICHRWD
      NUMVPP=WINFO.H*ICHRHT
      ANUMHP=REAL(NUMHPP)
      ANUMVP=REAL(NUMVPP)
      IRESLT=FOCUSQQ(IPR)
      ISTATUS=DISPLAYCURSOR($GCURSORON)
CCCCC FOLLOWING CODE ADDED 7/98  (TO ALLOW USER TO SET 
CCCCC BACKGROUND AND FOREGROUND COLORS FOR TEXT WINDOW)
CCCCC MAKE DISTINCTION BETWEEN DIRECT COLOR AND VGA COLOR MODES!
      IF(IQWNCL.EQ.'VGA')THEN
        IF(IQWNBC.LT.0)IQWNBC=0
        IF(IQWNBC.GT.15)IQWNBC=15
        IF(IQWNF2.LT.0)IQWNF2=0
        IF(IQWNF2.GT.15)IQWNF2=15
        IF(IQWNBC.NE.0 .OR. IQWNF2.NE.15)THEN
          IRESLT=SETACTIVEQQ(IPR)
CQWIN     IRESLT=SETBKCOLOR(INT2(IQWNBC))
          IRESLT=SETBKCOLOR(IQWNBC)
          IRESLT=SETTEXTCOLOR(INT2(IQWNF2))
CCCCC     CALL CLEARSCREEN($GCLEARSCREEN)
          IRESLT=SETACTIVEQQ(99)
        ENDIF
      ELSEIF(IQWNCL.EQ.'RGB')THEN
        IRESLT=SETACTIVEQQ(IPR)
        IF(IQWNBC.LT.0.OR.IQWNBC.GT.88)IQWNBC=0
        IF(IQWNF2.LT.0.OR.IQWNF2.GT.88)IQWNF2=1
        IF(IQWNBC.GE.0)THEN
          JTEMP=IQWNBC+1
          JTEMP2=RGBTOINTEGER(IRED(JTEMP),IGREEN(JTEMP),IBLUE(JTEMP))
          ISTATUS=SETBKCOLORRGB(JTEMP2)
        ENDIF
        JTEMP=IQWNF2+1
        JTEMP2=RGBTOINTEGER(IRED(JTEMP),IGREEN(JTEMP),IBLUE(JTEMP))
        ISTATUS=SETTEXTCOLORRGB(JTEMP2)
        ISTATUS=SETCOLORRGB(JTEMP2)
CCCCC   CALL CLEARSCREEN($GCLEARSCREEN)
        ISTATUS=DISPLAYCURSOR($GCURSORON)
        IRESLT=SETACTIVEQQ(99)
      ENDIF
C
CCCCC NOVEMBER 2002.  SUPPORT FOR "-TILE" OPTION.
C
      IF(IQWNTL.EQ.'ON')THEN
        IRESLT=CLICKMENUQQ(QWIN$TILE)
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(IORNSW.EQ.'LAND')THEN
        IORIEN=0
      ELSE IF(IORNSW.EQ.'PORT')THEN
        IORIEN=1
      ELSE IF(IORNSW.EQ.'SQUA')THEN
        IORIEN=3
      ELSE
        IORIEN=2
      END IF
C
      DO4810I=20,1,-1
        ILAST=I
        IF(IX11DN(I:I).NE.' ')GOTO4819
 4810 CONTINUE
 4819 CONTINUE
      DO4820I=1,ILAST
        CALL DPCOAN(IX11DN(I:I),IJUNK)
        IADE(I)=IJUNK
 4820 CONTINUE
      IADE(ILAST+1)=0
C
      DO4829I=1,8
      IWIND(I)=-1
 4829 CONTINUE
      ICOUNT=0
      IF(IMODEL.EQ.'    '.AND.IMODE2.EQ.'    ')GOTO4839
      CTEMP(1:4)=IMODEL(1:4)
      CTEMP(5:8)=IMODE2(1:4)
      ICOUNT=0
      DO4830I=8,1,-1
        IA=CTEMP(I:I)
        IF(IA.EQ.' ')GOTO4830
        ICOUNT=ICOUNT+1
        CALL DPCOAN(IA,IVALUE)
        IF(IVALUE.GE.48.AND.IVALUE.LE.57)THEN
          IWIND(ICOUNT)=IVALUE-48
        ELSEIF(IVALUE.GE.65.AND.IVALUE.LE.70)THEN
          IWIND(ICOUNT)=IVALUE-55
        ELSEIF(IVALUE.GE.97.AND.IVALUE.LE.102)THEN
          IWIND(ICOUNT)=IVALUE-87
        ELSE
          ICOUNT=1
          WRITE(ICOUT,4833)
          GOTO4839
        ENDIF
 4830 CONTINUE
 4833 FORMAT('***** WARNING--INVALID WINDOW ID FROM FRONT-END.  ',
     1'A SEPARATE GRAPHICS WINDOW WILL BE OPENED.')
 4839 CONTINUE
      IERRNO=0
      IXPIX=0
      IYPIX=0
#ifdef HAVE_GL
      CALL GLINIT(IXTEMP,IYTEMP,IORIEN,IXPIX,IYPIX,IADE,IWIND,ICOUNT,
     1            IERRNO)
#endif
      IF(IERRNO.EQ.1) THEN
         WRITE(ICOUT,4851)
 4851    FORMAT('CANNOT OPEN X11 WINDOW.')
         CALL DPWRST('XXX','BUG ')
         IX11OF='OFF'
      ELSE
         IX11OF='ON'
         ANUMHP=REAL(IXPIX)
         ANUMVP=REAL(IYPIX)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL IScreenOpen(' ','GW',800,600,16)
      CALL IScreenTitle('G','Dataplot')
      CALL IScreenInit(' ')
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      IHAND1=0
      IHAND2=1
      CALL WInitialise(' ')
      ISCRWID=WInfoScreen(1)
      ISCRHGT=WInfoScreen(2)
      ISCCOL=WInfoScreen(3)
      WINDOW%FLAGS=SysMenuOn + MinButton + MaxButton
      WINDOW%X=ISCRWID - (IWINHP + 10)
      WINDOW%Y=(ISCRHGT - IWINVP) - 50
      WINDOW%WIDTH=IWINHP
      WINDOW%HEIGHT=IWINVP
      IDR_MENU1=30001
      WINDOW%MENUID=IDR_MENU1
      WINDOW%TITLE='Dataplot Graphics'
CCCCC CALL WindowOpenChild(WINDOW,IHAND2)
      CALL WindowOpen(WINDOW)
      CALL WindowSelect(IHAND1)
C
      IXPIX=WInfoWindow(1)
      IYPIX=WInfoWindow(2)
CCCCC ANUMHP=REAL(IXPIX)
CCCCC ANUMVP=REAL(IYPIX)
      IF(IWINCL.EQ.'RGB')THEN
        CALL IGrPaletteInit()
        JCOL=1
        CALL IGrPaletteRGB(0,IRED(JCOL),IGREEN(JCOL),IBLUE(JCOL))
        IERRO2=InfoError(1)
        ISTAT2=InfoError(2)
        DO4960I=1,MAXCLR
          IINDEX=I
          CALL IGrPaletteRGB(IINDEX,IRED(IINDEX),IGREEN(IINDEX),
     1                       IBLUE(IINDEX))
          IERRO2=InfoError(1)
          ISTAT2=InfoError(2)
          IF(IERRO2.EQ.1 .OR. IERRO2.EQ.2)THEN
            WRITE(ICOUT,4969) IINDEX
 4969       FORMAT('*****LAHEY: ERROR LOADING COLOR INDEX ',I8)
            CALL DPWRST('XXX','BUG ')
          ENDIF
 4960   CONTINUE
        CALL IgrColourN(2)
      ELSE
        CALL IGrPaletteInit()
        CALL IgrColourN(223)
      ENDIF
      CALL IGrArea(0.,0.,1.,1.)
      CALL IGrAreaClear()
      CALL IGrUnits(0.,0.,100.,100.)
      ISTEMP=' '
      ISTEMP(1:NCPATH)=PATH(1:NCPATH)
      NC1=NCPATH+1
      NC2=NCPATH+9
      ISTEMP(NC1:NC2)='fixed.chr'
      IERRO2=0
      CALL IGrCharSet(ISTEMP)
CCCCC CALL IGrCharSet('H')
        IERRO2=InfoError(1)
        ISTAT2=InfoError(2)
        IF(IERRO2.EQ.1 .OR. IERRO2.EQ.2)THEN
          WRITE(ICOUT,4979)
 4979     FORMAT('*****LAHEY: ERROR LOADING FONT FILE')
          CALL DPWRST('XXX','BUG ')
        ENDIF
      CALL IGrCharSpacing('F')
CCCCC CALL WindowSelect(IHAND1)
      CALL IGrLineType(0)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO INITIALIZE DEVICE--                          **
C               **  USE THE 70 OP CODE (= RESET)                    **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 , B-1, AND E-1             **
C               **  MARCH, 1988 - USE ZETA EXTENDED CALCOMP LIBRARY **
C               **  PLOTS - INITIALIZES DEVICE                      **
C               **  DASHDF - DEFINE DEFAULT DASHED LINE PATTERNS    **
C               ******************************************************
C
 5100 CONTINUE
C
C     USE THE CALCOMP LIBRARY ROUTINES
C
      IUNIT=IGUNIT
      REWIND(IUNIT)
      IREL=53
      IDUM=0
#ifdef HAVE_ZETA
      CALL PLOTS(IREL,IDUM,IUNIT)
      CALL DASHDF(0,0,0,0)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               **  WRITTEN BY BILL ANDERSON                        **
C               ******************************************************
C
 6600 CONTINUE
      IDUMMY=0
#ifdef HAVE_SUN
      CALL isitcolor(IDUMMY)
#endif
      ISUNCL=IDUMMY
      IF (ISUNCL.LT.0) THEN
         WRITE(ICOUT,6601) 
 6601    FORMAT('Trouble opening SUN graphics window')
         CALL DPWRST('XXX','BUG ')
         GOTO 6620
      ENDIF
      IF(ISUNCL.EQ.1)THEN
         DD = 5
         CMAPSZ = 8
         CMAPNM = 'DATAPLOT'
      ELSE
         DD = 4
      ENDIF
#ifdef HAVE_SUN
      CALL cfopencgi()
#endif
      RETNED = 1
#ifdef HAVE_SUN
      CALL cfopenvws(IVSNAM,SCNNAM,WINNAM,WINDFD,
     1  RETNED,DD,CMAPSZ,CMAPNM,FLAGS,PTR,NOARGS,
     2  200,200,200,200)
#endif
      IF(ISUNCL.EQ.1) THEN
C    BLACK(I.E. 'DARK')
C    APRIL 1990: FOLLOWING 3 LINES MODIFIED AT SUGGESTION OF BILL ANDERSON.
C                SEEMS THAT ON 3/80 SUN'S, SETTING TO 0 GIVES WHITE, NOT
C                BLACK.
CCCCC    RD(1) = 0
CCCCC    GN(1) = 0
CCCCC    BE(1) = 0
         RD(1) = 1
         GN(1) = 1
         BE(1) = 1
C    RED
         RD(2) = 244
         GN(2) = 9
         BE(2) = 6
C    GREEN
         RD(3) = 50
         GN(3) = 198
         BE(3) = 12
C    BLUE
         RD(4) = 120
         GN(4) = 215
         BE(4) = 247
C    YELLOW
         RD(5) = 254
         GN(5) = 241
         BE(5) = 108
C    ORANGE
C        RD(6) = 245
C        GN(6) = 176
C        BE(6) = 33
C    BLACK
C    APRIL 1990, SAME PATCH AS ABOVE
CCCCC    RD(6) = 0
CCCCC    GN(6) = 0
CCCCC    BE(6) = 0
         RD(1) = 1
         GN(1) = 1
         BE(1) = 1
C    PURPLE
         RD(7) = 189
         GN(7) = 102
         BE(7) = 249
C    WHITE
         RD(8) = 255
         GN(8) = 255
         BE(8) = 255
#ifdef HAVE_SUN
         CALL cfcotable(0,RD,GN,BE,8)
#endif
      ENDIF
#ifdef HAVE_SUN
      CALL cfvdcext(1,1,10000,10000)
      CALL cftextprec(1)
      CALL cffixedfont(1)
      CALL cfcharexpfac(.5)
      CALL cfcharspacing(0.)
      CALL cfintstyle(1,1)
#endif
 6620 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO INITIALIZE DEVICE---                         **
C               **  WRITE OUT AN   XX                               **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 8100 CONTINUE
      IREGMC=3
      IF(IMODEL.EQ.'340'.OR.IMODEL.EQ.'VT-3')IREGMC=15
      GOTO9000
C
C               ******************************************************
C               **  STEP 86                                         **
C               **  TREAT THE POSTSCRIPT  CASE                      **
C               **  1) DEFINE 8 PROCEDURES:                         **
C               **     RIGHTSHOW -  PRINT A RIGHT JUSTIFIED STRING  **
C               **     CENTSHOW  -  PRINT A CENTER JUSTIFIED STRING **
C               **     LEFTSHOW  -  PRINT A LEFT JUSTIFIED STRING   **
C               **     VRIGHTSHOW - PRINT A VERTICAL RIGHT (I.E.,   **
C               **                  TOP) JUSTIFIED STRING           **
C               **     VCENTSHOW  - PRINT A VERTICAL CENTER         **
C               **                  JUSTIFIED STRING                **
C               **     VLEFTSHOW  - PRINT A VERTICAL LEFT (I.E.,    **
C               **                  BOTTOM) JUSTIFIED STRING        **
C               **     L          - ABBREVIATION FOR LINETO         **
C               **     M          - ABBREVIATION FOR MOVETO         **
C               **  2) SET INITIAL HARDWARE FONT (DEF = TIMES-ROMAN)**
C               **     FOR DATAPLOT DEFAULT SIZE (HEIGHT = 2.0,     **
C               **     USE 12 POINT FONT                            **
C               **     THE VERTICAL GAP IS NOT PART OF THE HEIGHT   **
C               **     THE CURRENT FONT AND POINT SIZE ARE STORED IN**
C               **     THE DEVICE COMMON BLOCKS AND MAY BE CHANGED  **
C               **     VIA "SET" COMMANDS.                          **
C               **  3) SCALE PLOT TO DESIRED POINTS PER INCH        **
C               **     (POSTSCRIPT DEFAULT IS 72, MOST DEVICES 300) **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **             COOKBOOK, ADOBE SYSTEMS              **
C               **             POSTSCRIPT LANGUAGE REFERENCE        **
C               **             MANUAL, ADOBE SYSTEMS                **
C               **  NOTE: POSTSCRIPT IS CASE SENSITIVE!!!           **
C               **  MODIFIED JANUARY 1990.                          **
C               **  A) SUPPORT ENCAPSULATED POSTSCRIPT              **
C               **     NOTE THAT ENCAPSULATED POSTSRIPT MEANS EACH **
C               **     PAGE MUST BE SELF-CONTAINED, SO STUFF NORMALLY*
C               **     DONE HERE WILL BE DONE IN GRERSC INSTEAD.    **
C               **     IF MORE THAN ONE PAGE GENERATED, THE USER    **
C               **     WILL NEED TO SPLIT THE FILE UP VIA AN EDITOR **
C               **     TO PUT EACH PAGE INTO A SEPARATE FILE.       **
C               **  B) ENCAPSULATED POSTSCRIPT MUST BE IN           **
C               **     "CONFORMING" STYLE (SEE APPENDIX C OF        **
C               **     POSTSCRIPT LANGUAGE REFERENCE MANUAL BOOK    **
C               **     (THE RED ONE) FOR DETAILS.  FOR CONSISTENCY, **
C               **     USE CONFORMING STYLE EVEN IF DO NOT USE      **
C               **     ENCAPSULATED POSTSCRIPT.                     **
C               **  NOTE THAT ENCAPSULATED POSTSCRIPT SHOULD ONLY   **
C               **  BE USED IF NEEDED TO INTEGRATE INTO ANOTHER     **
C               **  PROGRAM (E.G., WORDPERFECT OR PAGE MAKER).      **
C               ******************************************************
C
C  NOVEMBER, 1990 BUG FIX.  MODIFIED HOW MARGINS ARE HANDLED.
C  OCTOBER, 1991.  ADDITIONAL FONTS, ALSO "%!" IN COL. 1 OR COL. 2
C  DECEMBER 1991.  BUG FIX IN BOUNDING BOX (SHOULD BE BASED ON DEFAULT
C  POSTSCRIPT UNITS, NOT IN DATAPLOT POSTSCRIPT UNITS).
C  JANUARY 1993.  NO LEADING SPACE BEFORE "%%" CAUSED PROBLEM WITH
C  FRAMEMAKER.
C  JANUARY  2003: DATAPLOT SETS BOUNDING BOX TO 11INx11IN BY DEFAULT
C                 SINCE IT CAN SWITCH BETWEEN LANDSCAPE/PORTRAIT
C                 MODES.  HOWEVER, SOMETIMES FOR IMPORTING INTO OTHER
C                 PROGRAMS, IT IS PREFFERABLE TO SET THE BOUNDING BOX
C                 MORE EXPLICITLY (I.E., LANDSCAPE OR PORTRAIT).  THE
C                 SET POSTSCRIPT BOUNDING BOX FIXED COMMAND WILL SET
C                 THIS EXPLICIT BOUNDING BOX.
C  JANUARY  2003: DATAPLOT DOES AN INITIAL PAGE ERASE IN CASE
C                 DIAGRAMMATIC GRAPHICS BEING GENERATED.  SET AN INTERNAL
C                 VARIABLE (IPSTNW) TO INDICATE PAGE ERASE HAS BEEN
C                 PERFORMED.
C  FEBRUARY 2009: ADD SEVERAL PROCEDURES TO FACILITATE SUPPORT FOR
C                 SUBSCRIPTS/SUPERSCRIPTS AND GREEK CHARACTERS
C                 (setpsfont, psstringwidth, addstringwidth,
C                 leftshow2, vleftshow2)
C
C  JANUARY  1990: FOLLOWING SECTION MODIFIED TO BE "CONFORMING"
C                 POSTSCRIPT
C  JANUARY  1993. ONLY SET PAGE NUMBER FOR DEVICE 2
C  NOVEMBER 2015. THE "SET DEVICE 3 <AUTOMATIC/USER>" COMMAND ALLOWS
C                 THE USER TO SPECIFY WHETHER DEVICE 3 OUTPUT WILL BE
C                 HANDLED AUTOMATICALLY BY DATAPLOT OR EXPLICITLY
C                 BY THE USER.  WHEN HANDLED AUTOMATICALLY, MODEL 3
C                 IS SET TO "DEV3".  WHEN CONTROLLED BY THE USER, WE
C                 NEED TO MAINTAIN SEPARATE PAGE NUMBERING FOR
C                 DEVICE 2 AND DEVICE 3 (COMPARE IGUNIT TO IPL1NU/
C                 IPL2NU TO DETERMINE WHICH DEVICE IS ACTIVE).
C
 8600 CONTINUE
C
      IF(IMODE3.NE.'DEV3')THEN
        IF(IGUNIT.EQ.IPL1NU)IPSTPN=0
        IF(IGUNIT.EQ.IPL2NU)IPSTP2=0
      ENDIF
      IF(IMODEL.EQ.'ENCA')GOTO9000
CCCCC ICSTR(1:40)='%! - THIS LINE REQUIRED FOR UNIX SYSTEMS'
CCCCC FOLLOWING LINES MODIFIED.  SOME SYSTEMS WANT COLUMN 1, OTHERS COLUMN 2
      ICSTR(1:14)='%!PS-Adobe-2.0'
      NCSTR=14
      IF(IPSTSP.EQ.'OFF'.OR.IPSTSP.EQ.'NO'.OR.IPSTSP.EQ.'FALS')THEN
        IPSTSP='OFF'
        NCSTR=-14
      END IF
C  END CHANGE
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(IGFLAG.EQ.1)GOTO9000
C
C  FOLLOWING LINES ADDED JANUARY, 1990.
C
C  JANUARY 1993.  NO LEADING SPACE BEFORE "%%"
C
      ICSTR(1:19)='%%Creator: Dataplot'
      NCSTR=19
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:33)='%%Title: Dataplot Postscript File'
      NCSTR=33
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:20)='%%CreationDate: NULL'
      NCSTR=20
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:16)='%%Pages: (atend)'
      NCSTR=16
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:40)='%%DocumentFonts: Times-Roman Times-Bold '
      ICSTR(41:69)='Times-Italic Times-BoldItalic'
      NCSTR=69
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:46)='%%+ Helvetica Helvetica-Bold Helvetica-Oblique'
      ICSTR(47:76)=' Helvetica-BoldOblique Courier'
      NCSTR=76
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:33)='%%+ Courier-Bold Courier-Oblique '
      ICSTR(34:53)=' Courier-BoldOblique'
      NCSTR=53
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  OCTOBER 1991.  ADDITIONAL FONTS ADDED
      ICSTR(1:42)='%%+ AvantGarde-Book AvantGarde-BookOblique'
      ICSTR(43:81)=' AvantGarde-Demi AvantGarde-DemiOblique'
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Bookman-Demi Bookman-DemiItalic       '
      ICSTR(43:81)='Bookman-Light Bookman-LightItalic      '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Helvetica-Narrow Helvetica-Narrow-Bold'
      ICSTR(43:81)=' Helvetica-Narrow-BoldOblique          '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Helvetica-Narrow-Oblique              '
      ICSTR(43:81)='NewCentury-Schlbk-Bold                 '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ NewCentury-Schlbk-Italic              '
      ICSTR(43:81)='NewCenturySchlbk-BoldItalic            '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ Palatino-Roman Palatino-Bold          '
      ICSTR(43:81)='Palatino-Italic Palatino-BoldItalic    '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:42)='%%+ ZapfChancery-MediumItalic  Symbol     '
      ICSTR(43:81)='                                       '
      NCSTR=81
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  END CHANGE
      ICSTR(1:19)='%%BoundingBox: 0 0 '
      NCSTR=19
      NCHTOT=5
C  DECEMBER 1991.  FOLLOWING LINE CHANGED.  BASE ON DEFAULT POSTSCRIPT
C  UNITS (72 PPI) RATHER THAN DATAPLOT UNITS.
C  JANUARY 2003.  BOUNDING BOX CAN BE EITHER FIXED (LANDSCAPE OR
C  PORTRAIT) OR FLOATING (CAN SWITCH BETWEEN LANDSCAPE OR PORTRAIT).
CCCCC IJUNK=INT(PSTPPI*11.+0.5)
CCCCC IJUNK=INT(72.*11.+0.5)
CCCCC CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
CCCCC NCSTR=NCSTR+1
CCCCC ICSTR(NCSTR:NCSTR)=' '
CCCCC CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
CCCCC IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC ICSTR(1:13)='%%EndComments'
CCCCC NCSTR=13
      IF(IPSTBB.EQ.'FIXE')THEN
        IF(IORNSW.EQ.'PORT')THEN
          ICSTR(1:26)='%%BoundingBox: 0 0 612 792'
          NCSTR=26
        ELSEIF(IORNSW.EQ.'LAND')THEN
          ICSTR(1:26)='%%BoundingBox: 0 0 792 612'
          NCSTR=26
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          ICSTR(1:26)='%%BoundingBox: 0 0 612 468'
          NCSTR=26
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          ICSTR(1:26)='%%BoundingBox: 0 0 612 612'
          NCSTR=26
        ELSE
          ICSTR(1:26)='%%BoundingBox: 0 0 792 792'
          NCSTR=26
        ENDIF
      ELSE
        ICSTR(1:26)='%%BoundingBox: 0 0 792 792'
        NCSTR=26
      ENDIF
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  END JANUARY 1993 CHANGES
C
      ICSTR(1:43)='% DATAPLOT POSTSCRIPT DRIVER, JANUARY, 1990'
      NCSTR=43
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:43)='% PROLOG SECTION: DATAPLOT DEFINITIONS     '
      NCSTR=43
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:44)='%DEFINE PROCEDURE "rightshow" TO PRINT RIGHT'
      ICSTR(45:72)=' JUSTIFIED STRING.  CALL BY:'
      NCSTR=72
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:20)='% (STRING) rightshow'
      NCSTR=20
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/rightshow'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IX exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   IY moveto'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:44)='%DEFINE PROCEDURE "centshow" TO PRINT CENTER'
      ICSTR(45:72)=' JUSTIFIED STRING.  CALL BY:'
      NCSTR=72
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:19)='% (STRING) centshow'
      NCSTR=19
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='/centshow'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:8)='   2 div'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IX exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   IY moveto'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:44)='%DEFINE PROCEDURE "leftshow" TO PRINT LEFT  '
      ICSTR(45:72)=' JUSTIFIED STRING.  CALL BY:'
      NCSTR=72
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:19)='% (STRING) leftshow'
      NCSTR=19
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:9)='/leftshow'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:25)='  {IX IY moveto show} def'
      NCSTR=25
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "vrightshow" TO PRINT RIGHT'
      ICSTR(46:82)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=82
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:28)='% newpath IX IY moveto gsave'
      NCSTR=28
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:30)='% (STRING) vrightshow grestore'
      NCSTR=30
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:11)='/vrightshow'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IY exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='   IX exch moveto'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='    90 rotate'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "vcentshow" TO PRINT CENTER'
      ICSTR(46:82)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=82
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:28)='% newpath IX IY moveto gsave'
      NCSTR=28
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:29)='% (STRING) vcentshow grestore'
      NCSTR=29
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/vcentshow'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:22)='  {dup stringwidth pop'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:8)='   2 div'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='   IY exch sub'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='   IX exch moveto'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:14)='     90 rotate'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='   show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "vleftshow" TO PRINT LEFT  '
      ICSTR(46:82)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=82
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:35)='%  /IX <XCOOR> def /IY <YCOOR> def '
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:28)='% newpath IX IY moveto gsave'
      NCSTR=28
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:29)='% (STRING) vleftshow grestore'
      NCSTR=29
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/vleftshow'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:36)='  {IX IY moveto 90 rotate show} def'
      NCSTR=36
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC FEBRUARY 2009: ADD "setpsfont" PROCEDURE TO DEFINE THE
CCCCC                POSTSCRIPT FONT.
C
      ICSTR(1:44)='%DEFINE PROCEDURE "setpsfont" TO DEFINE THE '
      ICSTR(45:84)='POSTSCRIPT FONT NAME AND SIZE.  CALL BY:'
      NCSTR=84
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:48)='%  /PSFONT <FONTNAME> def /PSSIZE <FONTSIZE> def'
      ICSTR(49:58)=' setpsfont'
      NCSTR=58
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/setpsfont'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:52)='  {PSFONT  findfont  PSSIZE  scalefont  setfont} def'
      NCSTR=52
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC FEBRUARY 2009: ADD "psstringwidthr" PROCEDURE TO MOVE THE
CCCCC                STARTING POSITION OF A RIGHT JUSTIFIED STRING.
C
      ICSTR(1:47) ='%DEFINE PROCEDURE "psstringwidthr" TO MOVE THE '
      ICSTR(48:93)='STARTING POSITION OF A RIGHT JUSTIFIED STRING.'
      NCSTR=93
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=9
      ICSTR(1:NCSTR)='%CALL BY:'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=26
      ICSTR(1:NCSTR)='%  (STRING) psstringwidthr'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=15
      ICSTR(1:NCSTR)='/psstringwidthr'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=48
      ICSTR(1:NCSTR)='  {dup stringwidth pop 0 exch sub 0 rmoveto} def'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC FEBRUARY 2009: ADD "psstringwidthc" PROCEDURE TO MOVE THE
CCCCC                STARTING POSITION OF A CENTER JUSTIFIED STRING.
C
      ICSTR(1:47) ='%DEFINE PROCEDURE "psstringwidthc" TO MOVE THE '
      ICSTR(48:94)='STARTING POSITION OF A CENTER JUSTIFIED STRING.'
      NCSTR=94
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=9
      ICSTR(1:NCSTR)='%CALL BY:'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=26
      ICSTR(1:NCSTR)='%  (STRING) psstringwidthc'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=15
      ICSTR(1:NCSTR)='/psstringwidthc'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=55
      ICSTR(1:50)='  {dup stringwidth pop 2 div 0 exch sub 0 rmoveto}'
      ICSTR(51:NCSTR)='  def'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC FEBRUARY 2009: ADD "psstringwidthtv" PROCEDURE TO MOVE THE
CCCCC                STARTING POSITION OF A RIGHT JUSTIFIED STRING.
C
      ICSTR(1:48) ='%DEFINE PROCEDURE "psstringwidthtv" TO MOVE THE '
      ICSTR(49:92)='STARTING POSITION OF A TOP JUSTIFIED VERTICAL'
      ICSTR(93:100)=' STRING.'
      NCSTR=100
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=9
      ICSTR(1:NCSTR)='%CALL BY:'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=27
      ICSTR(1:NCSTR)='%  (STRING) psstringwidthtv'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=16
      ICSTR(1:NCSTR)='/psstringwidthtv'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=56
      ICSTR(1:44)='  {dup stringwidth pop 0 exch sub 0 exch '
      ICSTR(45:NCSTR)='rmoveto} def'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC FEBRUARY 2009: ADD "psstringwidthcv" PROCEDURE TO MOVE THE
CCCCC                STARTING POSITION OF A CENTER JUSTIFIED VERTICAL STRING.
C
      ICSTR(1:48) ='%DEFINE PROCEDURE "psstringwidthcv" TO MOVE THE '
      ICSTR(49:87)='STARTING POSITION OF A CENTER JUSTIFIED'
      ICSTR(88:103)='VERTICAL STRING.'
      NCSTR=103
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=9
      ICSTR(1:NCSTR)='%CALL BY:'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=27
      ICSTR(1:NCSTR)='%  (STRING) psstringwidthcv'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=16
      ICSTR(1:NCSTR)='/psstringwidthcv'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=59
      ICSTR(1:46)='  {dup stringwidth pop 2 div 0 exch sub 0 exch'
      ICSTR(47:NCSTR)=' rmoveto} def'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:45)='%DEFINE PROCEDURE "leftshow2" TO PRINT LEFT  '
      ICSTR(45:93)=' JUSTIFIED STRING AT CURRENT POSITION.  CALL BY:'
      NCSTR=93
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:20)='% (STRING) leftshow2'
      NCSTR=20
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='/leftshow2'
      NCSTR=10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:12)='  {show} def'
      NCSTR=12
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:47)='%DEFINE PROCEDURE "vleftshow2" TO PRINT BOTTOM  '
      ICSTR(48:84)=' JUSTIFIED VERTICAL STRING.  CALL BY:'
      NCSTR=84
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=21
      ICSTR(1:NCSTR)='% (STRING) vleftshow2'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=11
      ICSTR(1:NCSTR)='/vleftshow2'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=33
      ICSTR(1:NCSTR)='  {90 rotate show -90 rotate} def'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:52)='% DEFINE PROCEDURE "l" AS ABBREVIATION OF lineto'
      NCSTR=52
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:15)='/l {lineto} def'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:52)='% DEFINE PROCEDURE "m" AS ABBREVIATION OF moveto'
      NCSTR=52
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:15)='/m {moveto} def'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C  ***************************************************************
C  **  SET DEFAULT POSTSCRIPT FONT TO BE TIMES-ROMAN.  NOTE     **
C  **  THAT THE DEFAULT DATAPLOT SIZE IS 2.0 FOR THE CHARACTER  **
C  **  AND 0.75 FOR THE VERTICAL GAP.  POSTSCRIPT WORKS IN      **
C  **  "POINTS" WHICH ARE 1/72 AN INCH.  HOWEVER, DATAPLOT      **
C  **  POSTSCRIPT UNITS (72 DOTS PER INCH) TO THE ACTUAL DOTS   **
C  **  PER INCH (TYPICALLY 300).  THIS MEANS 1 UNIT CORRESPONDS **
C  **  TO ONE PIXEL OR DOT.  THE DEFAULT FONT WILL BE RESET     **
C  **  EVERY TIME AN ERASE PAGE IS DONE (SINCE GRERSC DOES A    **
C  **  "GRESTORE" COMMAND.  THE USER CAN DETERMINE THE DEFAULT  **
C  **  STYLE VIA A "SET POSCRIPT FONT <...> COMMAND.            **
C  ***************************************************************
C
C  MAY,1989, ALAN HECKERT.  BE SURE TO DEFINE THE DEFAULT PAGE SCALING,
C  TRANSLATION AND ORIENTATION (WAS A BUG WITH DIAGRAMMATIC GRAPHICS
C  IF AN ERASE WAS NOT DONE FIRST).
C  FOLLOWING CODE MODIFIED OCTOBER 1991.  MAKE FONT TABLE DRIVEN
      APOINT=ANUMVP*2.0/100.
      IPOINT=INT(APOINT)
C
      IJUNK=7
      DO8695I=1,IPSTMF
      IF(IPSTFN.NE.IPSTT1(I))GOTO8695
      IJUNK=I
      GOTO8697
 8695 CONTINUE
 8697 CONTINUE
      ICSTR(1:1)='/'
      ICSTR(2:41)=IPSTT2(IJUNK)(1:40)
      ICSTR(42:51)=' findfont '
      NCHTOT=3
      NCSTR=51
      CALL GRTRIN(IPOINT,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      NCSTR2=NCSTR+17
      ICSTR(NCSTR:NCSTR2)=' scalefont setfont'
      NCSTR=NCSTR2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC ICSTR(1:33)='/Times-Roman            findfont '
CCCCC IF(IPSTFN.EQ.'TBOL')
CCCCC1ICSTR(1:23)='/Times-Bold            '
CCCCC IF(IPSTFN.EQ.'TITA')
CCCCC1ICSTR(1:23)='/Times-Italic          '
CCCCC IF(IPSTFN.EQ.'TBIT')
CCCCC1ICSTR(1:23)='/Times-BoldItalic      '
CCCCC IF(IPSTFN.EQ.'HELV')
CCCCC1ICSTR(1:23)='/Helvetica             '
CCCCC IF(IPSTFN.EQ.'HELB')
CCCCC1ICSTR(1:23)='/Helvetica-Bold        '
CCCCC IF(IPSTFN.EQ.'HELO')
CCCCC1ICSTR(1:23)='/Helvetica-Oblique     '
CCCCC IF(IPSTFN.EQ.'HEBO')
CCCCC1ICSTR(1:23)='/Helvetica-BoldOblique '
CCCCC IF(IPSTFN.EQ.'COUR')
CCCCC1ICSTR(1:23)='/Courier               '
CCCCC IF(IPSTFN.EQ.'CBOL')
CCCCC1ICSTR(1:23)='/Courier-Bold          '
CCCCC IF(IPSTFN.EQ.'COBL')
CCCCC1ICSTR(1:23)='/Courier-Oblique       '
CCCCC IF(IPSTFN.EQ.'CBOB')
CCCCC1ICSTR(1:23)='/Courier-BoldOblique   '
CCCCC NCSTR=33
CCCCC NCSTR=33
CCCCC NCHTOT=3
CCCCC CALL GRTRIN(IPOINT,NCHTOT,ICSTR,NCSTR)
CCCCC ICSTR(37:54)=' scalefont setfont'
CCCCC NCSTR=54
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C  END CHANGE
      IPSTFC=IPSTFN
      IPSTPS=IPOINT
      IPSTPC=IPOINT
      IPSTPO=IPOINT
C  JUNE, 1989.  A NEW PAGE RESETS THE FONT TO WHAT IS SET IN GRINDE.
C  ADDED IPSTFO TO DPCODV AND MODIFIED GRERSC.
      IPSTFO=IPSTFN
C
      ICSTR(1:41)='gsave    % SAVE INITIAL GRAPHICS STATE'
      NCSTR=41
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C  ADD FOLLOWING LINES JANUARY, 1990.
C  JANUARY 1993.  LEADING SPACE FOR "%%" LINES
      ICSTR(1:11)='%%EndProlog'
      NCSTR=11
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC JANUARY 1993.  ONLY INCREMENT FOR DEVICE 2!
      IF(IMODE3.NE.'DEV3')THEN
        IF(IGUNIT.EQ.IPL1NU)THEN
          IPSTPN=IPSTPN+1
          IVALT=IPSTPN
        ELSEIF(IGUNIT.EQ.IPL2NU)THEN
          IPSTP2=IPSTP2+1
          IVALT=IPSTP2
        ENDIF
      ELSE
         IVALT=1
      ENDIF
      ICSTR(1:8)='%%Page: '
      NCHTOT=1
      NCSTR=8
      CALL GRTRIN(IVALT,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      CALL GRTRIN(IVALT,NCHTOT,ICSTR,NCSTR)
      IF(IPSTSP.EQ.'OFF')NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C END ADDITIONS
      ICSTR(1:11)='0 0 moveto '
      NCSTR=11
      XPPI=PSTPPI
      YPPI=PSTPPI
      XSCALE=72./XPPI
      YSCALE=72./YPPI
      NCSTR=11
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(XSCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(22:22)=' '
      NCSTR=22
      CALL GRTRRE(YSCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(33:39)=' scale '
      NCSTR=39
C
      IF(IORNSW.EQ.'LAND')THEN
        IVTEMP=IPSTBM
        IHTEMP=IPSTLM
      ELSEIF(IORNSW.EQ.'LAN2')THEN
        IVTEMP=IPS2BM
        IHTEMP=IPS2LM
      ELSEIF(IORNSW.EQ.'PORT')THEN
        IVTEMP=IPS2BM
        IHTEMP=IPS2LM
      ELSEIF(IORNSW.EQ.'SQUA')THEN
        IVTEMP=IPS2BM
        IHTEMP=IPS2LM
      ELSE
        IVTEMP=IPSTBM
        IHTEMP=IPSTLM
      END IF
      IXTR=IHTEMP
      IYTR=IVTEMP
      IF(IORNSW.NE.'PORT' .AND. IORNSW.NE.'LAN2' .AND. IORNSW.NE.'SQUA')
     1IXTR=IHTEMP+INT(ANUMVP+0.5)
      NCHTOT=5
      CALL GRTRIN(IXTR,NCHTOT,ICSTR,NCSTR)
      ICSTR(45:45)=' '
      NCSTR=45
      CALL GRTRIN(IYTR,NCHTOT,ICSTR,NCSTR)
      ICSTR(51:61)=' translate '
C
      ICSTR(62:63)=' 0'
      IF(IORNSW.NE.'PORT' .AND. IORNSW.NE.'LAN2' .AND. IORNSW.NE.'SQUA')
     1ICSTR(62:63)='90'
      ICSTR(64:71)=' rotate '
      NCSTR=71
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC OCTOBER 2020.  FILL BACKGROUND FOR COLOR POSTSCRIPT.
CCCCC                NOTE THAT THIS WILL ONLY BE DONE FOR COLOR
CCCCC                POSTSCRIPT DEVICES
C
CCCCC                IGCOLO IS DEFINED AT THIS POINT.  BASE ON
CCCCC                VALUE FOR "SET POSTSCRIPT DEFAULT COLOR" COMMAND.
C
CCCCC IF(IGCOLO.EQ.'OFF')GOTO8699
      IF(IPSTDC.EQ.'OFF')GOTO8699
      IFLAG=0
      IF(IBACC2(1).GE.0 .AND. IBACC2(2).GE.0 .AND.
     1   IBACC2(3).GE.0)IFLAG=1
C
      IF(IFLAG.EQ.0)THEN
        ICASE2='BACK'
        CALL GRTRCO(ICASE,IBACCO,JCOL)
        IF(JCOL.LT.0)THEN
          AVAL=REAL(JCOL)/100.
          AVAL=ABS(AVAL)
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.1.0)AVAL=1.0
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC     SET A NON-GRAY SCALE COLOR
        ELSE
          ICSTR=' '
          NCSTR=0
          ATEMP=255.0
          IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
            AVALR=REAL(JCOL - 1000)/ATEMP
            AVALG=0.0
            AVALB=0.0
          ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
            AVALR=0.0
            AVALG=REAL(JCOL - 2000)/ATEMP
            AVALB=0.0
          ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
            AVALR=0.0
            AVALG=0.0
            AVALB=REAL(JCOL - 3000)/ATEMP
          ELSE
            IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
            AVALR=REAL(IRED(JCOL))/ATEMP
            AVALG=REAL(IGREEN(JCOL))/ATEMP
            AVALB=REAL(IBLUE(JCOL))/ATEMP
          ENDIF
C
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVALR,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVALG,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVALB,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ENDIF
      ELSE
        AVAL=REAL(IBACC2(1))/255.
        NCSTR=0
        NCHTOT=7
        NCHDEC=5
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        AVAL=REAL(IBACC2(2))/255.
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        AVAL=REAL(IBACC2(3))/255.
        CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+10
        ICSTR(NCSTR:NCSTR2)='setrgbcolor'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
CCCCC FILL A RECTANGLE WITH THE COLOR
      PX(1)=0.
      PX(2)=100.
      PX(3)=100.
      PX(4)=0.
      PX(5)=0.
      PY(1)=0.
      PY(2)=0.
      PY(3)=100.
      PY(4)=100.
      PY(5)=0.
      NP=5
      NCHTOT=5
      NCSTR=0
      ICSTR=' '
      AX1=PX(1)
      AY1=PY(1)
      NUMHPP=INT(ANUMHP+0.1)
      NUMVPP=INT(ANUMVP+0.1)
      CALL GRTRSD(AX1,AY1,IXTEMP,IYTEMP,ISUBN0)
      CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
      ICSTR(6:6)=' '
      NCSTR=6
      CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
      ICSTR(12:13)=' m'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      DO8811I=2,NP
        NCSTR=0
        CALL GRTRSD(PX(I),PY(I),IX,IY,ISUBN0)
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        ICSTR(6:6)=' '
        NCSTR=6
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        ICSTR(12:13)=' l'
        NCSTR=13
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 8811 CONTINUE
      ICSTR(1:35)='closepath fill 0. 0. 0. setrgbcolor'
      NCSTR=35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 8699 CONTINUE
C
      IF(IMODE3.NE.'DEV3')THEN
        IF(IGUNIT.EQ.IPL1NU)THEN
          IPSTNW='ON'
        ELSEIF(IGUNIT.EQ.IPL2NU)THEN
          IPSTN2='ON'
        ENDIF
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 90--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  1) TURN QUIC ON - "^PY^-" ON LINE BY ITSELF     **
C               **  2) SET DEFAULT COMMAND SYNTAX - "^ISYNTAX00000" **
C               **  3) SET DEFAULT FONT           - "^ISxxxxx       **
C               **  REFERENCE--QUIC PROGRAMMING MANUAL              **
C               ******************************************************
C
 9100 CONTINUE
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:3)='PY'
      ICSTR(4:4)=ICARAT
      ICSTR(5:5)='-'
      NCSTR=-5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)=ICARAT
      ICSTR(2:13)='ISYNTAX00000'
      NCSTR=13
      KFONT=IQUIFN
      ICSTR(14:14)=ICARAT
      ICSTR(15:16)='IS'
      NCHTOT=-5
      NCSTR=16
      CALL GRTRIN(KFONT,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IQUIFC=IQUIFN
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  USE A C LIBRARY WRITTEN BY ALAN HECKERT         **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IORNSW.EQ.'LAND')THEN
        IORIEN=0
      ELSE IF(IORNSW.EQ.'PORT')THEN
        IORIEN=1
      ELSE IF(IORNSW.EQ.'SQUA')THEN
        IORIEN=3
      ELSE
        IORIEN=2
      END IF
C
      DO9610I=20,1,-1
        ILAST=I
        IF(IX11DN(I:I).NE.' ')GOTO9619
 9610 CONTINUE
 9619 CONTINUE
      DO9620I=1,ILAST
        CALL DPCOAN(IX11DN(I:I),IJUNK)
        IADE(I)=IJUNK
 9620 CONTINUE
      IADE(ILAST+1)=0
C
      DO9629I=1,8
      IWIND(I)=-1
 9629 CONTINUE
      ICOUNT=0
      IF(IMODEL.EQ.'    '.AND.IMODE2.EQ.'    ')GOTO9639
      CTEMP(1:4)=IMODEL(1:4)
      CTEMP(5:8)=IMODE2(1:4)
      ICOUNT=0
      DO9630I=8,1,-1
        IA=CTEMP(I:I)
        IF(IA.EQ.' ')GOTO9630
        ICOUNT=ICOUNT+1
        CALL DPCOAN(IA,IVALUE)
        IF(IVALUE.GE.48.AND.IVALUE.LE.57)THEN
          IWIND(ICOUNT)=IVALUE-48
        ELSEIF(IVALUE.GE.65.AND.IVALUE.LE.70)THEN
          IWIND(ICOUNT)=IVALUE-55
        ELSEIF(IVALUE.GE.97.AND.IVALUE.LE.102)THEN
          IWIND(ICOUNT)=IVALUE-87
        ELSE
          ICOUNT=1
          WRITE(ICOUT,9633)
          GOTO9639
        ENDIF
 9630 CONTINUE
 9633 FORMAT('***** WARNING--INVALID WINDOW ID FROM FRONT-END.  ',
     1       'A SEPARATE GRAPHICS WINDOW WILL BE OPENED.')
 9639 CONTINUE
      IERRNO=0
      IXPIX=0
      IYPIX=0
      CALL XINIT(IXTEMP,IYTEMP,IORIEN,IXPIX,IYPIX,IADE,IWIND,ICOUNT,
     1           IERRNO)
      IF(IERRNO.EQ.1) THEN
         WRITE(ICOUT,9651)
 9651    FORMAT('CANNOT OPEN X11 WINDOW.')
         CALL DPWRST('XXX','BUG ')
         IX11OF='OFF'
      ELSE
         IX11OF='ON'
         ANUMHP=REAL(IXPIX)
         ANUMVP=REAL(IYPIX)
      ENDIF
#endif
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  USE A C DRIVER WRITTEN BY JJF              **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCINDE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
C     FOR GLI/GKS IMPLEMENTATION, THE DEFINED WORKSTATIONS ARE:
C
C       2 = GKS METAFILE
C       5 = WORKSTATION INDEPENDENT SEGMENT STORAGE
C       7 = CGM BINARY
C       8 = CGM CLEAR TEXT
C      16 = VT-330
C      17 = VT-340
C      38 = DIGITAL LN03 PLUS
C      41 = VAX UIS
C      51 = HP-GL GRAPHICS PLOTTER
C      53 = HP-GL GRAPHICS PLOTTER
C      61 = POSTSCRIPT (B/W)
C      62 = POSTSCRIPT (COLOR)
C      63 = DISPLAY POSTSCRIPT (B/W)
C      64 = DISPLAY POSTSCRIPT (COLOR)
C      72 = TEK-401X SERIES TERMINAL
C      82 = TEK-42XX SERIES TERMINAL
C      92 = DIGITAL LJ250 COMPANION COLOR PRINTER
C     101 = PORTABLE DOCUMENT FORMAT (PDF) (NORMAL)
C     102 = PORTABLE DOCUMENT FORMAT (PDF) (COMPRESSED)
C     104 = PBM (PORTABLE BITMAP)
C     201 = TAB 132/15-G TERMINAL
C     204 = MONTEREY MG200 DISPLAY TERMINAL
C     207 = IBM PC
C     210 = X DISPLAY
C     211 = X DISPLAY
C     214 = X DISPLAY w/SUN RLE RASTERFILE DUMP
C     215 = X DISPLAY w/COMPUSERVE GIF DUMP (87A)
C     218 = X DISPLAY w/COMPUSERVE GIF DUMP (89A)
C     217 = X DISPLAY w/FRAME BUFFER
C
11000 CONTINUE
#ifdef HAVE_GKS
      IGKSNU=IPR
      IWRKSP=-1
      CALL GOPKS(IGKSNU, IWRKSP)
      CALL GSASF(ASF)
      IGKSID=1
CCCCC IGKSTY=0
      IGKSTY=5
      IF(IMODEL.EQ.'2')THEN
        IGKSID=2
      ELSEIF(IMODEL.EQ.'GKS' .AND. IMODE2.EQ.'META')THEN
        IGKSID=2
      ELSEIF(IMODEL.EQ.'5')THEN
        IGKSID=5
      ELSEIF(IMODEL.EQ.'WISS')THEN
        IGKSID=5
      ELSEIF(IMODEL.EQ.'WORK' .AND. IMODE2.EQ.'INDE')THEN
        IGKSID=5
      ELSEIF(IMODEL.EQ.'7')THEN
        IGKSID=7
      ELSEIF(IMODEL.EQ.'CGM' .AND. IMODE2.EQ.'BINA')THEN
        IGKSID=7
      ELSEIF(IMODEL.EQ.'8')THEN
        IGKSID=8
      ELSEIF(IMODEL.EQ.'CGM' .AND. IMODE2.EQ.'CLEA')THEN
        IGKSID=8
      ELSEIF(IMODEL.EQ.'CGM' .AND. IMODE2.EQ.'TEXT')THEN
        IGKSID=8
      ELSEIF(IMODEL.EQ.'16')THEN
        IGKSID=16
      ELSEIF(IMODEL.EQ.'VT' .AND. IMODE2.EQ.'330')THEN
        IGKSID=16
      ELSEIF(IMODEL.EQ.'17')THEN
        IGKSID=17
      ELSEIF(IMODEL.EQ.'VT' .AND. IMODE2.EQ.'340')THEN
        IGKSID=17
      ELSEIF(IMODEL.EQ.'38')THEN
        IGKSID=38
      ELSEIF(IMODEL.EQ.'LN03' .AND. IMODE2.EQ.'PLUS')THEN
        IGKSID=38
      ELSEIF(IMODEL.EQ.'LN03')THEN
        IGKSID=38
      ELSEIF(IMODEL.EQ.'41')THEN
        IGKSID=41
      ELSEIF(IMODEL.EQ.'VAX' .AND. IMODE2.EQ.'UIS')THEN
        IGKSID=41
      ELSEIF(IMODEL.EQ.'51')THEN
        IGKSID=51
      ELSEIF(IMODEL.EQ.'HPGL')THEN
        IGKSID=51
      ELSEIF(IMODEL.EQ.'53')THEN
        IGKSID=53
      ELSEIF(IMODEL.EQ.'61')THEN
        IGKSID=61
      ELSEIF(IMODEL.EQ.'POST' .AND. IMODE2.EQ.'BW')THEN
        IGKSID=61
      ELSEIF(IMODEL.EQ.'POST' .AND. IMODE2.EQ.'BLAC')THEN
        IGKSID=61
      ELSEIF(IMODEL.EQ.'62')THEN
        IGKSID=62
      ELSEIF(IMODEL.EQ.'POST' .AND. IMODE2.EQ.'COLO')THEN
        IGKSID=62
      ELSEIF(IMODEL.EQ.'63')THEN
        IGKSID=63
      ELSEIF(IMODEL.EQ.'DISP' .AND. IMODE2.EQ.'POST' .AND.
     1       IMODE3.EQ.'BW')THEN
        IGKSID=63
      ELSEIF(IMODEL.EQ.'DISP' .AND. IMODE2.EQ.'POST' .AND.
     1       IMODE3.EQ.'BLAC')THEN
        IGKSID=63
      ELSEIF(IMODEL.EQ.'64')THEN
        IGKSID=64
      ELSEIF(IMODEL.EQ.'DISP' .AND. IMODE2.EQ.'POST' .AND.
     1       IMODE3.EQ.'COLO')THEN
        IGKSID=64
      ELSEIF(IMODEL.EQ.'72')THEN
        IGKSID=72
      ELSEIF(IMODEL.EQ.'TEKT' .AND. IMODE2.EQ.'401X')THEN
        IGKSID=72
      ELSEIF(IMODEL.EQ.'82')THEN
        IGKSID=82
      ELSEIF(IMODEL.EQ.'TEKT' .AND. IMODE2.EQ.'42XX')THEN
        IGKSID=82
      ELSEIF(IMODEL.EQ.'88')THEN
        IGKSID=88
CCCCC   IGKSTY=5
      ELSEIF(IMODEL.EQ.'92')THEN
        IGKSID=92
      ELSEIF(IMODEL.EQ.'DIGI' .AND. IMODE2.EQ.'LJ25')THEN
        IGKSID=92
      ELSEIF(IMODEL.EQ.'101')THEN
        IGKSID=101
      ELSEIF(IMODEL.EQ.'PDF' .AND. IMODE2.EQ.'NORM')THEN
        IGKSID=101
      ELSEIF(IMODEL.EQ.'102')THEN
        IGKSID=102
      ELSEIF(IMODEL.EQ.'PDF' .AND. IMODE2.EQ.'COMP')THEN
        IGKSID=102
      ELSEIF(IMODEL.EQ.'104')THEN
        IGKSID=104
      ELSEIF(IMODEL.EQ.'PBM')THEN
        IGKSID=104
      ELSEIF(IMODEL.EQ.'201')THEN
        IGKSID=201
      ELSEIF(IMODEL.EQ.'TAB' .AND. IMODE2.EQ.'132')THEN
        IGKSID=201
      ELSEIF(IMODEL.EQ.'204')THEN
        IGKSID=204
      ELSEIF(IMODEL.EQ.'MONT' .AND. IMODE2.EQ.'MG20')THEN
        IGKSID=204
      ELSEIF(IMODEL.EQ.'207')THEN
        IGKSID=207
      ELSEIF(IMODEL.EQ.'IBM' .AND. IMODE2.EQ.'PC')THEN
        IGKSID=207
      ELSEIF(IMODEL.EQ.'210')THEN
        IGKSID=210
      ELSEIF(IMODEL.EQ.'X' .AND. IMODE2.EQ.'SUN' .AND.
     1       IMODE3.EQ.'RLE')THEN
        IGKSID=214
      ELSEIF(IMODEL.EQ.'X' .AND. IMODE2.EQ.'GIF' .AND.
     1       IMODE3.EQ.'87A')THEN
        IGKSID=215
      ELSEIF(IMODEL.EQ.'X' .AND. IMODE2.EQ.'GIF' .AND.
     1       IMODE3.EQ.'89A')THEN
        IGKSID=218
      ELSEIF(IMODEL.EQ.'X' .AND. IMODE2.EQ.'FRAM' .AND.
     1       IMODE3.EQ.'BUFF')THEN
        IGKSID=217
      ELSEIF(IMODEL.EQ.'X')THEN
        IGKSID=210
      ELSEIF(IMODEL.EQ.'211')THEN
        IGKSID=211
      ELSEIF(IMODEL.EQ.'214')THEN
        IGKSID=214
      ELSEIF(IMODEL.EQ.'215')THEN
        IGKSID=215
      ELSEIF(IMODEL.EQ.'217')THEN
        IGKSID=217
      ELSEIF(IMODEL.EQ.'218')THEN
        IGKSID=218
      ENDIF
      IGKSWK=1
      CALL GOPWK(IGKSWK, IGKSID, IGKSTY)
      CALL GACWK(IGKSWK)
C
CCCCC CURRENTLY, DON'T DEFINE SEGMENTS.
CCCCC CALL GCRSG(IGKSWK)
C
C     INQUIRE AS TO CURRENT STATE
C
CCCCC NTEMP=1
CCCCC CALL GQOPWK(NTEMP,IERRFL,IOL,IWKID)
CCCCC print *,'after gqopwk: ierrfl,iol,iwkid=',ierrfl,iol,iwkid
CCCCC CALL GQACWK(NTEMP,IERRFL,IOL,IWKID)
CCCCC print *,'after gqacwk: ierrfl,iol,iwkid=',ierrfl,iol,iwkid
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WBMP                                         **
C               **  4) GIF                                          **
C               **  5) TIFF ?                                       **
C               **  6) BMP                                          **
C               **  7) WEBP                                         **
C               ******************************************************
C
12000 CONTINUE
C
12010 CONTINUE
      ITYPE=1
      GOTO12090
C
12020 CONTINUE
      ITYPE=2
      GOTO12090
C
12030 CONTINUE
      ITYPE=3
      GOTO12090
C
12040 CONTINUE
      ITYPE=4
      GOTO12090
C
12050 CONTINUE
      ITYPE=5
      GOTO12090
C
12060 CONTINUE
      ITYPE=6
      GOTO12090
C
12070 CONTINUE
      ITYPE=7
      GOTO12090
C
12080 CONTINUE
      ITYPE=8
      GOTO12090
C
12090 CONTINUE
C
#ifdef HAVE_GD
      CALL GDINIT(ITYPE)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
#ifdef HAVE_ABSOFT
      XPIXMN=100.0
      XPIXMX=700.0
      YPIXMN=100.0
      YPIXMX=550.0
      CALL MIGSetup(XPIXMN,XPIXMX,YPIXMN,YPIXMX,ACOORD)
      AXMN=0.0
      AXMX=100.0
      AYMN=0.0
      AYMX=100.0
      IDISP=0
      CALL DefineCoord(AXMN,AYMN,AXMX,AYMX,IDISP,BCOORD)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C  STEP 1: INITIALIZE DEVICE
C  STEP 2: DEFINE COLOR MAP
C
13500 CONTINUE
COLD  CALL aqtInit()
C
COLD  DO13510I=1,MAXCLR
COLD    IVAL1=IRED(I)
COLD    VAL1=REAL(IVAL1)/255.0
COLD    IVAL2=IGREEN(I)
COLD    VAL2=REAL(IVAL2)/255.0
COLD    IVAL3=IBLUE(I)
COLD    VAL3=REAL(IVAL3)/255.0
COLD    IENTRY=I-1
COLD    CALL aqtSetColormapEntry(IENTRY,VAL1,VAL2,VAL3)
C13510 CONTINUE
C
      NPLOT=1
#ifdef HAVE_AQUA
      CALL aqinit(NPLOT,INT(ANUMHP+0.5),INT(ANUMVP+0.5),IRED,IGREEN,
     1            IBLUE,MAXCLR)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               **  TWO CASES:                                      **
C               **  1) DEVICE xxx LATEX INDEPENDENT                 **
C               **     TREAT THE LATEX GRAPH AS AN INDEPENDENT.     **
C               **     PREAMBLE.                                    **
C               **  2) DEVICE xxx LATEX                             **
C               **     TREAT THE LATEX GRAPH AS SOMETHING TO BE     **
C               **     INCORPORATED INTO LARGER LATEX DOCUMENT.     **
C               **     IN THIS CASE, DO NOTHING.                    **
C               ******************************************************
C
15000 CONTINUE
C
      IF(IMODEL.EQ.'STAN')THEN
C
        ICSTR=' '
        IF(ILATHE.EQ.'NULL')THEN
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:29)='documentclass[12pt]{article}'
          NCSTR=29
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=' '
          NCSTR=1
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:99)='usepackage{epsfig}'
          NCSTR=19
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:23)='usepackage{epic,eepic}'
          NCSTR=23
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:27)='usepackage{graphics,color}'
          NCSTR=27
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=' '
          NCSTR=1
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:30)='setlength{ textwidth}{6.25in}'
          ICSTR(12:12)=IBASLC
          NCSTR=30
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:28)='setlength{ textheight}{9in}'
          ICSTR(12:12)=IBASLC
          NCSTR=28
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:34)='setlength{ oddsidemargin}{0.25in}'
          ICSTR(12:12)=IBASLC
          NCSTR=34
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:32)='setlength{ evensidemargin}{0in}'
          ICSTR(12:12)=IBASLC
          NCSTR=32
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:30)='setlength{ headheight}{0.5in}'
          ICSTR(12:12)=IBASLC
          NCSTR=30
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:28)='setlength{ headsep}{0.5in}'
          ICSTR(12:12)=IBASLC
          NCSTR=28
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:28)='setlength{ topmargin}{-1in}'
          ICSTR(12:12)=IBASLC
          NCSTR=28
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:27)='setlength{ parindent}{0in}'
          ICSTR(12:12)=IBASLC
          NCSTR=27
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:26)='setlength{ parskip}{10pt}'
          ICSTR(12:12)=IBASLC
          NCSTR=26
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:30)='setlength{ textfloatsep}{4ex}'
          ICSTR(12:12)=IBASLC
          NCSTR=30
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:31)='addtolength{ footskip}{0.25in}'
          ICSTR(14:14)=IBASLC
          NCSTR=31
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:17)='overfullrule=0pt'
          NCSTR=17
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=IBASLC
          ICSTR(2:18)='baselineskip=12pt'
          NCSTR=18
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
          ICSTR(1:1)=' '
          NCSTR=1
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     PGRAPHIC AND LGRAPHIC FOR IMPORTING EXTERNAL
CCCCC     POSTSCRIPT FILES.  NOT RELEVANT IN THIS CONTEXT,
CCCCC     SO COMMENT OUT FOR NOW.
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:12)='newcommand{'
CCCCC     ICSTR(13:13)=IBASLC
CCCCC     ICSTR(14:26)='PGRAPHIC}[1]{'
CCCCC     ICSTR(27:27)=IBASLC
CCCCC     ICSTR(28:43)='begin{figure}[h]'
CCCCC     NCSTR=43
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:28)='epsfig{file=#1,width=6.0in}'
CCCCC     NCSTR=28
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:13)='end{figure}}'
CCCCC     NCSTR=13
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:12)='newcommand{'
CCCCC     ICSTR(13:13)=IBASLC
CCCCC     ICSTR(14:26)='LGRAPHIC}[1]{'
CCCCC     ICSTR(27:27)=IBASLC
CCCCC     ICSTR(28:43)='begin{figure}[h]'
CCCCC     NCSTR=43
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:38)='epsfig{file=#1,angle=-90,width=6.0in}'
CCCCC     NCSTR=38
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:13)='end{figure}}'
CCCCC     NCSTR=13
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=' '
CCCCC     NCSTR=1
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=IBASLC
CCCCC     ICSTR(2:16)='begin{verbatim}'
CCCCC     NCSTR=16
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
CCCCC     ICSTR(1:1)=' '
CCCCC     NCSTR=1
CCCCC     CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ELSE
          IOUNI1=IST1NU
          IFILE1=ILATHE
          ISTAT1='OLD'
          IFORM1='FORMATTED'
          IACCE1='SEQUENTIAL'
          IPROT1='READONLY'
          ICURS1='CLOSED'
          ISUBN0='CAPT'
          IERRF1='NO'
C
          IREWI1='ON'
          CALL DPOPFI(IOUNI1,IFILE1,ISTAT1,IFORM1,IACCE1,
     1                IPROT1,ICURS1,
     1                IREWI1,ISUBN0,IERRF1,IBUGG4,ISUBRO,IERROR)
          IF(IERRF1.EQ.'YES')GOTO9000
C
C  NOW LOOP THROUGH FILE (ASSUME MAXIMUM OF 1,000 LINES).
C
          DO15301I=1,1000
            IATEMP=' '
            READ(IOUNI1,15392,END=15399,ERR=15399)IATEMP
15392       FORMAT(A240)
            ILAST=1
            DO15410J=240,1,-1
              IF(IATEMP(J:J).NE.' ')THEN
                ILAST=J
                GOTO15419
              ENDIF
15410       CONTINUE
15419       CONTINUE
            ICSTR(1:ILAST)=IATEMP(1:ILAST)
            NCSTR=ILAST
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
15301     CONTINUE
15399     CONTINUE
          IENDF1='OFF'
          IREWI1='ON'
          CALL DPCLFI(IOUNI1,IFILE1,ISTAT1,IFORM1,IACCE1,
     1                IPROT1,ICURS1,IENDF1,IREWI1,
     1                ISUBN0,IERRF1,IBUGG4,ISUBRO,IERROR)
          IF(IERRF1.EQ.'YES')GOTO9000
        ENDIF
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:16)='begin{document}'
        NCSTR=16
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=' '
        NCSTR=1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
        ICSTR(1:1)=IBASLC
        ICSTR(2:14)='end{verbatim}'
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ENDIF
C
C  DEFINE GRAY SCALE COLORS
C
      IF(ILATCO.EQ.'ON')THEN
        NCHTOT=5
        NCHDEC=3
        DO15110I=0,9
          ICSTR(1:1)=IBASLC
          ICSTR(2:25)='definecolor{G   }{gray}{'
          NCSTR=25
          WRITE(ICSTR(15:15),'(I1)')I
          ACOL=REAL(I)/100.0
          CALL GRTRRE(ACOL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='}'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
15110   CONTINUE
        DO15120I=10,99
          ICSTR(1:1)=IBASLC
          ICSTR(2:25)='definecolor{G   }{gray}{'
          NCSTR=25
          WRITE(ICSTR(15:16),'(I2)')I
          ACOL=REAL(I)/100.0
          CALL GRTRRE(ACOL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='}'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
15120   CONTINUE
        ICSTR(1:1)=IBASLC
        ICSTR(2:29)='definecolor{G100}{gray}{1.0}'
        NCSTR=29
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C  IF COLOR SWITCH ON, DEFINE COLORS BASED ON RGB VALUES
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='WHIT'
        ARED=1.0
        AGREEN=1.0
        ABLUE=1.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='BLAC'
        ARED=0.0
        AGREEN=0.0
        ABLUE=0.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='RED '
        ARED=1.0
        AGREEN=0.0
        ABLUE=0.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='BLUE'
        ARED=0.0
        AGREEN=0.0
        ABLUE=1.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GREE'
        ARED=0.0
        AGREEN=1.0
        ABLUE=0.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MAGE'
        ARED=1.0
        AGREEN=0.0
        ABLUE=1.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='ORAN'
        ARED=1.0
        AGREEN=165.0/255.0
        ABLUE=0.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CYAN'
        ARED=0.0
        AGREEN=1.0
        ABLUE=1.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='YELL'
        ARED=1.0
        AGREEN=1.0
        ABLUE=0.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='YGRE'
        ARED=154.0/255.0
        AGREEN=205.0/255.0
        ABLUE=50.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DGRE'
        ARED=0.0/255.0
        AGREEN=100.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='LBLU'
        ARED=173.0/255.0
        AGREEN=216.0/255.0
        ABLUE=230.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='VBLU'
        ARED=138.0/255.0
        AGREEN=43.0/255.0
        ABLUE=226.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='VRED'
        ARED=208.0/255.0
        AGREEN=32.0/255.0
        ABLUE=144.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DGRE'
        ARED=47.0/255.0
        AGREEN=79.0/255.0
        ABLUE=79.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='LGRE'
        ARED=211.0/255.0
        AGREEN=211.0/255.0
        ABLUE=211.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='AQUA'
        ARED=127.0/255.0
        AGREEN=255.0/255.0
        ABLUE=212.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='BROW'
        ARED=165.0/255.0
        AGREEN=42.0/255.0
        ABLUE=42.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CABL'
        ARED=95.0/255.0
        AGREEN=158.0/255.0
        ABLUE=160.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CORA'
        ARED=255.0/255.0
        AGREEN=127.0/255.0
        ABLUE=80.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CBLU'
        ARED=100.0/255.0
        AGREEN=149.0/255.0
        ABLUE=237.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DOGR'
        ARED=85.0/255.0
        AGREEN=107.0/255.0
        ABLUE=47.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DORC'
        ARED=153.0/255.0
        AGREEN=50.0/255.0
        ABLUE=204.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DSBL'
        ARED=72.0/255.0
        AGREEN=61.0/255.0
        ABLUE=139.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DTUR'
        ARED=0.0/255.0
        AGREEN=206.0/255.0
        ABLUE=209.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='FIRE'
        ARED=178.0/255.0
        AGREEN=34.0/255.0
        ABLUE=34.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='FGRE'
        ARED=34.0/255.0
        AGREEN=139.0/255.0
        ABLUE=34.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GOLD'
        ARED=255.0/255.0
        AGREEN=215.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GLDR'
        ARED=218.0/255.0
        AGREEN=165.0/255.0
        ABLUE=32.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GRAY'
        ARED=192.0/255.0
        AGREEN=192.0/255.0
        ABLUE=192.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='IRED'
        ARED=205.0/255.0
        AGREEN=92.0/255.0
        ABLUE=92.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='KHAK'
        ARED=240.0/255.0
        AGREEN=230.0/255.0
        ABLUE=140.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='DMGR'
        ARED=105.0/255.0
        AGREEN=105.0/255.0
        ABLUE=105.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='LSBL'
        ARED=176.0/255.0
        AGREEN=196.0/255.0
        ABLUE=222.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='LGRE'
        ARED=50.0/255.0
        AGREEN=205.0/255.0
        ABLUE=50.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MARO'
        ARED=176.0/255.0
        AGREEN=48.0/255.0
        ABLUE=96.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MAQU'
        ARED=102.0/255.0
        AGREEN=205.0/255.0
        ABLUE=170.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MBLU'
        ARED=0.0/255.0
        AGREEN=0.0/255.0
        ABLUE=205.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MFGR'
        ARED=107.0/255.0
        AGREEN=142.0/255.0
        ABLUE=35.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MGLD'
        ARED=250.0/255.0
        AGREEN=250.0/255.0
        ABLUE=210.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MORC'
        ARED=186.0/255.0
        AGREEN=85.0/255.0
        ABLUE=211.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MSGR'
        ARED=60.0/255.0
        AGREEN=179.0/255.0
        ABLUE=113.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MSBL'
        ARED=123.0/255.0
        AGREEN=104.0/255.0
        ABLUE=238.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MSPG'
        ARED=0.0/255.0
        AGREEN=250.0/255.0
        ABLUE=154.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MTUR'
        ARED=72.0/255.0
        AGREEN=209.0/255.0
        ABLUE=204.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MVRD'
        ARED=199.0/255.0
        AGREEN=21.0/255.0
        ABLUE=133.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MDBL'
        ARED=25.0/255.0
        AGREEN=25.0/255.0
        ABLUE=112.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='NAVY'
        ARED=0.0/255.0
        AGREEN=0.0/255.0
        ABLUE=128.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='ORED'
        ARED=255.0/255.0
        AGREEN=69.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='ORCH'
        ARED=218.0/255.0
        AGREEN=112.0/255.0
        ABLUE=214.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='PGRE'
        ARED=152.0/255.0
        AGREEN=251.0/255.0
        ABLUE=152.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='PINK'
        ARED=255.0/255.0
        AGREEN=192.0/255.0
        ABLUE=203.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='PLUM'
        ARED=221.0/255.0
        AGREEN=160.0/255.0
        ABLUE=221.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='PURP'
        ARED=160.0/255.0
        AGREEN=32.0/255.0
        ABLUE=240.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='SALM'
        ARED=250.0/255.0
        AGREEN=128.0/255.0
        ABLUE=114.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='SGRE'
        ARED=46.0/255.0
        AGREEN=139.0/255.0
        ABLUE=87.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='SIEN'
        ARED=160.0/255.0
        AGREEN=82.0/255.0
        ABLUE=45.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='SKBL'
        ARED=135.0/255.0
        AGREEN=206.0/255.0
        ABLUE=235.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='SBLU'
        ARED=106.0/255.0
        AGREEN=90.0/255.0
        ABLUE=205.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='SPGR'
        ARED=0.0/255.0
        AGREEN=255.0/255.0
        ABLUE=127.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='STBL'
        ARED=70.0/255.0
        AGREEN=130.0/255.0
        ABLUE=180.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='TAN '
        ARED=210.0/255.0
        AGREEN=180.0/255.0
        ABLUE=140.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='THIS'
        ARED=216.0/255.0
        AGREEN=191.0/255.0
        ABLUE=216.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='TURQ'
        ARED=64.0/255.0
        AGREEN=224.0/255.0
        ABLUE=208.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='VIOL'
        ARED=238.0/255.0
        AGREEN=130.0/255.0
        ABLUE=238.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='WHEA'
        ARED=245.0/255.0
        AGREEN=222.0/255.0
        ABLUE=179.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GYEL'
        ARED=173.0/255.0
        AGREEN=255.0/255.0
        ABLUE=47.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='LCYA'
        ARED=224.0/255.0
        AGREEN=255.0/255.0
        ABLUE=255.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='BLU2'
        ARED=0.0/255.0
        AGREEN=0.0/255.0
        ABLUE=238.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='BLU3'
        ARED=0.0/255.0
        AGREEN=0.0/255.0
        ABLUE=205.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='BLU4'
        ARED=0.0/255.0
        AGREEN=0.0/255.0
        ABLUE=139.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CYA2'
        ARED=0.0/255.0
        AGREEN=238.0/255.0
        ABLUE=238.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CYA3'
        ARED=0.0/255.0
        AGREEN=205.0/255.0
        ABLUE=205.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='CYA4'
        ARED=0.0/255.0
        AGREEN=139.0/255.0
        ABLUE=139.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GRE2'
        ARED=0.0/255.0
        AGREEN=238.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GRE3'
        ARED=0.0/255.0
        AGREEN=205.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='GRE4'
        ARED=0.0/255.0
        AGREEN=139.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='YEL2'
        ARED=238.0/255.0
        AGREEN=238.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='YEL3'
        ARED=205.0/255.0
        AGREEN=205.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='YEL4'
        ARED=139.0/255.0
        AGREEN=139.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='ORA2'
        ARED=238.0/255.0
        AGREEN=154.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='ORA3'
        ARED=205.0/255.0
        AGREEN=133.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='ORA4'
        ARED=139.0/255.0
        AGREEN=90.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='RED2'
        ARED=238.0/255.0
        AGREEN=0.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='RED3'
        ARED=205.0/255.0
        AGREEN=0.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='RED4'
        ARED=139.0/255.0
        AGREEN=0.0/255.0
        ABLUE=0.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MAG2'
        ARED=238.0/255.0
        AGREEN=0.0/255.0
        ABLUE=238.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MAG3'
        ARED=205.0/255.0
        AGREEN=0.0/255.0
        ABLUE=205.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)=IBASLC
        ICSTR(2:24)='definecolor{    }{rgb}{'
        NCSTR=24
        ICSTR(14:17)='MAG4'
        ARED=139.0/255.0
        AGREEN=0.0/255.0
        ABLUE=139.0/255.0
        CALL GRTRRE(ARED,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(AGREEN,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRRE(ABLUE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='}'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
C
      CALL DPCONA(34,IQUOTE)
      ISVGOS='ON'
      ISVGCN=0
      ISVGLN=0
C
      ICSTR(1:14)='<?xml version='
      ICSTR(15:15)=IQUOTE
      ICSTR(16:18)='1.0'
      ICSTR(19:19)=IQUOTE
      ICSTR(20:29)=' encoding='
      ICSTR(30:30)=IQUOTE
      ICSTR(31:40)='ISO-8859-1'
      ICSTR(41:41)=IQUOTE
      ICSTR(42:53)=' standalone='
      ICSTR(54:54)=IQUOTE
      ICSTR(55:56)='no'
      ICSTR(57:57)=IQUOTE
      ICSTR(58:59)='?>'
      NCSTR=-59
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:21)='<!DOCTYPE svg PUBLIC '
      ICSTR(22:22)=IQUOTE
      ICSTR(23:50)='-//W3C//DTD SVG 20010904//EN'
      ICSTR(51:51)=IQUOTE
      NCSTR=-51
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:5)='     '
      ICSTR(6:6)=IQUOTE
      ICSTR(7:50)='http://www.w3.org./TR/2001/REC-SVG-20010904/'
      ICSTR(51:63)='DTD/svg10.dtd'
      ICSTR(64:64)=IQUOTE
      ICSTR(65:65)='>'
      NCSTR=-65
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(ISVGSS(1:3).EQ.'EXT')THEN
        NCSTR=22
        ICSTR(1:NCSTR)='<?xml-stylesheet href='
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCTEMP=1
        DO16001I=80,1,-1
          NCTEMP=I
          IF(ISVGSN(I:I).NE.' ')GOTO16003
16001   CONTINUE
16003   CONTINUE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+NCTEMP-1)=ISVGSN(1:NCTEMP)
        NCSTR=NCSTR+NCTEMP
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=22
        ICSTR(1:NCSTR)='                 type='
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+7)='text/css'
        NCSTR=NCSTR+8
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)='?>'
        NCSTR=-(NCSTR+1)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      NCHTOT=6
      IXTEMP=INT(ANUMHP)
      IYTEMP=INT(ANUMVP)
C
      ICSTR(1:11)='<svg xmlns='
      ICSTR(12:12)=IQUOTE
      ICSTR(13:38)='http://www.w3.org/2000/svg'
      ICSTR(39:39)=IQUOTE
      NCSTR=-39
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='     xmlns:xlink='
      ICSTR(18:18)=IQUOTE
      ICSTR(19:46)='http://www.w3.org/1999/xlink'
      ICSTR(47:47)=IQUOTE
      ICSTR(48:58)=' xml:space='
      ICSTR(59:59)=IQUOTE
      ICSTR(60:67)='preserve'
      ICSTR(68:68)=IQUOTE
      NCSTR=-68
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:11)='     width='
      ICSTR(12:12)=IQUOTE
      NCSTR=12
C
      IF(IXTEMP.LE.9)THEN
        NCHTOT=1
      ELSEIF(IXTEMP.LE.99)THEN
        NCHTOT=2
      ELSEIF(IXTEMP.LE.999)THEN
        NCHTOT=3
      ELSEIF(IXTEMP.LE.9999)THEN
        NCHTOT=4
      ELSE
        NCHTOT=5
      ENDIF
C
      CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+7)=' height='
      NCSTR=NCSTR+8
      ICSTR(NCSTR:NCSTR)=IQUOTE
C
      IF(IYTEMP.LE.9)THEN
        NCHTOT=1
      ELSEIF(IYTEMP.LE.99)THEN
        NCHTOT=2
      ELSEIF(IYTEMP.LE.999)THEN
        NCHTOT=3
      ELSEIF(IYTEMP.LE.9999)THEN
        NCHTOT=4
      ELSE
        NCHTOT=5
      ENDIF
C
      CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
      NCHTOT=5
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='     viewBox='
      ICSTR(14:14)=IQUOTE
      ICSTR(15:18)='0 0 '
      NCSTR=18
      CALL GRTRIN(IXTEMP,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      CALL GRTRIN(IYTEMP,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='>'
      NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:9)='   <desc>'
      NCSTR=-9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:47)='   SVG GRAPHIC CREATED BY DATAPLOT: SEPTEMBER, '
      ICSTR(48:60)='2010 VERSION.'
      NCSTR=-60
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='   </desc>'
      NCSTR=-10
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:9)='   <g id='
      ICSTR(10:10)=IQUOTE
      ICSTR(11:25)='dataplot graph1'
      ICSTR(26:26)=IQUOTE
      ICSTR(27:27)='>'
      NCSTR=-27
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C  CREATE BACKGROUND VIA FILLED RECTANGLE
C
      ISVGLN=ISVGLN+1
      ICSTR(1:9)='   <g id='
      ICSTR(10:10)=IQUOTE
      NCSTR=10
      NCHTOT=1
      CALL GRTRIN(ISVGLN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='>'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:11)='   <rect x='
      NCSTR=-11
      ICSTR(12:12)=IQUOTE
      ICSTR(13:13)='0'
      ICSTR(14:14)=IQUOTE
      ICSTR(15:17)=' y='
      ICSTR(18:18)=IQUOTE
      ICSTR(19:19)='0'
      ICSTR(20:20)=IQUOTE
      NCSTR=-20
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:15)='         width='
      ICSTR(16:16)=IQUOTE
      ICSTR(17:20)='100%'
      ICSTR(21:21)=IQUOTE
      ICSTR(22:29)=' height='
      ICSTR(30:30)=IQUOTE
      ICSTR(31:34)='100%'
      ICSTR(35:35)=IQUOTE
      NCSTR=-35
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICASE='BACK'
      CALL GRTRCO(ICASE,IBACCO,JCOL)
C
      ICSTR(1:15)='         style='
      ICSTR(16:16)=IQUOTE
      ICSTR(17:29)='stroke:none; '
      ICSTR(30:35)='fill:#'
      NCSTR=35
      NCHTOT=2
      JTEMP=JCOL
      IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JTEMP=1
      JRED=IRED(JTEMP)
      CALL DPCONX(JRED,ICJUNK)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
      NCSTR=NCSTR+1
      JGREEN=IGREEN(JTEMP)
      CALL DPCONX(JGREEN,ICJUNK)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
      NCSTR=NCSTR+1
      JBLUE=IBLUE(JTEMP)
      CALL DPCONX(JBLUE,ICJUNK)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
      NCSTR=NCSTR+2
      ICSTR(NCSTR:NCSTR)=';'
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      ICSTR(NCSTR+1:NCSTR+2)='/>'
      NCSTR=NCSTR+2
      NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:7)='   </g>'
      NCSTR=7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
C     SPECIFY THE SPECIFIC DEVICE AND WHETHER WE HAVE DEVICE 1, 2 OR 3.
C
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IF(IMODEL.EQ.'POST')IVAL1=2
      IF(IMODEL.EQ.'PDF')IVAL1=3
      IF(IMODEL.EQ.'SVG')IVAL1=4
      IF(IMODEL.EQ.'QUAR')IVAL1=5
      IF(IMODEL.EQ.'PNG')IVAL1=6
      IF(IMODEL.EQ.'WIND')IVAL1=7
      IF(IMODEL.EQ.'EPS')IVAL1=8
      IF(IVAL1.EQ.0)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17006)IMODEL
17006   FORMAT('***** ERROR: MODEL ',A4, ' IS NOT SUPPORTED FOR CAIRO.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)THEN
C
C       DEVICE 2 OUTPUT
C
        ICAIPN=1
        IVAL2=2
        DO17011I=80,1,-1
          ILAST=I
          IF(IPL1NA(I:I).NE.' ')GOTO17014
17011   CONTINUE
        ILAST=1
17014   CONTINUE
        DO17019I=1,ILAST
          CALL DPCOAN(IPL1NA(I:I),IJUNK)
          IADE(I)=IJUNK
17019   CONTINUE
        IADE(ILAST+1)=0
      ELSEIF(IGUNIT.EQ.IPL2NU)THEN
C
C       DEVICE 3 OUTPUT
C
        ICAIP2=1
        IVAL2=3
        DO17021I=80,1,-1
          ILAST=I
          IF(IPL2NA(I:I).NE.' ')GOTO17024
17021   CONTINUE
        ILAST=1
17024   CONTINUE
        DO17029I=1,ILAST
          CALL DPCOAN(IPL2NA(I:I),IJUNK)
          IADE(I)=IJUNK
17029   CONTINUE
        IADE(ILAST+1)=0
      ELSE
C
C       DEVICE 1 OUTPUT - SCREEN DEVICES ONLY (NO FILENAME)
C
        IADE(1)=0
      ENDIF
C
      ICASE='BACK'
      CALL GRTRCO(ICASE,IBACCO,JCOL)
      ATEMP=255.0
      ARED=REAL(IRED(JCOL))/ATEMP
      AGREEN=REAL(IGREEN(JCOL))/ATEMP
      ABLUE=REAL(IBLUE(JCOL))/ATEMP
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'INDE')THEN
        WRITE(ICOUT,17051)IVAL2,IVAL1,IXTEMP,IYTEMP
17051   FORMAT('GRINDE: BEFORE CAINIT, IVAL2,IVAL1,IXTEMP,IYTEMP: ',4I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C     NOTES:
C
C     1. X11 AND QUARTZ ARE ONLY SUPPORTED FOR DEVICE 1
C     2. POSTSCRIPT/ENCAPSULATED PDF/PDF, SVG, PNG ONLY SUPPORTED FOR
C        DEVICES 2 AND 3
C
      IF((IVAL1.EQ.1.OR.IVAL1.EQ.5) .AND. IVAL2.GT.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        IF(IVAL1.EQ.1)THEN
          WRITE(ICOUT,17062)
17062     FORMAT('****** ERROR IN OPENING CAIRO X11 DEVICE')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,17064)
17064     FORMAT('       X11 IS ONLY SUPPORTED FOR DEVICE 1')
          CALL DPWRST('XXX','BUG ')
        ELSE
          WRITE(ICOUT,17063)
17063     FORMAT('****** ERROR IN OPENING CAIRO QUARTZ DEVICE')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,17065)
17065     FORMAT('       QUARTZ IS ONLY SUPPORTED FOR DEVICE 1')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        IERROR='YES'
        GOTO9000
      ELSEIF(IVAL1.EQ.2 .AND. IVAL2.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17072)
17072   FORMAT('****** ERROR IN OPENING CAIRO POSTSCRIPT DEVICE')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17074)
17074   FORMAT('       POSTSCRIPT IS NOT SUPPORTED FOR DEVICE 1')
        CALL DPWRST('XXX','BUG ')
        IERROR='YES'
        GOTO9000
      ELSEIF(IVAL1.EQ.3 .AND. IVAL2.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17082)
17082   FORMAT('****** ERROR IN OPENING CAIRO PDF DEVICE')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17084)
17084   FORMAT('       PDF IS NOT SUPPORTED FOR DEVICE 1')
        CALL DPWRST('XXX','BUG ')
        IERROR='YES'
        GOTO9000
      ELSEIF(IVAL1.EQ.4 .AND. IVAL2.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17092)
17092   FORMAT('****** ERROR IN OPENING CAIRO SVG DEVICE')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17094)
17094   FORMAT('       SVG IS NOT SUPPORTED FOR DEVICE 1')
        CALL DPWRST('XXX','BUG ')
        IERROR='YES'
        GOTO9000
      ELSEIF(IVAL1.EQ.6 .AND. IVAL2.EQ.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17097)
17097   FORMAT('****** ERROR IN OPENING CAIRO PNG DEVICE')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17098)
17098   FORMAT('       PNG IS NOT SUPPORTED FOR DEVICE 1')
        CALL DPWRST('XXX','BUG ')
        IERROR='YES'
        GOTO9000
      ENDIF
      CALL CAINIT(IVAL2,IVAL1,IADE,ANUMHP,ANUMVP,
     1            ARED,AGREEN,ABLUE,IERR)
      IF(IERR.GT.0)THEN
C
C       PRINT ERROR MESSAGE
C
C       TURN DEVICE POWER OFF
C
C
      ENDIF
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'INDE')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRINDE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)NCSTR,IERRG4
 9023   FORMAT('NCSTR,IERRG4 = ',I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRMOBE(PX,PY)
C
C     PURPOSE--MOVE THE BEAM TO THE POINT (PX,PY)
C              ON A SPECIFIC GRAPHICS DEVICE.
C     NOTE--THE COORDINATES IN (PX,PY) ARE IN
C           STANDARDIZED (0.0 TO 100.0) UNITS.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE DRIVER
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER 1997. UPDATE TO GENERAL CODED FOR GUI
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
CCCCC LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      TYPE (XYCOORD)   WXY
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*1 ICARAT
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='MOBE'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'MOBE')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRMOBE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,IMODE2,IMODE3
   52   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IGCODE,ISOFT,ISOFT2,ISOFT3
   54   FORMAT('IGCODE,ISOFT,ISOFT2,ISOFT3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IGBAUD,IGUNIT,PX,PY
   55   FORMAT('IGBAUD,IGUNIT,PX,PY = ',2I8,2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,59)IBUGG4,ISUBG4,IERRG4
   59   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **   STEP 11--                                      **
C               **   TREAT THE TEKTRONIX CASE                       **
C               ******************************************************
C
 1100 CONTINUE
      IFACTO=4
      IF(NUMVPP.GE.3000)IFACTO=1
      ICSTR(1:1)=IGSC
      NCSTR=1
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      CALL TKTRPT(IX,IY,IFACTO,ICSTR,NCSTR,ISUBN0)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO MOVE BEAM (= MOVE PEN)--                     **
C               **  USE THE LOWER CASE P (= MOVE) INSTRUCTIONS      **
C               **  AND PACKED BINARY COORDINATES                   **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH ARE THE**
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 81, 253.                        **
C               ******************************************************
C
 2100 CONTINUE
      ICSTR(1:1)='p'
      NCSTR=1
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      CALL HPTRPT(IX,IY,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO MOVE BEAM (= MOVE PEN)--                     **
C               **  USE THE PU (= PEN UP)                           **
C               **  AND PA (= PLOT ABSOLUTE) INSTRUCTION            **
C               **  ALONG WITH INTEGER COORDINATES                  **
C               **  (WITH   TRAILING SEMI-COLONS WHICH ARE THE      **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 62, 143.                        **
C               **             PAGE 65-67, 143.                     **
C               ******************************************************
C
 2200 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      ICSTR(1:5)='PU;PA'
      NCSTR=5
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(11:11)=','
      NCSTR=11
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(17:17)=';'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-12, 10-13.                       **
C               **********************************************************
C
 2300 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='*pa'
      NCSTR=4
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(10:10)=','
      NCSTR=10
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(16:16)='Z'
      NCSTR=16
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT              CASE            **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:8)='MOVE TO '
      NCSTR=8
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX,PY,AX,AY,ISUBN0)
      CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(19:20)='  '
      NCSTR=20
      CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
C     DECEMBER 1997.  FOR GUI, CONVERT COORDINATES TO INTEGER (BY
C                     MULTIPLYING BY 100).  DO NOT PRINT OUT SUCCESSIV POINTS
C                     IF THEY ARE IDENTICAL.
C
 3200 CONTINUE
      IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
        ICSTR(1:2)='M '
        NCSTR=2
        NCHTOT=IGENFA+3
        CALL GRTRSA(PX,PY,AX,AY,ISUBN0)
        IPX=INT(AX*10.**IGENFA+0.5)
        IPY=INT(AY*10.**IGENFA+0.5)
        CALL GRTRIN(IPX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IPY,NCHTOT,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:5)='MOTO '
        NCSTR=5
        NCHTOT=10
        NCHDEC=5
        CALL GRTRSA(PX,PY,AX,AY,ISUBN0)
        CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(16:17)='  '
        NCSTR=17
        CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  CGM DOES NOT SUPPORT THIS FEATURE                        **
C               ***************************************************************
C
 3300 CONTINUE
      ICSTR(1:6)='LINE '
      NCSTR=6
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX,PY,AX,AY,ISUBN0)
      CALL GRTRRE(AX,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(17:17)=','
      NCSTR=17
      CALL GRTRRE(AY,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(28:28)=';'
      NCSTR=28
C     NOTE: CGM HAS NO "MOVE" COMMAND.  USING LINE WITH ONLY THE
C           COORDINATES FOR THE FIRST POINT DOES NOT OFFICIALLY CONFORM
C           TO THE STANDARD (ALTHOUGH MOST TRANSLATORS WILL PROBABLY
C           HANDLE IT).  HOWEVER, THIS ROUTINE USUALLY ONLY CALLED TO
C           POSTION THE CURSOR, E.G. AT THE END OF A PLOT, SO NO HARM
C           TO SIMPLY IGNORE THIS INSTRUCTION.
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO MOVE BEAM (= MOVE PEN)--                     **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  REFERENCE--USE CALCOMP LIBRARY ROUTINE          **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
#ifdef HAVE_CALCOMP
      CALL CALCPT(PX,PY,PXA,PYA,ISUBN0)
      IPEN=3
      CALL PLOT(PXA,PYA,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
#ifdef HAVE_LAHEY_CALCOMP
      CALL CALCPT(PX,PY,PXA,PYA,ISUBN0)
      IPEN=3
      CALL PLOT(PXA,PYA,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
#ifdef HAVE_QWIN
      CALL MOVETO(INT2(IX),INT2(IY),WXY)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
#ifdef HAVE_INTERACTER
      CALL IGrMoveTo(REAL(IX),REAL(IY))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
#ifdef HAVE_WININTERACTER
      CALL IGrMoveTo(REAL(IX),REAL(IY))
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO MOVE BEAM (= MOVE PEN)--                     **
C               **  USE THE 1 OP CODE (= PEN UP) AND                **
C               **  THE VECTOR PLOT (A TO X + COOR) OP CODES        **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE THE CALCOMP LIBRARY ROUTINES
C               ******************************************************
C
 5100 CONTINUE
#ifdef HAVE_ZETA
      CALL CALCPT(PX,PY,PXA,PYA,ISUBN0)
      IPEN=3
      CALL PLOT(PXA,PYA,IPEN)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      GOTO 9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO MOVE BEAM (= MOVE PEN)--                     **
C               **  USE THE P[ (= POSITION) COMMAND                 **
C               **  ALONG WITH INTEGER COORDINATES                  **
C               **  WITH A   TRAILING ]                             **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGE 101                             **
C               ******************************************************
C
 8100 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      ICSTR(1:2)='P['
      NCSTR=2
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(8:8)=','
      NCSTR=8
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=']'
      NCSTR=14
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  1)  XCOOR  YCOOR  MOVETO                        **
C               **  2)  STROKE                                      **
C               **  REFERENCE: POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **  COOKBOOK FROM ADOBE SYSTEMS                     **
C               ******************************************************
C
 8600 CONTINUE
      ICSTR(1:8)='newpath '
      NCSTR=8
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=' '
      NCSTR=14
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(20:33)=' moveto stroke'
      NCSTR=33
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  1) ^IVvvvvv- VERTICAL POSITION RELATIVE TO TOP  **
C               **               OF PAGE (QUICPT WILL ADD MARGIN)   **
C               **  2) ^IHhhhhh- HORIZONTAL POSITION RELATIVE TO    **
C               **               LEFT OF PAGE                       **
C               **  REFERENCE: QUIC PROGRAMMING MANUAL              **
C               **  PAGES: 6-9, 6-12                                **
C               ******************************************************
C
 9100 CONTINUE
      CALL DPCONA(94,ICARAT)
      PYTEMP=100.-PY
      CALL QUICPT(PX,PYTEMP,IX1,IY1,ISUBN0)
      ICSTR(1:1)=ICARAT
      ICSTR(2:3)='IV'
      NCSTR=3
      NCHTOT=-5
      CALL GRTRIN(IY1,NCHTOT,ICSTR,NCSTR)
      ICSTR(9:9)=ICARAT
      ICSTR(10:11)='IH'
      NCHTOT=-5
      NCSTR=11
      CALL GRTRIN(IX1,NCHTOT,ICSTR,NCSTR)
      NCSTR=16
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE - NULL ROUTINE        **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCMOTO(PX,PY)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               **  NULL ROUTINE                                    **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      CALL GRTRSD(PX,PY,IX,IY,ISUBN0)
      AX1=REAL(IX)
      AY1=REAL(IY)
#ifdef HAVE_AQUA
      CALL aqmove(AX1,AY1)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
      AX1=PX
      AY1=PY
      CALL GRTRSD(AX1,AY1,IX,IY,ISUBN0)
      CALL CAMOVE(IVAL2,AX1,AY1)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'MOBE')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRMOBE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)NCSTR,IERRG4
 9023   FORMAT('NCSTR,IERRG4 = ',I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GROPDE
C
C     PURPOSE--OPEN A SPECIFIC GRAPHICS DEVICE.  THAT IS, TURN ON
C              (= EMPOWER) A DEVICE WHICH IS CURRENTLY OFF.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL    1989. SOFT-CODE BACKSLASH FOR UNIX
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE DRIVER
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
      LOGICAL MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      TYPE (QWINFO)   WINFO
      TYPE (FONTINFO) MSFONT
      TYPE (XYCOORD) XY
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*1 ICARAT
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='OPDE'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'OPDE')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GROPDE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,IMODE2,IMODE3
   52   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IGCODE,ISOFT,ISOFT2,ISOFT3
   54   FORMAT('IGCODE,ISOFT,ISOFT2,ISOFT3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IGBAUD,IGUNIT,NCPREP
   55   FORMAT('IGBAUD,IGUNIT,NCPREP = ',3I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)IBUGG4,ISUBG4,IERRG4
   56   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,61)IPPDE1,IPPDE2
   61   FORMAT('IPPDE1,IPPDE2 = ',A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCPREP.GT.0)THEN
          DO63I=1,NCPREP
            WRITE(ICOUT,64)I,ICPREP(I:I)
   64       FORMAT('I,ICPREP(I:I) = ',I8,2X,A1,4X)
            CALL DPWRST('XXX','BUG ')
   63     CONTINUE
        ENDIF
      ENDIF
C
C               ********************************************
C               **  STEP 0--                              **
C               **  IF CALLED FOR, WRITE OUT              **
C               **  A USER-DEFINED PRE-PLOT LINE          **
C               ********************************************
C
      IF(IPPDE1.EQ.'ANY' .OR. IPPDE1.EQ.'ALL')THEN
        IF(NCPREP.GE.1)THEN
          NCSTR=NCPREP
          IF(NCSTR.GT.40)NCSTR=40
          ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4662 CASE (A PENPLOTTER)--  **
C               **  TO TURN IT ON,                                  **
C               **  WRITE OUT AN ESCAPE A E  .                      **
C               ******************************************************
C
 1100 CONTINUE
C
      IF(IPPDE1.EQ.'TEKT')THEN
        IF(NCPREP.GE.1)THEN
          NCSTR=NCPREP
          IF(NCSTR.GT.40)NCSTR=40
          ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (WITH PACKED BINARY)                            **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO TURN IT ON,                                  **
C               **  SEND ESCAPE PERIOD LEFT-PARENTHESIS             **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 72, 221-249.                    **
C               **  ALLOW GRAPH LIMITS ON THE PLOTTER TO            **
C               **  TAKE ON HARDWARE DEFAULT                        **
C               **  (X = 520 TO 15720 MACHINE UNITS                 **
C               **  AND Y = 380 TO 10380 MACHINE UNITS).            **
C               **  BY PURPOSELY NOT SETTING THE GRAPH LIMITS,      **
C               **  THIS WILL ALLOW THE USER TO MANUALLY            **
C               **  CHANGE LIMITS BY THE PLOTTER BUTTONS            **
C               **  SO AS TO ACCOMODATE DIFFERENT SIZE PAPER.       **
C               **  ALSO ALLOW THE PLOTTER UNITS                    **
C               **  (= PLOTTER "RESOLUTION") TO                     **
C               **  TAKE ON THE HARDWARE DEFAULT WHICH IS           **
C               **  3040 UNITS IN THE X DIRECTION AND               **
C               **  2000 UNITS IN THE Y DIRECTION                   **
C               ******************************************************
C
 2100 CONTINUE
C
      IF(IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'7221')THEN
        IF(NCPREP.GE.1)THEN
          NCSTR=NCPREP
          IF(NCSTR.GT.40)NCSTR=40
          ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
C
      ICSTR(1:8)='+Z.YZ.(:'
      ICSTR(2:2)=IESCC
      ICSTR(5:5)=IESCC
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:5)='+Z.J:'
      ICSTR(2:2)=IESCC
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:25)='+Z.M0050;010;010;013;000:'
      ICSTR(2:2)=IESCC
      NCSTR=25
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:21)='+Z.I0080;000;017;000:'
      ICSTR(2:2)=IESCC
      NCSTR=21
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:17)='+Z.N0010;019;000:'
      ICSTR(2:2)=IESCC
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:13)='+Z.@9999;002:'
      ICSTR(2:2)=IESCC
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO    TURN ON    INSTRUCTION PER SE,   **
C               **  BUT TO INITIALIZE IT,                           **
C               **  SEND    IN                                      **
C               **  (WITH A TRAILING SEMI-COLON WHICH IS THE        **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 40, 141.                        **
C               **  ALLOW GRAPH LIMITS ON THE PLOTTER TO            **
C               **  TAKE ON HARDWARE DEFAULT                        **
C               **  (X = 520 TO 15720 MACHINE UNITS                 **
C               **  AND Y = 380 TO 10380 MACHINE UNITS).            **
C               **  BY PURPOSELY NOT SETTING THE GRAPH LIMITS,      **
C               **  THIS WILL ALLOW THE USER TO MANUALLY            **
C               **  CHANGE LIMITS BY THE PLOTTER BUTTONS            **
C               **  SO AS TO ACCOMODATE DIFFERENT SIZE PAPER.       **
C               **  ALSO ALLOW THE PLOTTER UNITS                    **
C               **  (= PLOTTER "RESOLUTION") TO                     **
C               **  TAKE ON THE HARDWARE DEFAULT WHICH IS           **
C               **  3040 UNITS IN THE X DIRECTION AND               **
C               **  2000 UNITS IN THE Y DIRECTION                   **
C               ******************************************************
C
 2200 CONTINUE
C
      IF(IPPDE1.EQ.'HPGL' .OR. IPPDE1.EQ.'HP-G' .OR.
     1  (IPPDE1.EQ.'HP'.AND.IPPDE2.EQ.'GL') .OR.
     1  (IPPDE1.EQ.'HP'.AND.IPPDE2.EQ.'GL+'))THEN
        IF(NCPREP.GE.1)THEN
          NCSTR=NCPREP
          IF(NCSTR.GT.40)NCSTR=40
          ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
C
C     THE FOLLOWING WAS A SUGGESTED AUGMENTATION (NBS'S YONG-KI KIM,
C     MARCH, 1985) WHEN THE PLOTTER IS CONNECTED IN SERIES BETWEEN THE
C     HOST AND THE TERMINAL, AND THE PLOTTER NEEDS TO BE PUT IN A
C     LISTEN-AND-CAPTURE MODE WHEN GENERATING A PLOT.  TO SPECIFY THIS,
C     THE ANALYST ENTERS THE COMMAND        HP-GL +
C     RATHER THAN THE USUAL     HP-GL
C
C     THE FOLLOWING WAS COMMENTED OUT
C     ON THE SUGGESTION OF PETER VERDIER (DEC., 1984)
C
CCCCC ICSTR(1:3)='IN;'
CCCCC NCSTR=3
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-3, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
C
      IF((IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2622') .OR.
     1  (IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2623')  .OR.
     1  (IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2627')  .OR.
     1  (IPPDE1.EQ.'HP'.AND.'IPPDE2'.EQ.'2647'))THEN
        IF(NCPREP.GE.1)THEN
          NCSTR=NCPREP
          IF(NCSTR.GT.40)NCSTR=40
          ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT              CASE            **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
C
      IF(IPPDE1.EQ.'GENE' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      ICSTR(1:11)='OPEN DEVICE'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
C
      IF(IPPDE1.EQ.'CODE' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      ICSTR(1:4)='OPDE'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3300 CONTINUE
C
      IF(IPPDE1.EQ.'CGM ' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO TURN IT ON--                                 **
C               **  USE THE CALCOMP LIBRARY ROUTINES                **
C               **  (NULL ROUTINE)                                  **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IF(ILAHSW.EQ.'OFF')THEN
        IX1=0
        IF(ILAHGR.EQ.'BIOS')THEN
          IX2=0
        ELSEIF(ILAHGR.EQ.'DIRE')THEN
          IX2=1
        ELSE
          IX2=1
        ENDIF
        IMODE=0
#ifdef HAVE_LAHEY_CALCOMP
        CALL PLOTS(IX1,IX2,IMODE)
#endif
        ILAHSW='ON'
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
#ifdef HAVE_QWIN
      IRESLT=FOCUSQQ(99)
      IRESLT=SETFONT('fh16w8b')
      MODESTATUS=GETFONTINFO(MSFONT)
      ICHRHT=MSFONT.PIXHEIGHT
      ICHRWD=MSFONT.PIXWIDTH
      IF(ICHRWD.EQ.0)ICHRWD=MSFONT.AVGWIDTH
      IF(ICHRWD.EQ.0)ICHRWD=ICHRHT/2
      IRESLT=GETWSIZEQQ(99,QWIN$SIZECURR,WINFO)
C
      NUMHPP=WINFO.W*ICHRWD
      IF(NUMHPP.LE.100)NUMHPP=100
      NUMVPP=WINFO.H*ICHRHT
      IF(NUMVPP.LE.100)NUMVPP=100
      ANUMHP=REAL(NUMHPP)
      ANUMVP=REAL(NUMVPP)
C
      CALL SETVIEWORG(INT2(0),INT2(0),XY)
      CALL SETVIEWPORT(INT2(0),INT2(0),INT2(NUMHPP-1),INT2(NUMVPP-1))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
#ifdef HAVE_OPEN_GL
      CALL GLOPDE()
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      IHAND2=1
      CALL WindowSelect(IHAND2)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO TURN IT ON--                                 **
C               **  WRITE OUT    ZZZZZZZZZZ                         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **   USE CALCOMP LIBRARY ROUTINES                   **
C               **   NULL ROUTINE                                   **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      IF(IPPDE1.EQ.'SUN' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO OPEN A DEVICE---                             **
C               **  WRITE OUT AN XX                                 **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES XX AND XXX                     ZZ
C               ******************************************************
C
 8100 CONTINUE
C
      IF(IPPDE1.EQ.'REGI' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 86                                         **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  SINCE POSTSCRIPT IS A PAGE ORIENTATED LANGUAGE, **
C               **  SET PAGE PARAMETERS IN GRERSC (ERASE SCREEN)    **
C               **  REFERENCE - POSTSCRIPT LANGUAGE TUTORIAL AND    **
C               **  COOKBOOK FROM ADOBE SYSTEMS, CHAPTER 6          **
C               ******************************************************
C
 8600 CONTINUE
C
      IF(IPPDE1.EQ.'POST' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 91                                         **
C               **  TREAT THE QUIC CASE                             **
C               **  1) SET ORIENTATION - LANDSCAPE "^IOL"           **
C               **                       PORTRAIT  "^IOP"           **
C               **  2) SET MARGIN      - HORIZONTAL "^IHMlllllrrrrr **
C               **                     - VERTICAL   "^IVMtttttbbbbb **
C               **     NOTE: MARGINS WILL BE ENFORCED BY THE "OFFSET"*
C               **           AND NUMBER OF PICTURE POINTS.  USING   **
C               **           IHM, IHV CAUSES A FORM FEED WHEN IT IS **
C               **           REACHED.  WE ONLY WANT TO CLIP, NOT    **
C               **           START A NEW PAGE.                      **
C               **  REFERENCE: QUIC PROGRAMMING MANUAL FROM QMS     **
C               ******************************************************
C
 9100 CONTINUE
C
      IF(IPPDE1.EQ.'QUIC' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      CALL DPCONA(94,ICARAT)
      ICSTR(1:1)=ICARAT
      ICSTR(2:4)='IOL'
C
      IF(IORNSW.EQ.'PORT')THEN
        ICSTR(4:4)='P'
        IX2=8500
        IY2=11000
      ELSE
        IX2=11000
        IY2=8500
      ENDIF
C
      ICSTR(5:5)=ICARAT
      ICSTR(6:8)='IMH'
      IX=0
      IY=0
      NCSTR=8
      NCHTOT=-5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IX2,NCHTOT,ICSTR,NCSTR)
      ICSTR(19:19)=ICARAT
      ICSTR(20:22)='IMV'
      NCSTR=22
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      CALL GRTRIN(IY2,NCHTOT,ICSTR,NCSTR)
      NCSTR=32
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
      IF(IPPDE1.EQ.'X11 ' .AND. NCPREP.GE.1)THEN
        NCSTR=NCPREP
        IF(NCSTR.GT.40)NCSTR=40
        ICSTR(1:NCSTR)=ICPREP(1:NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCOPDE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C  NOTE: DO NOTHING HERE. SETUP NEXT PLOT IN GRERSC ROUTINE.
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'OPDE')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GROPDE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)NCSTR,NCPREP,IERRG4
 9023   FORMAT('NCSTR,NCPREP,IERRG4 = ',2I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
        WRITE(ICOUT,9031)IPPDE1,IPPDE2
 9031   FORMAT('IPPDE1,IPPDE2 = ',A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCPREP.GT.0)THEN
          DO9033I=1,NCPREP
            WRITE(ICOUT,9034)I,ICPREP(I:I)
 9034       FORMAT('I,ICPREP(I:I) = ',I8,2X,A1,4X)
            CALL DPWRST('XXX','BUG ')
 9033     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRRESC(PXCOOR,PYCOOR)
C
C     PURPOSE--READ SCREEN COORDINATES ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY    1989. SUN (BY BILL ANDERSON)
C     UPDATED         --JANUARY    1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY    1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY    1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY    1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY    1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL      1989. SOFT-CODE BACKSLASH FOR UNIX
C     UPDATED         --MARCH      1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY        1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY        1991. VGA/TURBOC DRIVER (JJF)
C     UPDATED         --JULY       1996. LAHEY (ALAN)
C     UPDATED         --OCTOBER    1996. MICROSOFT QWIN (ALAN)
C     UPDATED         --SEPTEMBER  2007. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL      2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                        (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
#endif
C
      CHARACTER*1 IBCH
      CHARACTER*1 IBHIX
      CHARACTER*1 IBLOX
      CHARACTER*1 IBHIY
      CHARACTER*1 IBLOY
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOHO.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='RESC'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRRESC--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)IMANUF,IMODEL,IBUGG4,IGUNIT
   53   FORMAT('IMANUF,IMODEL,IBUGG4,IGUNIT = ',3(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)NUMHPP,NUMVPP,ANUMHP,ANUMVP
   56   FORMAT('NUMHPP,NUMVPP,ANUMHP,ANUMVP = ',2I8,2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,57)PXCOOR,PYCOOR
   57   FORMAT('PXCOOR,PYCOOR = ',2G15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO9000
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ************************************************************
C               **  STEP 11--                                             **
C               **  TREAT THE TEKTRONIX 400X, 401X, 405X, AND 4114 CASES  **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES)      **
C               **  TO READ THE SCREEN,                                   **
C               **  WRITE OUT AN ESCAPE SUB                               **
C               ************************************************************
C
 1100 CONTINUE
      IFACTO=4
      IF(NUMHPP.GE.4000)IFACTO=1
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,1111)
 1111   FORMAT('IN GRRESC, ABOUT TO ENTER GRKICR...')
        CALL DPWRST('XXX','BUG ')
      ENDIF
      CALL GRKICR
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,1112)
 1112   FORMAT('IN GRRESC, ABOUT TO WRITE OUT ESCAPE SUB...')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      NCSTR=0
      IF(IHOST1.EQ.'VAX')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='$'
      ENDIF
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=ISYNC
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IESCC
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=ISUBC
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IUSC
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      READ(IRDGR,1122)IBCH,IBHIX,IBLOX,IBHIY,IBLOY
 1122 FORMAT(5A1)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,1123)
 1123   FORMAT('IN GRRESC, ABOUT TO ENTER GRKICR...')
        CALL DPWRST('XXX','BUG ')
      ENDIF
      CALL GRRECR
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,1124)
 1124   FORMAT('IN GRRESC, AFTER READING SCREEN...')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,1125)IBCH,IBHIX,IBLOX,IBHIY,IBLOY
 1125   FORMAT('IBCH,IBHIX,IBLOX,IBUTE4,IBLOY = ',5A1)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,1126)
 1126   FORMAT('IN GRRESC, ABOUT TO ENTER GRTRBY...')
        CALL DPWRST('XXX','BUG ')
      ENDIF
      CALL TKTRBY(IBHIX,IBLOX,IBHIY,IBLOY,IFACTO,IXCOOR,IYCOOR)
C
      XCOOR=IXCOOR
      YCOOR=IYCOOR
      PXCOOR=100.0*(XCOOR/ANUMHP)
      PYCOOR=100.0*(YCOOR/ANUMVP)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX 4020, 4022, AND 4025 CASES  **
C               **  (NON-COLOR RASTER DEVICES).                     **
C               **  TO READ THE SCREEN,                             **
C               **  USE THE !XXX COMMAND                            **
C               **  REFERENCE--4027 OPERATOR'S MANUAL, PAGE B-3.    **
C               ******************************************************
C
C1200 CONTINUE
CCCCC WRITE(IGUNIT,1210)
C1210 FORMAT('!XXX;')
CCCCC GOTO9000
C1290 CONTINUE
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  THERE IS NO   READ SCREEN  INSTRUCTION PER SE.  **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO   READ SCREEN  INSTRUCTION PER SE.  **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE XX-X, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      ICSTR(1:1)=IESCC
C
      ICSTR(2:5)='*dkZ'
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(2:5)='*s4^'
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      READ(IRD,2311)IXCOOR,IYCOOR
 2311 FORMAT(I6,1X,I6)
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,2312)IXCOOR,IYCOOR
 2312   FORMAT('IXCOOR,IYCOOR = ',2I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      XCOOR=IXCOOR
      YCOOR=IYCOOR
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,2313)XCOOR,YCOOR,ANUMHP,ANUMVP
 2313   FORMAT('XCOOR,YCOOR,ANUMHP,ANUMVP = ',4E15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      PXCOOR=100.0*(XCOOR/ANUMHP)
      PYCOOR=100.0*(YCOOR/ANUMVP)
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,2314)PXCOOR,PYCOOR
 2314   FORMAT('PXCOOR,PYCOOR = ',2E15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      ICSTR(2:5)='*dlZ'
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT          CASES           **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:11)='READ SCREEN'
      NCSTR=11
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:4)='RESC'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  CGM DOES NOT SUPPORT THIS FEATURE                        **
C               ***************************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************************
C               **  STEP 34--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  BINARY CASE                                              **
C               **  CGM DOES NOT SUPPORT THIS FEATURE                        **
C               ***************************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO READ SCREEN--                                **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY          CASE                   **
C               ******************************************************
C
 4600 CONTINUE
CCCCC CALL WHERE(AX,AY,AFACT)
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QWIN CASE                   **
C               ******************************************************
C
 4700 CONTINUE
      WRITE(ICOUT,4711)
 4711 FORMAT(1X,'POSITION THE CURSUR VIA THE MOUSE TO THE DESIRED ')
      CALL DPWRST('XXX','BUG ')
      WRITE(ICOUT,4712)
 4712 FORMAT(1X,'LOCATION AND THEN PRESS ANY MOUSE BUTTON')
      CALL DPWRST('XXX','BUG ')
      IX=0
      IY=0
#ifdef HAVE_QWIN
      IRESLT=FOCUSQQ(99)
      MOUSEEVENT = MOUSE$RBUTTONDOWN .OR. MOUSE$LBUTTONDOWN
      IRESLT = WAITONMOUSEEVENT(MOUSEEVENT, KEYSTATE, IX, IY)
      PXCOOR=100.0*(REAL(IX)/ANUMHP)
      PYCOOR=100.0 - 100.0*(REAL(IY)/ANUMVP)
      IRESLT=FOCUSQQ(IPR)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  THERE IS NO   READ SCREEN  INSTRUCTION PER SE.  **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO READ THE SCREEN---                           **
C               **  WRITE OUT AN R(P)                               **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 158                            **
C               ******************************************************
C
 8100 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:3)='Pp'
      NCSTR=3
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:7)='R(P(T))'
      NCSTR=7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      READ(IRD,8111)IXCOOR,IYCOOR
 8111 FORMAT(1X,I3,1X,I3)
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,8112)IXCOOR,IYCOOR
 8112   FORMAT('IXCOOR,IYCOOR = ',2I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      XCOOR=IXCOOR
      YCOOR=IYCOOR
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,8113)XCOOR,YCOOR,ANUMHP,ANUMVP
 8113   FORMAT('XCOOR,YCOOR,ANUMHP,ANUMVP = ',4E15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      PXCOOR=100.0*(XCOOR/ANUMHP)
      PYCOOR=100.0*(YCOOR/ANUMVP)
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,8114)PXCOOR,PYCOOR
 8114   FORMAT('PXCOOR,PYCOOR = ',2E15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      ICSTR(1:1)=IESCC
CCCCC THE FOLLOWING LINE WAS FIXED (SOFT-CODE BACKSLASH) APRIL 1989
      ICSTR(2:2)=IBASLC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
      WRITE(ICOUT,9611)
 9611 FORMAT(1X,'POSITION THE CURSUR VIA THE MOUSE TO THE DESIRED ')
      CALL DPWRST('XXX','BUG ')
      WRITE(ICOUT,9612)
 9612 FORMAT(1X,'LOCATION AND THEN PRESS ANY MOUSE BUTTON')
      CALL DPWRST('XXX','BUG ')
      CALL XRDLOC(IXCOOR,IYCOOR,IXERR)
      IF(IXERR.NE.1)THEN
        XCOOR=IXCOOR
        YCOOR=IYCOOR
        PXCOOR=100.0*(XCOOR/ANUMHP)
        PYCOOR=100.0*(YCOOR/ANUMVP)
        PYCOOR=100.0-PYCOOR
      ELSE
        WRITE(ICOUT,9621)
 9621   FORMAT(1X,'WARNING: X11 WINDOW DESTROYED, NOTHING DONE')
        CALL DPWRST('XXX','BUG ')
        PXCOOR=0.
        PYCOOR=0.
      ENDIF
C
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCRESC(X,Y)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C  NOTE: READ SCREEN NOT CURRENTLY SUPPORTED.
C
13500 CONTINUE
      IF(IAQUOF.EQ.'OFF')GOTO9000
#ifdef HAVE_AQUA
      WRITE(ICOUT,13511)
13511 FORMAT(1X,'POSITION THE CURSUR VIA THE MOUSE TO THE DESIRED ')
      CALL DPWRST('XXX','BUG ')
      WRITE(ICOUT,13512)
13512 FORMAT(1X,'LOCATION AND THEN PRESS ANY MOUSE BUTTON')
      CALL DPWRST('XXX','BUG ')
      CALL AQRDLO(IXCOOR,IYCOOR,IERR)
      IF(IERR.GT.0)THEN
        WRITE(ICOUT,13521)
13521   FORMAT(1X,'WARNING: NO COORDINATES RETURNED FROM AQUA ',
     1         'MOUSE EVENT')
        CALL DPWRST('XXX','BUG ')
        PXCOOR=0.
        PYCOOR=0.
      ELSE
        XCOOR=REAL(IXCOOR)
        YCOOR=REAL(IYCOOR)
        PXCOOR=100.0*(XCOOR/ANUMHP)
        PYCOOR=100.0*(YCOOR/ANUMVP)
CCCCC   PYCOOR=100.0-PYCOOR
      ENDIF
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
C     SPECIFY THE SPECIFIC DEVICE AND WHETHER WE HAVE DEVICE 1, 2 OR 3.
C
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IF(IMODEL.EQ.'POST')IVAL1=2
      IF(IMODEL.EQ.'PDF')IVAL1=3
      IF(IMODEL.EQ.'SVG')IVAL1=4
      IF(IMODEL.EQ.'QUAR')IVAL1=5
      IF(IMODEL.EQ.'PNG')IVAL1=6
      IF(IMODEL.EQ.'WIND')IVAL1=7
      IF(IMODEL.EQ.'EPS')IVAL1=8
      IF(IVAL1.EQ.0)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17006)IMODEL
17006   FORMAT('***** ERROR: MODEL ',A4, ' IS NOT SUPPORTED FOR CAIRO.')
        CALL DPWRST('XXX','BUG ')
      ENDIF
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
C     READING SCREEN COORDINATES IS CURRENTLY ONLY SUPPORTED
C     FOR SCREEN DEVICES (CURRENLY ONLY X11 IS WORKING).
C
      IF(IVAL2.GT.1)THEN
        GOTO9000
      ELSEIF(IVAL1.NE.1)THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17082)
17082   FORMAT('****** ERROR IN CROSS HAIR COMMAND FOR CAIRO DEVICE')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,17084)
17084   FORMAT('       THE CROSS HAIR COMMAND IS CURRENTLY ONLY ',
     1         'SUPPORTED FOR THE X11 DEVICE.')
        CALL DPWRST('XXX','BUG ')
        GOTO9000
      ENDIF
C
      WRITE(ICOUT,17611)
17611 FORMAT(1X,'POSITION THE CURSUR VIA THE MOUSE TO THE DESIRED ')
      CALL DPWRST('XXX','BUG ')
      WRITE(ICOUT,17612)
17612 FORMAT(1X,'LOCATION AND THEN PRESS ANY MOUSE BUTTON')
      CALL DPWRST('XXX','BUG ')
      CALL CARDLO(IVAL2,IVAL1,IXCOOR,IYCOOR,IXERR)
      IF(IXERR.NE.1)THEN
        XCOOR=IXCOOR
        YCOOR=IYCOOR
        PXCOOR=100.0*(XCOOR/ANUMHP)
        PYCOOR=100.0*(YCOOR/ANUMVP)
        PYCOOR=100.0-PYCOOR
      ELSE
        WRITE(ICOUT,17621)
17621   FORMAT(1X,'***** ERROR TRYING TO READ MOUSE POSITION.')
        CALL DPWRST('XXX','BUG ')
        PXCOOR=0.
        PYCOOR=0.
      ENDIF
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RESC')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRRESC--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9015)NCSTR,IXCOOR,IYCOOR,PXCOOR,PYCOOR
 9015   FORMAT('NCSTR,IXCOOR,IYCOOR,PXCOOR,PYCOOR = ',3I8,2G15.7)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
        WRITE(ICOUT,9029)IBUGG4,ISUBG4,IERRG4
 9029   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRRIBE
C
C     PURPOSE--RING THE BELL OF A SPECIFIC GRAPHICS DEVICE,
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='RIBE'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RIBE')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRRIBE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)IMANUF,IMODEL,IBUGG4,IGUNIT
   53   FORMAT('IMANUF,IMODEL,IBUGG4,IGUNIT = ',3(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO9000
C
        IF(IMODEL.EQ.'4020')GOTO1200
        IF(IMODEL.EQ.'4022')GOTO1200
        IF(IMODEL.EQ.'4025')GOTO1200
        IF(IMODEL.EQ.'4027')GOTO1200
C
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ************************************************************
C               **  STEP 11--                                             **
C               **  TREAT THE TEKTRONIX 400X, 401X, 405X, AND 4114 CASES  **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES)      **
C               **  TO RING THE BELL,                                     **
C               **  WRITE OUT AN ESCAPE BEL                               **
C               ************************************************************
C
 1100 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=IBELC
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX 4020, 4022, AND 4025 CASES  **
C               **  (NON-COLOR RASTER DEVICES).                     **
C               **  TO RING THE BELL,                               **
C               **  USE THE !BEL COMMAND                            **
C               **  REFERENCE--4027 OPERATOR'S MANUAL, PAGE B-3.    **
C               ******************************************************
C
 1200 CONTINUE
      ICSTR(1:5)='!BEL;'
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  THERE IS NO   RING BELL   INSTRUCTION PER SE.   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO   RING BELL   INSTRUCTION PER SE.   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 3-12, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      ICSTR(1:1)=IBELC
      NCSTR=1
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE HEWLETT-PACKARD PCL (LASER JET) CASE      **
C               **  REFERENCE--                                         **
C               **     LASERJET SERIES II PRINTER, TECHNICAL REFERENCE  **
C               **             MANUAL, CHAPTERS 4, 5, 8                 **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:9)='RING BELL'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:4)='RIBE'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  UNSUPPORTED CGM FEATURE                                  **
C               ***************************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO RING BELL--                                  **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL IScreenBell(' ')
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      CALL WindowBell(' ')
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  THERE IS NO   RING BELL   INSTRUCTION PER SE.   **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               **  WRITTEN BY BILL ANDERSON                        **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO RING BELL--                                  **
C               **  WRITE OUT AN BEL                                  **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 44 AND 96                      **
C               ******************************************************
C
 8100 CONTINUE
      ICSTR(1:1)=IBELC
      NCSTR=1
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86                                         **
C               **  TREAT THE POSTSCRIPT  CASE                      **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 90--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  REFERENCE--QUIC PROGRAMMING MANUAL              **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCRIBE
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'RIBE')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRRIBE--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9012)IESCC,IBELC,NCSTR,IERG4
 9012   FORMAT('IESCC,IBELC,IERRG4 = ',2(A1,2X),I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSAGR(ICODE,ISTRI2,NCSTR2,CTEMP,NCTEMP)
C
C     PURPOSE--IMPLEMENT THE SAVE PLOT, REPEAT PLT, CYCLE PLOT
C              COMMANDS ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2899
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--97.8
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--AUGUST    1997.
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)---------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
      LOGICAL(4) MODESTATUS
      TYPE (windowconfig)   DPSCREEN
      TYPE (windowconfig)   DPSCREEN2
      TYPE (QWINFO)   WINFO
      TYPE (QWINFO)   WINFO2
      TYPE (FONTINFO) MSFONT
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
C
      LOGICAL IMSFLG
      CHARACTER*4 ICODE
      CHARACTER*256 ISTRI2
      CHARACTER*128 CTEMP
C
#ifdef HAVE_X11
      CHARACTER*1 IA
      CHARACTER*8 CJUNK
      DIMENSION IADE(128)
      DIMENSION IWIND(8)
      DIMENSION IADE2(128)
#endif
#ifdef HAVE_OPEN_GL
      CHARACTER*1 IA2
      CHARACTER*8 CJUNK2
      DIMENSION IADEZ(128)
      DIMENSION IWIND2(8)
      DIMENSION IADE22(128)
#endif
C
      CHARACTER*4 IMANUF
      CHARACTER*4 IMODEL
      CHARACTER*4 ISUBN0
      CHARACTER*4 IERROR
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOPM.INC'
      INCLUDE 'DPCOPC.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOP2.INC'
C
      DATA IMSFLG/.TRUE./
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SAGR'
      IERRG4='NO'
      IERROR='NO'
      CTEMP=' '
      NCTEMP=1
      IMANUF=IDMANU(1)
      IMODEL=IDMODE(1)
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SAGR')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSAGR--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,ICODE
   52   FORMAT('IMANUF,IMODEL,ICODE = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)NCSTR2,ISTRI2(1:MIN(80,NCSTR2))
   55   FORMAT('NCSTR2,ISTRI2(1:MIN(80,NCSTR2)) = ',I5,2X,80A1)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        GOTO2100
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      WRITE(ICOUT,1110)
 1110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR TEKTRONIX DEVICES.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD      CASE             **
C               ******************************************************
C
 2100 CONTINUE
      WRITE(ICOUT,2110)
 2110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR HP DEVICES.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT         CASE             **
C               ******************************************************
C
 2600 CONTINUE
      WRITE(ICOUT,2610)
 2610 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR LIBPLOT DEVICES.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      WRITE(ICOUT,3110)
 3110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1       'GRAPH COMMANDS NOT SUPPORTED FOR GENERAL DEVICES.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      WRITE(ICOUT,4110)
 4110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR CALCOMP DEVICES.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      WRITE(ICOUT,4610)
 4610 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR LAHEY DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
#ifdef HAVE_QWIN
      IF(ICODE.EQ.'SAVE')THEN
        IRESLT=FOCUSQQ(99)
        IRESLT=SETFONT('fh16w8b')
        MODESTATUS=GETFONTINFO(MSFONT)
        ICHRHT=MSFONT.PIXHEIGHT
        ICHRWD=MSFONT.PIXWIDTH
        IF(ICHRWD.EQ.0)ICHRWD=MSFONT.AVGWIDTH
        IF(ICHRWD.EQ.0)ICHRWD=ICHRHT/2
        IRESLT=GETWSIZEQQ(99,QWIN$SIZECURR,WINFO)
C
        NUMHPP=WINFO.W*ICHRWD
        IF(NUMHPP.LE.100)NUMHPP=100
        NUMVPP=WINFO.H*ICHRHT
        IF(NUMVPP.LE.100)NUMVPP=100
        ANUMHP=REAL(NUMHPP)
        ANUMVP=REAL(NUMVPP)
        IRESLT=SAVEIMAGE(ISTRI2,0,0,NUMHPP-1, NUMVPP-1)
      ELSEIF(ICODE.EQ.'CYCL')THEN
 4799   CONTINUE
        IERR=0
        IRESLT=FOCUSQQ(98)
        MOUSEEVENT = MOUSE$RBUTTONDOWN .OR. MOUSE$LBUTTONDOWN
        IRESLT = WAITONMOUSEEVENT(MOUSEEVENT, KEYSTATE, IX, IY)
        IF((MOUSE$KS_SHIFT.AND.KEYSTATE).EQ.MOUSE$KS_SHIFT)THEN
          GOTO9000
        ELSEIF((MOUSE$KS_CONTROL.AND.KEYSTATE).EQ.MOUSE$KS_CONTROL)THEN
          GOTO9000
        ELSEIF(IRESLT.EQ.MOUSE$KS_LBUTTON)THEN
          ICURPM=ICURPM-1
          IF(ICURPM.LT.1)ICURPM=1
        ELSEIF(IRESLT.EQ.MOUSE$KS_RBUTTON)THEN
          ICURPM=ICURPM+1
          IF(ICURPM.GT.NUMPXM)ICURPM=NUMPXM
        ELSEIF(IRESLT.EQ.MOUSE$BADEVENT)THEN
          GOTO9000
        ELSE
          GOTO9000
        ENDIF
C
        NCSTR2=1
        DO4705I=128,1,-1
          NCSTR2=I
          IF(IPXMFN(ICURPM)(I:I).NE.' ')GOTO4709
 4705   CONTINUE
 4709   CONTINUE
        CTEMP=' '
        IF(ICURPM.LE.9)THEN
          CTEMP(1:4)='  - '
          WRITE(CTEMP(1:1),'(I1)')ICURPM
          NCTEMP=4
        ELSEIF(ICURPM.LE.99)THEN
          CTEMP(1:5)='   - '
          WRITE(CTEMP(1:2),'(I2)')ICURPM
          NCTEMP=5
        ELSEIF(ICURPM.LE.999)THEN
          CTEMP(1:6)='    - '
          WRITE(CTEMP(1:3),'(I3)')ICURPM
          NCTEMP=6
        ENDIF
        NCHRS=80-NCTEMP
        NCTEMP=NCTEMP+1
        CTEMP(NCTEMP:80)=IPXMFN(ICURPM)(1:NCHRS)
        IF(IMSFLG)THEN
          DPSCREEN2=DPSCREEN
          WINFO2=WINFO
          WINFO2.Y=0
          DPSCREEN2.TITLE=CTEMP
          OPEN(UNIT=98,FILE='USER',TITLE=CTEMP,
     1       IOFOCUS=.TRUE.)
C
          MODESTATUS=SETWINDOWCONFIG(DPSCREEN2)
          IF(.NOT. MODESTATUS) MODESTATUS=SETWINDOWCONFIG(DPSCREEN2)
          ISTATUS=DISPLAYCURSOR($GCURSORON)
          MODESTATUS=GETWINDOWCONFIG(DPSCREEN2)
          IRESLT=GETWSIZEQQ(99,QWIN$SIZECURR,WINFO2)
C
          IRESLT=SETWSIZEQQ(98,WINFO2)
          IRESLT=GETWSIZEQQ(98,QWIN$SIZECURR,WINFO2)
C
          IRESLT=FOCUSQQ(98)
        ENDIF
        IRESLT=LOADIMAGE(IPXMFN(ICURPM),0,0)
        IMSFLG=.FALSE.
C
        GOTO4799
      ELSEIF(ICODE.EQ.'REST')THEN
        IF(IMSFLG)THEN
          DPSCREEN2=DPSCREEN
          WINFO2=WINFO
          WINFO2.Y=0
          DPSCREEN2.TITLE=CTEMP
          OPEN(UNIT=98,FILE='USER',TITLE=CTEMP,
     1       IOFOCUS=.TRUE.)
C
          MODESTATUS=SETWINDOWCONFIG(DPSCREEN2)
          IF(.NOT. MODESTATUS) MODESTATUS=SETWINDOWCONFIG(DPSCREEN2)
          ISTATUS=DISPLAYCURSOR($GCURSORON)
          MODESTATUS=GETWINDOWCONFIG(DPSCREEN2)
          IRESLT=GETWSIZEQQ(99,QWIN$SIZECURR,WINFO2)
C
          IRESLT=SETWSIZEQQ(98,WINFO2)
          IRESLT=GETWSIZEQQ(98,QWIN$SIZECURR,WINFO2)
C
          IRESLT=FOCUSQQ(98)
        ENDIF
        IRESLT=LOADIMAGE(ISTRI2,0,0)
CCCCC   IMSFLG=.FALSE.
      ENDIF
C
 4790 CONTINUE
      IRESLT=FOCUSQQ(IPR)
      IRESLT=DISPLAYCURSOR($GCURSORON)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
#ifdef HAVE_OPEN_GL
      IF(ICODE.EQ.'SAVE')THEN
        DO4820I=1,NCSTR2
          CALL DPCOAN(ISTRI2(I:I),IJUNK)
          IADEZ(I)=IJUNK
 4820   CONTINUE
        IADEZ(NCSTR2+1)=0
C
        IERR=0
        CALL GLSAVG(IADEZ,IERR)
        IF(IERR.EQ.1)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,4851)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 4851 FORMAT('***** ERROR IN DPSAPL--WRITING BIT MAP UNSUCCESSFUL.')
          ELSEIF(IERR.EQ.2)THEN
            WRITE(ICOUT,999)
            CALL DPWRST('XXX','BUG ')
            WRITE(ICOUT,4861)
            CALL DPWRST('XXX','BUG ')
            IERROR='YES'
            GOTO9000
 4861 FORMAT('***** ERROR IN DPSAPL--NO CURRENT PIXMAP TO SAVE.')
        ELSEIF(IERR.EQ.3)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,4871)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 4871 FORMAT('***** ERROR IN DPSAPL--OPEN-GL HAS NOT BEEN OPENED.')
        ELSEIF(IERR.EQ.4)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,4881)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 4881 FORMAT('***** ERROR IN DPSAPL--OPENGL NOT INSTALLED ON THIS ',
     1'IMPLEMENTATION.')
        ELSE
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,4891)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,4892)ISTRI2(1:NCSTR2)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ENDIF
 4891 FORMAT('***** CURRENT PIXMAP SUCCESSFULLY SAVED TO FILE ')
 4892 FORMAT('      ',A128)
C
      ELSEIF(ICODE.EQ.'REST')THEN
        DO19729I=1,8
          IWIND2(I)=-1
19729   CONTINUE
        ICOUNT=0
        IF(IX11W2.EQ.'        ')GOTO19739
        CJUNK2(1:8)=IX11W2(1:8)
        ICOUNT=0
        DO19730I=8,1,-1
          IA2=CJUNK2(I:I)
          IF(IA2.EQ.' ')GOTO19730
          ICOUNT=ICOUNT+1
          CALL DPCOAN(IA2,IVALUE)
          IF(IVALUE.GE.48.AND.IVALUE.LE.57)THEN
            IWIND2(ICOUNT)=IVALUE-48
          ELSEIF(IVALUE.GE.65.AND.IVALUE.LE.70)THEN
            IWIND2(ICOUNT)=IVALUE-55
          ELSEIF(IVALUE.GE.197.AND.IVALUE.LE.102)THEN
            IWIND2(ICOUNT)=IVALUE-87
          ELSE
            ICOUNT=1
            WRITE(ICOUT,19733)
            GOTO19739
          ENDIF
19730   CONTINUE
19733 FORMAT('***** WARNING--INVALID WINDOW ID FROM FRONT-END.  ',
     1'A SEPARATE GRAPHICS WINDOW WILL BE OPENED.')
19739   CONTINUE
        DO19715I=1,NCTEMP
          CALL DPCOAN(CTEMP(I:I),IADE22(I))
19715   CONTINUE
        DO19720I=1,NCSTR2
          CALL DPCOAN(ISTRI2(I:I),IADEZ(I))
          CALL DPCOAN(ISTRI2(I:I),IADE22(I+NCTEMP))
19720   CONTINUE
        IADEZ(NCSTR2+1)=0
        IADE22(NCSTR2+NCTEMP+1)=0
C
        IERR=0
        CALL GLRESG(IADEZ,IADE22,IWIND2,ICOUNT,IERR)
        IF(IERR.EQ.1)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19751)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
19751 FORMAT('***** ERROR IN DPREGR--READING BIT MAP UNSUCCESSFUL.')
        ELSEIF(IERR.EQ.2)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19761)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
19761 FORMAT('***** ERROR IN DPREGR--NO CURRENT PIXMAP TO SAVE.')
        ELSEIF(IERR.EQ.3)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19771)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
19771 FORMAT('***** ERROR IN DPREGR--OPEN-GL HAS NOT BEEN OPENED.')
        ELSEIF(IERR.EQ.4)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19781)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
19781 FORMAT('***** ERROR IN DPREGR--OPEN-GL NOT INSTALLED ON THIS ',
     1'IMPLEMENTATION.')
        ELSEIF(IERR.EQ.5)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19786)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
19786 FORMAT('***** ERROR IN DPREGR--UNABLE TO OPEN NEW OPEN-GL ',
     1       'WINDOW ')
        ELSE
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19791)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,19792)ISTRI2(1:NCSTR2)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
19791 FORMAT('***** CURRENT PIXMAP SUCCESSFULLY COPIED FROM FILE ')
19792 FORMAT('      ',A128)
        ENDIF
C
      ELSEIF(ICODE.EQ.'CYCL')THEN
14800   CONTINUE
        IERR=0
        CALL GLCYCL(IERR,IBUTTN)
        IF(IERR.EQ.4)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,14810)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ELSEIF(IERR.NE.0)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,14810)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ENDIF
14810 FORMAT('***** ERROR FROM DPCYGR: OPEN-GL NOT ACTIVE ON THIS ',
     1'IMPLEMENTATION.')
14811 FORMAT('***** ERROR FROM DPCYGR: ERROR TRYING TO REDRAW PIXMAP.')
        IF(IBUTTN.EQ.1)THEN
          ICURPM=ICURPM-1
          IF(ICURPM.LT.1)ICURPM=1
        ELSEIF(IBUTTN.EQ.3)THEN
          ICURPM=ICURPM+1
          IF(ICURPM.GT.NUMPXM)ICURPM=NUMPXM
        ELSE
          GOTO9000
        ENDIF
C
        NCSTR2=1
        DO24805I=128,1,-1
          NCSTR2=I
          IF(IPXMFN(ICURPM)(I:I).NE.' ')GOTO24809
24805   CONTINUE
24809   CONTINUE
        CTEMP=' '
        IF(ICURPM.LE.9)THEN
          CTEMP(1:4)='  - '
          WRITE(CTEMP(1:1),'(I1)')ICURPM
          NCTEMP=4
        ELSEIF(ICURPM.LE.248)THEN
          CTEMP(1:5)='   - '
          WRITE(CTEMP(1:2),'(I2)')ICURPM
          NCTEMP=5
        ELSEIF(ICURPM.LE.2489)THEN
          CTEMP(1:6)='    - '
          WRITE(CTEMP(1:3),'(I3)')ICURPM
          NCTEMP=6
        ENDIF
        DO24815I=1,NCTEMP
          CALL DPCOAN(CTEMP(I:I),IADE22(I))
24815 CONTINUE
        DO24820I=1,NCSTR2
          CALL DPCOAN(IPXMFN(ICURPM)(I:I),IADEZ(I))
          CALL DPCOAN(IPXMFN(ICURPM)(I:I),IADE22(I+NCTEMP))
24820 CONTINUE
        IADEZ(NCSTR2+1)=0
        IADE22(NCSTR2+NCTEMP+1)=0
        IERR=0
        DO24829I=1,8
          IWIND2(I)=-1
24829   CONTINUE
        ICOUNT=0
        IF(IX11W2.EQ.'        ')GOTO24839
        CJUNK2(1:8)=IX11W2(1:8)
        ICOUNT=0
        DO24830I=8,1,-1
          IA2=CJUNK2(I:I)
          IF(IA2.EQ.' ')GOTO24830
          ICOUNT=ICOUNT+1
          CALL DPCOAN(IA2,IVALUE)
          IF(IVALUE.GE.48.AND.IVALUE.LE.57)THEN
            IWIND2(ICOUNT)=IVALUE-48
          ELSEIF(IVALUE.GE.65.AND.IVALUE.LE.70)THEN
            IWIND2(ICOUNT)=IVALUE-55
          ELSEIF(IVALUE.GE.248.AND.IVALUE.LE.102)THEN
            IWIND2(ICOUNT)=IVALUE-87
          ELSE
            ICOUNT=1
            WRITE(ICOUT,24833)
            GOTO24839
          ENDIF
24830   CONTINUE
24833 FORMAT('***** WARNING--INVALID WINDOW ID FROM FRONT-END.  ',
     1'A SEPARATE GRAPHICS WINDOW WILL BE OPENED.')
24839   CONTINUE
        CALL GLRESG(IADEZ,IADE22,IWIND2,ICOUNT,IERR)
        IF(IERR.NE.0)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,14810)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ENDIF
C
        GOTO14800
      ENDIF
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      WRITE(ICOUT,4910)
 4910 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR LAHEY INTERACTOR DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      WRITE(ICOUT,4960)
 4960 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR LAHEY WINTERACTOR DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      WRITE(ICOUT,5110)
 5110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR ZETA DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 6600 CONTINUE
      WRITE(ICOUT,6610)
 6610 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR SUN DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS     CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8100 CONTINUE
      WRITE(ICOUT,8110)
 8110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR REGIS DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8600 CONTINUE
      WRITE(ICOUT,8610)
 8610 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR POSTSCRIPT DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC      CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9100 CONTINUE
      WRITE(ICOUT,9110)
 9110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR QUIC DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(ICODE.EQ.'SAVE')THEN
        DO9620I=1,NCSTR2
          CALL DPCOAN(ISTRI2(I:I),IJUNK)
          IADE(I)=IJUNK
 9620   CONTINUE
        IADE(NCSTR2+1)=0
C
        IERR=0
        CALL XSAVEG(IADE,IERR)
        IF(IERR.EQ.1)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9651)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9651 FORMAT('***** ERROR IN DPSAPL--WRITING BIT MAP UNSUCCESSFUL.')
          ELSEIF(IERR.EQ.2)THEN
            WRITE(ICOUT,999)
            CALL DPWRST('XXX','BUG ')
            WRITE(ICOUT,9661)
            CALL DPWRST('XXX','BUG ')
            IERROR='YES'
            GOTO9000
 9661 FORMAT('***** ERROR IN DPSAPL--NO CURRENT PIXMAP TO SAVE.')
        ELSEIF(IERR.EQ.3)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9671)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9671 FORMAT('***** ERROR IN DPSAPL--X11 HAS NOT BEEN OPENED.')
        ELSEIF(IERR.EQ.4)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9681)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9681 FORMAT('***** ERROR IN DPSAPL--X11 NOT INSTALLED ON THIS ',
     1'IMPLEMENTATION.')
        ELSE
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9691)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9692)ISTRI2(1:NCSTR2)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ENDIF
 9691 FORMAT('***** CURRENT PIXMAP SUCCESSFULLY SAVED TO FILE ')
 9692 FORMAT('      ',A128)
C
      ELSEIF(ICODE.EQ.'REST')THEN
        DO9729I=1,8
          IWIND(I)=-1
 9729   CONTINUE
        ICOUNT=0
        IF(IX11W2.EQ.'        ')GOTO9739
        CJUNK(1:8)=IX11W2(1:8)
        ICOUNT=0
        DO9730I=8,1,-1
          IA=CJUNK(I:I)
          IF(IA.EQ.' ')GOTO9730
          ICOUNT=ICOUNT+1
          CALL DPCOAN(IA,IVALUE)
          IF(IVALUE.GE.48.AND.IVALUE.LE.57)THEN
            IWIND(ICOUNT)=IVALUE-48
          ELSEIF(IVALUE.GE.65.AND.IVALUE.LE.70)THEN
            IWIND(ICOUNT)=IVALUE-55
          ELSEIF(IVALUE.GE.97.AND.IVALUE.LE.102)THEN
            IWIND(ICOUNT)=IVALUE-87
          ELSE
            ICOUNT=1
            WRITE(ICOUT,9733)
            GOTO9739
          ENDIF
 9730   CONTINUE
 9733 FORMAT('***** WARNING--INVALID WINDOW ID FROM FRONT-END.  ',
     1'A SEPARATE GRAPHICS WINDOW WILL BE OPENED.')
 9739   CONTINUE
        DO9715I=1,NCTEMP
          CALL DPCOAN(CTEMP(I:I),IADE2(I))
 9715   CONTINUE
        DO9720I=1,NCSTR2
          CALL DPCOAN(ISTRI2(I:I),IADE(I))
          CALL DPCOAN(ISTRI2(I:I),IADE2(I+NCTEMP))
 9720   CONTINUE
        IADE(NCSTR2+1)=0
        IADE2(NCSTR2+NCTEMP+1)=0
C
        IERR=0
        CALL XRESTG(IADE,IADE2,IWIND,ICOUNT,IERR)
        IF(IERR.EQ.1)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9751)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9751 FORMAT('***** ERROR IN DPREGR--READING BIT MAP UNSUCCESSFUL.')
        ELSEIF(IERR.EQ.2)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9761)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9761 FORMAT('***** ERROR IN DPREGR--NO CURRENT PIXMAP TO SAVE.')
        ELSEIF(IERR.EQ.3)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9771)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9771 FORMAT('***** ERROR IN DPREGR--X11 HAS NOT BEEN OPENED.')
        ELSEIF(IERR.EQ.4)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9781)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9781 FORMAT('***** ERROR IN DPREGR--X11 NOT INSTALLED ON THIS ',
     1'IMPLEMENTATION.')
        ELSEIF(IERR.EQ.5)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9786)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9786 FORMAT('***** ERROR IN DPREGR--UNABLE TO OPEN NEW X11 WINDOW ')
        ELSE
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9791)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9792)ISTRI2(1:NCSTR2)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
 9791 FORMAT('***** CURRENT PIXMAP SUCCESSFULLY COPIED FROM FILE ')
 9792 FORMAT('      ',A128)
        ENDIF
C
      ELSEIF(ICODE.EQ.'CYCL')THEN
 9800   CONTINUE
        IERR=0
        CALL XCYCLE(IERR,IBUTTN)
        IF(IERR.EQ.4)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9810)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ELSEIF(IERR.NE.0)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9810)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ENDIF
 9810 FORMAT('***** ERROR FROM DPCYGR: X11 NOT ACTIVE ON THIS ',
     1'IMPLEMENTATION.')
C9811 FORMAT('***** ERROR FROM DPCYGR: ERROR TRYING TO REDRAW PIXMAP.')
        IF(IBUTTN.EQ.1)THEN
          ICURPM=ICURPM-1
          IF(ICURPM.LT.1)ICURPM=1
        ELSEIF(IBUTTN.EQ.3)THEN
          ICURPM=ICURPM+1
          IF(ICURPM.GT.NUMPXM)ICURPM=NUMPXM
        ELSE
          GOTO9000
        ENDIF
C
        NCSTR2=1
        DO9905I=128,1,-1
          NCSTR2=I
          IF(IPXMFN(ICURPM)(I:I).NE.' ')GOTO9909
 9905   CONTINUE
 9909   CONTINUE
        CTEMP=' '
        IF(ICURPM.LE.9)THEN
          CTEMP(1:4)='  - '
          WRITE(CTEMP(1:1),'(I1)')ICURPM
          NCTEMP=4
        ELSEIF(ICURPM.LE.99)THEN
          CTEMP(1:5)='   - '
          WRITE(CTEMP(1:2),'(I2)')ICURPM
          NCTEMP=5
        ELSEIF(ICURPM.LE.999)THEN
          CTEMP(1:6)='    - '
          WRITE(CTEMP(1:3),'(I3)')ICURPM
          NCTEMP=6
        ENDIF
        DO9915I=1,NCTEMP
          CALL DPCOAN(CTEMP(I:I),IADE2(I))
 9915 CONTINUE
        DO9920I=1,NCSTR2
          CALL DPCOAN(IPXMFN(ICURPM)(I:I),IADE(I))
          CALL DPCOAN(IPXMFN(ICURPM)(I:I),IADE2(I+NCTEMP))
 9920 CONTINUE
        IADE(NCSTR2+1)=0
        IADE2(NCSTR2+NCTEMP+1)=0
        IERR=0
        DO9929I=1,8
          IWIND(I)=-1
 9929   CONTINUE
        ICOUNT=0
        IF(IX11W2.EQ.'        ')GOTO9939
        CJUNK(1:8)=IX11W2(1:8)
        ICOUNT=0
        DO9930I=8,1,-1
          IA=CJUNK(I:I)
          IF(IA.EQ.' ')GOTO9930
          ICOUNT=ICOUNT+1
          CALL DPCOAN(IA,IVALUE)
          IF(IVALUE.GE.48.AND.IVALUE.LE.57)THEN
            IWIND(ICOUNT)=IVALUE-48
          ELSEIF(IVALUE.GE.65.AND.IVALUE.LE.70)THEN
            IWIND(ICOUNT)=IVALUE-55
          ELSEIF(IVALUE.GE.99.AND.IVALUE.LE.102)THEN
            IWIND(ICOUNT)=IVALUE-87
          ELSE
            ICOUNT=1
            WRITE(ICOUT,9933)
            GOTO9939
          ENDIF
 9930   CONTINUE
 9933 FORMAT('***** WARNING--INVALID WINDOW ID FROM FRONT-END.  ',
     1'A SEPARATE GRAPHICS WINDOW WILL BE OPENED.')
 9939   CONTINUE
        CALL XRESTG(IADE,IADE2,IWIND,ICOUNT,IERR)
        IF(IERR.NE.0)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9810)
          CALL DPWRST('XXX','BUG ')
          IERROR='YES'
          GOTO9000
        ENDIF
C
        GOTO9800
      ENDIF
C
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  DONE VIA settextstyle in GRWRTH & GRWRTV   **
C               *************************************************
C
10000 CONTINUE
      WRITE(ICOUT,10110)
10110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR VGA DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      WRITE(ICOUT,11110)
11110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR GKS DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      WRITE(ICOUT,12110)
12110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR GD (=JPEG, PNG, WBMP) DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      WRITE(ICOUT,13110)
13110 FORMAT('***** ERROR - SAVE GRAPH, REPEAT GRAPH, AND CYLCE ',
     1'GRAPH COMMANDS NOT SUPPORTED FOR MACINTOSH DEVICE.')
      CALL DPWRST('XXXX','BUG')
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IERROR.EQ.'YES')IERRG4='YES'
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SAGR')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSAGR--')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSECA(ITYPE,ICASE,JCASE)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A CASE (UPPER
C              OR LOWER) ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
      CHARACTER*4 ITYPE
      CHARACTER*4 ICASE
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SECA'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SECA')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSECA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ITYPE,ICASE,IMANUF,IMODEL,IBUGG4
   52   FORMAT('ITYPE,ICASE,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        GOTO2100
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD CASES                 **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE PCL       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      WRITE(IGUNIT,3111)ICASE
 3111 FORMAT('SET CASE ',A4)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:5)='SECA '
      ICSTR(6:9)=ICASE
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM       CASE                        **
C               ******************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS     CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC      CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSECA(ICASE)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SECA')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSECA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IERRG4,JCASE
 9013   FORMAT('IERRG4,JCASE = ',A4,2X,I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSECO(ICASE,ICOL,JCOL)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A COLOR
C              ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --JULY     1990. SUPPORT COLOR FOR SOME HP-2622 DEVICES
C     UPDATED         --JANUARY  1991. SUPPORT COLOR ON REGIS (ALAN)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --APRIL    1992. FIX DEBUG CODE
C     UPDATED         --AUGUST   1992. POSTSCRIPT TO HANDLE FULL SET OF
C                                      COLORS (ALAN)
C     UPDATED         --MARCH    1993. POSTSCRIPT (HANDLE GRAY SCALE
C                                      DIFFERENTLY ON BLACK AND WHITE
C                                      AND COLOR DEVICES)
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --LATEK    2006. LATEX COLOR
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --MAY      2012. ADD SUPPORT FOR:
C                                         R0 - R255   - 1000 TO 1255
C                                         Z0 - Z255   - 2000 TO 2255
C                                         B0 - B255   - 3000 TO 3255
C                                      THIS ADDS SHADING TO PRIMRY COLORS
C                                      SIMILAR TO GRAY SCALE.  A BIT OF A
C                                      STOP GAP TO IMPLEMENTING FULL RGB
C                                      SUPPORT.
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C     UPDATED         --JULY     2020. CHECK FOR SUPPORTED COLOR FOR
C                                      GENERAL AND GENERAL CODED DEVICES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
#endif
C
      CHARACTER*4 ICASE
      CHARACTER*4 ICOL
      CHARACTER*1 ICOL2
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      INTEGER RD(8),GN(8),BE(8)
      INTEGER RED(8),GRN(8),BLE(8)
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
C
C  AUGUST 1992.  DEFINE COLORS FOR POSTSCRIPT (CGM SETS COLOR TABLE
C  IN GRINDE AND GRERSC).
C
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SECO'
      IERRG4='NO'
C
      NCSTR=(-999)
      JCOL2=0
      ICOL2=' '
      IUNIT=(-999)
      ITEN=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SECO')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSECO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ICASE,ICOL,IBUGG4
   52   FORMAT('ICASE,ICOL,IBUGG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IMANUF,IMODEL,IGUNIT
   54   FORMAT('IMANUF,IMODEL,IGUNIT = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C        ********************************************
C        **  STEP 1--                              **
C        **  BRANCH ACCORDING TO THE MANUFACTURER  **
C        **  AND THE MODEL                         **
C        ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4662')GOTO1100
C
        IF(IMODEL.EQ.'4027')GOTO1200
C
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4113')GOTO1300
C
        GOTO9000
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 11--                                       **
C        **  TREAT THE TEKTRONIX 4662                        **
C        **  (A PENPLOTTER).                                 **
C        **  REFERENCE--XXX                                  **
C        ******************************************************
C
 1100 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=4
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='ABP'
      IX=JCOL+48
      CALL DPCONA(IX,ICSTR(5:5))
      NCSTR=5
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        ******************************************************
C        **  STEP 12--                                       **
C        **  TREAT THE TEKTRONIX 4027                        **
C        **  (COLOR RASTER DEVICE).                          **
C        **  REFERENCE--XXX                                  **
C        ******************************************************
C
 1200 CONTINUE
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=1
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=2
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      IF(ICASE.EQ.'LINE' .OR. ICASE.EQ.'REGI' .OR.
     1   ICASE.EQ.'BACK' .OR. ICASE.EQ.'FORE' .OR.
     1   ICASE.EQ.'MARK')THEN
        ICSTR(1:6)='!COL C'
        IX=JCOL+48
        CALL DPCONA(IX,ICSTR(7:7))
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(ICASE.EQ.'TEXT')THEN
        ICSTR(1:6)='!ATT C'
        IX=JCOL+48
        CALL DPCONA(IX,ICSTR(7:7))
        NCSTR=7
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 13--                                       **
C        **  TREAT THE TEKTRONIX 4105                        **
C        **  (COLOR RASTER DEVICE).                          **
C        **  REFERENCE--PAGE 5-45 (LINE), 5-50 (TEXT),       **
C        **             5-32 (REGION)                        **
C        ******************************************************
C
 1300 CONTINUE
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=3
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=4
C
      IF(ICASE.EQ.'REGI' .OR. ICASE.EQ.'BACK')THEN
        IF(JCOL.EQ.0)JCOL2=48
        IF(JCOL.NE.0)JCOL2=JCOL+32
        CALL DPCONA(JCOL2,ICOL2)
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='MP'
        IX=JCOL+48
        CALL DPCONA(IX,ICSTR(4:4))
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(ICASE.EQ.'TEXT')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='MT'
        IX=JCOL+48
        CALL DPCONA(IX,ICSTR(4:4))
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='ML'
        IX=JCOL+48
        CALL DPCONA(IX,ICSTR(4:4))
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C
C
C        ******************************************************
C        **  STEP 21--                                       **
C        **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C        **  (MULTI-COLOR PENPLOTTER)                        **
C        **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C        **             OPERATING AND PROGRAMMING MANUAL,    **
C        **             PAGE 73.                             **
C        ******************************************************
C
 2100 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=4
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      JCOL2=JCOL+64
      CALL DPCONA(JCOL2,ICOL2)
      ICSTR(1:1)='v'
      ICSTR(2:2)=ICOL2
      ICSTR(3:3)='}'
      NCSTR=3
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        ******************************************************
C        **  STEP 22--                                       **
C        **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C        **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C        **  (MULTI-COLOR PENPLOTTERS)                       **
C        **  TO SET COLOR--                                  **
C        **  WRITE OUT A    SP     PEN NUMBER                **
C        **  (WITH A TRAILING SEMI-COLON WHICH IS THE        **
C        **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C        **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C        **             OPERATING AND PROGRAMMING MANUAL,    **
C        **             PAGE 61, 144.                        **
C        ******************************************************
C
 2200 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=4
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      ICSTR(1:2)='SP'
      IX=JCOL+48
      CALL DPCONA(IX,ICSTR(3:3))
      ICSTR(4:4)=';'
      NCSTR=4
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        **********************************************************
C        **  STEP 23--                                           **
C        **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C        **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C        **  (MONOCHROME DISPLAY TERMINALS)                      **
C        **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C        **             REFERENCE MANUAL,                        **
C        **             PAGE XX-X, XXX.                          **
C        **********************************************************
C
 2300 CONTINUE
      IF(IGCOLO.NE.'ON')GOTO9000
      IF(ICASE.EQ.'BACK')GOTO9000
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=1
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=2
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      ICSTR(1:1)=IESCC
      ICSTR(2:3)='*m'
      NCSTR=3
      NCHTOT=1
      CALL GRTRIN(JCOL,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='X'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        ******************************************************
C        **  STEP 26--                                       **
C        **  TREAT THE UNIX LIBPLOT CASE                     **
C        ******************************************************
C
 2600 CONTINUE
C
      IFACT=65535/255
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
        IVALR=IFACT*(JCOL - 1000)
        IVALG=0
        IVALB=0
      ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
        IVALR=0
        IVALG=IFACT*(JCOL - 2000)
        IVALB=0
      ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
        IVALR=0
        IVALG=0
        IVALB=IFACT*(JCOL - 3000)
      ELSE
        IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
        IVALR=IFACT*IRED(JCOL)
        IVALG=IFACT*IGREEN(JCOL)
        IVALB=IFACT*IBLUE(JCOL)
      ENDIF
      ITYPE=0
      IF(ICASE.EQ.'REGI')ITYPE=1
C
#ifdef HAVE_LIBPLOT
      CALL PLSECO(IVALR,IVALG,IVALB)
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 31--                                       **
C        **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C        ******************************************************
C
 3100 CONTINUE
C
C  NOTE: BACKGROUND COLOR SET WHEN ERASE SCREEN DONE.  SKIP HERE
      IF(ICASE.EQ.'BACK')GOTO9000
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)ICOL='RED'
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)ICOL='GREE'
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)ICOL='BLUE'
C
      IF(ICOL.EQ.'BLAC' .OR. ICOL.EQ.'WHIT' .OR. ICOL.EQ.'RED ' .OR.
     1   ICOL.EQ.'GREE' .OR. ICOL.EQ.'BLUE' .OR. ICOL.EQ.'CYAN' .OR.
     1   ICOL.EQ.'MAGE' .OR. ICOL.EQ.'YELL')THEN
        ICSTR(1:10)='SET COLOR '
        ICSTR(11:14)=ICASE
        ICSTR(15:16)='  '
        ICSTR(17:20)=ICOL
        NCSTR=20
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C        ***************************************************************
C        **  STEP 32--                                                **
C        **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C        ***************************************************************
C
 3200 CONTINUE
C  NOTE: BACKGROUND COLOR SET WHEN ERASE SCREEN DONE.  SKIP HERE
      IF(ICASE.EQ.'BACK')GOTO9000
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)ICOL='RED'
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)ICOL='GREE'
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)ICOL='BLUE'
C
      IF(ICOL.EQ.'BLAC' .OR. ICOL.EQ.'WHIT' .OR. ICOL.EQ.'RED ' .OR.
     1   ICOL.EQ.'GREE' .OR. ICOL.EQ.'BLUE' .OR. ICOL.EQ.'CYAN' .OR.
     1   ICOL.EQ.'MAGE' .OR. ICOL.EQ.'YELL')THEN
        ICSTR(1:5)='SECO '
        ICSTR(6:9)=ICASE
        ICSTR(10:10)=' '
        ICSTR(11:14)=ICOL
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 33--                                       **
C        **  TREAT THE CGM CASE                              **
C        ******************************************************
C
 3300 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=3
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=5
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=4
C
      IF(ICASE.EQ.'REGI')THEN
        ICSTR(1:9)='FILLCOLR '
        NCHTOT=2
        NCSTR=9
        CALL GRTRIN(JCOL,NCHTOT,ICSTR,NCSTR)
        ICSTR(12:12)=';'
        NCSTR=12
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(ICASE.EQ.'MARK' .OR. ICASE.EQ.'TEXT')THEN
        ICSTR(1:9)='TEXTCOLR '
        NCHTOT=2
        NCSTR=9
        CALL GRTRIN(JCOL,NCHTOT,ICSTR,NCSTR)
        ICSTR(12:12)=';'
        NCSTR=12
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(ICASE.EQ.'BACK')THEN
C       NOTE: BACKGROUND COLOR SET WHEN ERASE SCREEN DONE.  SKIP HERE
        CONTINUE
      ELSE
        ICSTR(1:9)='LINECOLR '
        NCHTOT=2
        NCSTR=9
        CALL GRTRIN(JCOL,NCHTOT,ICSTR,NCSTR)
        ICSTR(12:12)=';'
        NCSTR=12
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C        ***************************************************
C        **  STEP 34--                                    **
C        **  TREAT THE CGM (BINARY)                 CASE  **
C        ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 41--                                       **
C        **  TREAT THE CALCOMP XXXXXX CASE                   **
C        **  TO SET COLOR--                                  **
C        **  WRITE OUT AN XXXXXXXXXX                         **
C        **  (NOT DONE)                                      **
C        **  REFERENCE--XX                                   **
C        **             XX                                   **
C        **             PAGES XX AND XX                      **
C        **  USE CALCOMP LIBRARY ROUTINES                    **
C        ******************************************************
C
 4100 CONTINUE
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=4
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      IF(ICASE.EQ.'BACK' .OR. JCOL.EQ.ICALCC)GOTO9000
#ifdef HAVE_CALCOMP
      CALL NEWPEN(JCOL)
#endif
      ICALCC=JCOL
      GOTO9000
C
C        ******************************************************
C        **  STEP 46--                                       **
C        **  TREAT THE LAHEY   XXXXXX CASE                   **
C        **  REFERENCE--Programmer's Reference, Revision C   **
C        **             Lahey Computer Systems, January, 1992**
C        **             PAGES 51 THRU 65                     **
C        ******************************************************
C
 4600 CONTINUE
      IF(ICASE.EQ.'BACK')GOTO9000
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=4
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      IF(JCOL.NE.ILAHCC)THEN
#ifdef HAVE_LAHEY_CALCOMP
        CALL NEWPEN(JCOL)
#endif
        ILAHCC=JCOL
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 47--                                       **
C        **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C        **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C        ******************************************************
C
 4700 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
        IREDT=JCOL - 1000
        IGREET=0
        IBLUET=0
      ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
        IREDT=0
        IGREET=JCOL - 2000
        IBLUET=0
      ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
        IREDT=0
        IGREET=0
        IBLUET=JCOL - 3000
      ELSE
        IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
        IREDT=IRED(JCOL)
        IGREET=IGREEN(JCOL)
        IBLUET=IBLUE(JCOL)
      ENDIF
C
      IF(ICASE.EQ.'BACK')GOTO9000
#ifdef HAVE_QWIN
      IF(IQWNCL.EQ.'VGA')THEN
        ISTATUS=SETCOLOR(INT2(JCOL))
      ELSEIF(IQWNCL.EQ.'RGB')THEN
        IF(JCOL.GE.0)THEN
          JTEMP=RGBTOINTEGER(IREDT,IGREET,IBLUET)
          ISTATUS=SETCOLORRGB(JTEMP)
        ELSE
          AVAL=ABS(REAL(JCOL)/100.)*255.
          IVAL=INT(AVAL+0.5)
          IF(IVAL.LT.0)IVAL=0
          IF(IVAL.GT.255)IVAL=255
          JTEMP=IVAL
          JTEMP2=RGBTOINTEGER(JTEMP,JTEMP,JTEMP)
          ISTATUS=SETCOLORRGB(JTEMP2)
        ENDIF
      ELSE
        ISTATUS=SETCOLOR(INT2(JCOL))
      ENDIF
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 48--                                       **
C        **  TREAT THE OPEN-GL DRIVER                        **
C        **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C        ******************************************************
C
 4800 CONTINUE
C
      ATEMP=255.0
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
        ARED=REAL(JCOL - 1000)/ATEMP
        AGREEN=0.0
        ABLUE=0.0
      ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
        ARED=0.0
        AGREEN=REAL(JCOL - 2000)/ATEMP
        ABLUE=0.0
      ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
        ARED=0.0
        AGREEN=0.0
        ABLUE=REAL(JCOL - 3000)/ATEMP
      ELSE
        IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
        ARED=REAL(IRED(JCOL))/ATEMP
        AGREEN=REAL(IGREEN(JCOL))/ATEMP
        ABLUE=REAL(IBLUE(JCOL))/ATEMP
      ENDIF
C
      IF(ICASE.EQ.'BACK')GOTO9000
#ifdef HAVE_OPEN_GL
      CALL GLSECO(JCOL,ARED,AGREEN,ABLUE)
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 49--                                       **
C        **  TREAT THE LAHEY INTERACTOR CASE                 **
C        ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL IGrColourN(JCOL)
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 49B-                                       **
C        **  TREAT THE LAHEY WINTERACTOR CASE                **
C        ******************************************************
C
 4950 CONTINUE
      IF(ICASE.EQ.'BACK')GOTO9000
#ifdef HAVE_WINTERACTER
      IF(JCOL.LT.0)THEN
        AVAL=REAL(JCOL)/100.
        AVAL=ABS(AVAL)
        IF(AVAL.LE.0.0)AVAL=0.0
        IF(AVAL.GE.1.0)AVAL=1.0
        ITEMP=INT(255.*AVAL + 0.5)
        IJUNK=MAXCLR+1
        IF(IWINCL.EQ.'RGB')THEN
          CALL IGrPaletteRGB(IJUNK,ITEMP,ITEMP,ITEMP)
          CALL IGrColourN(IJUNK)
        ELSE
          CALL IGrColourN(2)
        ENDIF
      ELSE
        CALL IGrColourN(JCOL)
      ENDIF
#endif
      GOTO9000
C
C
C        ******************************************************
C        **  STEP 51--                                       **
C        **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C        **  TO SET COLOR--                                  **
C        **  WRITE OUT A    71 TO 74     OP CODE             **
C        **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C        **             MODELS 3600SX AND 3653SX             **
C        **             PAGES B-0 AND B-1                    **
C        **  USE CALCOMP LIBRARY ROUTINES                    **
C        ******************************************************
C
 5100 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=2
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=4
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      IF(ICASE.EQ.'BACK')GOTO9000
      IF(IZETCC.NE.JCOL)THEN
#ifdef HAVE_ZETA
        CALL NEWPEN(JCOL)
#endif
        IZETCC=JCOL
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 66--                                       **
C        **  TREAT THE SUN CASE                              **
C        ******************************************************
C
 6600 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=1
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=2
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=3
C
      IF(ICASE.EQ.'BACK')THEN
C       BLACK(I.E. 'DARK')
        RD(1) = 0
        GN(1) = 0
        BE(1) = 0
C       RED
        RD(2) = 244
        GN(2) = 9
        BE(2) = 6
C       GREEN
        RD(3) = 50
        GN(3) = 198
        BE(3) = 12
C       BLUE
        RD(4) = 120
        GN(4) = 215
        BE(4) = 247
C       YELLOW
        RD(5) = 254
        GN(5) = 241
        BE(5) = 108
C       ORANGE
C       RD(6) = 245
C       GN(6) = 176
C       BE(6) = 33
C       BLACK
        RD(6) = 0
        GN(6) = 0
        BE(6) = 0
C       PURPLE
        RD(7) = 189
        GN(7) = 102
        BE(7) = 249
C       WHITE
        RD(8) = 255
        GN(8) = 255
        BE(8) = 255
        RED(1) = RD(JCOL+1)
        GRN(1) = GN(JCOL+1)
        BLE(1) = BE(JCOL+1)
        DO 6605 I =2,8
           RED(I) = RD(I)
           GRN(I) = GN(I)
           BLE(I) = BE(I)
 6605   CONTINUE
#ifdef HAVE_SUN
        CALL cfcotable(0,RED,GRN,BLE,8)
#endif
      ELSEIF(ICASE.EQ.'REGI')THEN
#ifdef HAVE_SUN
        CALL cfflcolor(JCOL)
#endif
      ELSEIF(ICASE.EQ.'TEXT')THEN
#ifdef HAVE_SUN
        CALL cftextcolor(JCOL)
#endif
      ELSE
#ifdef HAVE_SUN
        CALL cflncolor(JCOL)
#endif
      ENDIF
C
      GOTO9000
C
C        ******************************************************
C        **  STEP 81--                                       **
C        **  TREAT THE REGIS CASE                            **
C        **  ADD SUPPORT FOR COLOR (JANUARY, 1991).  SPECIFY **
C        **  THE COLOR BY HLS VALUE.  THESE VALUES ARE STORED**
C        **  IN AN ARRAY.  REGIS SUPPORTS 64 HLS COLORS (AT  **
C        **  LEAST ON THE VT-240, DON'T KNOW IF MORE RECENT  **
C        **  MODELS SUPPORT MORE).  THESE 64 COLORS ARE      **
C        **  FIXED (I.E., CAN'T REDEFINE AVAILABLE COLORS).  **
C        **  NOTE THAT REGIS ALLOWS 4 COLOR MAP LOCATIONS TO **
C        **  BE DEFINED.  WE USE LOCATION 0 FOR THE          **
C        **  BACKGROUND COLOR AND LOCATIONS 1 THRU 3 FOR THE **
C        **  FOREGROUND COLOR.  THE M1 COMMAND DEFINES THE   **
C        **  COLOR AND COMMAND W(I1) SPECIFIES WHICH COLOR   **
C        **  MAP.                                            **
C        ******************************************************
C
 8100 CONTINUE
      IF(IGCOLO.NE.'ON')GOTO9000
      IF(ICASE.EQ.'BACK')GOTO9000
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=47
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=23
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=4
C
      DO8115I=1,IREGMC
        IF(JCOL.EQ.IREGPM(I))THEN
          IMAP=I
          GOTO8116
        END IF
 8115 CONTINUE
      IMAP=IREGMC
 8116 CONTINUE
      ICSTR(1:27)='S(M  (AH   L   S   ))W(I  )'
      NCHTOT=2
      NCSTR=3
      CALL GRTRIN(IMAP,NCHTOT,ICSTR,NCSTR)
      NCSTR=24
      CALL GRTRIN(IMAP,NCHTOT,ICSTR,NCSTR)
      NCHTOT=3
      ITEMP=IRGHUE(JCOL)
      NCSTR=8
      CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
      ITEMP=IRGLGT(JCOL)
      NCSTR=12
      CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
      ITEMP=IRGSAT(JCOL)
      NCSTR=16
      CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
      NCSTR=27
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        ******************************************************
C        **  STEP 86--                                       **
C        **  TREAT THE POSTSCRIPT CASE                       **
C        **  INDEX BY THE USER, THE OTHERS ONLY BY INDEX     **
C        ******************************************************
C
C  AUGUST 1992.  UPDATED TO HANDLE COLORS CONSISTENTLY WITH OTHER
C  DEVICES.  POSTSCRIPT ALLOWS RGB VALUES TO BE SET DIRECTLY.  USE
C  COLOR DEFINITIONS PROVIDED IN "XLIB PROGRAMMERS MANUAL" FROM
C  O'REILLY.  ALSO, SUPPORT GRAY SCALE FOR BOTH COLOR AND BLACK AND
C  WHITE POSTSCRIPT.
C
 8600 CONTINUE
C
CCCCC IF(IGCOLO.NE.'ON')GOTO9000
      IF(ICASE.EQ.'BACK')GOTO9000
CCCCC GOTO8610
C
C8610 CONTINUE
CCCCC IF(JCOL.EQ.0)ICSTR(1:26)='0.   0.   0.   setrgbcolor'
CCCCC IF(JCOL.EQ.1)ICSTR(1:26)='1.   0.   0.   setrgbcolor'
CCCCC IF(JCOL.EQ.2)ICSTR(1:26)='0.   1.   0.   setrgbcolor'
CCCCC IF(JCOL.EQ.3)ICSTR(1:26)='1.   1.   0.   setrgbcolor'
CCCCC IF(JCOL.EQ.4)ICSTR(1:26)='0.   0.   1.   setrgbcolor'
CCCCC IF(JCOL.EQ.5)ICSTR(1:26)='1.   0.   1.   setrgbcolor'
CCCCC IF(JCOL.EQ.6)ICSTR(1:26)='0.   1.   1.   setrgbcolor'
CCCCC IF(JCOL.EQ.7)ICSTR(1:26)='1.   1.   1.   setrgbcolor'
CCCCC IF(JCOL.EQ.8)ICSTR(1:26)='1.   0.5  0.   setrgbcolor'
CCCCC IF(JCOL.EQ.9)ICSTR(1:26)='0.5  1.   0.   setrgbcolor'
CCCCC IF(JCOL.EQ.10)ICSTR(1:26)='0.   1.   0.5  setrgbcolor'
CCCCC IF(JCOL.EQ.11)ICSTR(1:26)='0.   0.5  1.   setrgbcolor'
CCCCC IF(JCOL.EQ.12)ICSTR(1:26)='0.5  0.   1.   setrgbcolor'
CCCCC IF(JCOL.EQ.13)ICSTR(1:26)='1.   0.   0.5  setrgbcolor'
CCCCC IF(JCOL.EQ.14)ICSTR(1:26)='0.33 0.33 0.33 setrgbcolor'
CCCCC IF(JCOL.EQ.15)ICSTR(1:26)='0.66 0.66 0.66 setrgbcolor'
CCCCC NCSTR=26
CCCCC CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(JCOL.LT.0)THEN
CCCCC   MARCH 1993.  HANDLE BLACK AND WHITE DEVICES DIFFERENTLY THAN
CCCCC   COLOR DEVICES.
        IF(IGCOLO.EQ.'ON')THEN
          AVAL=REAL(JCOL)/100.
          AVAL=ABS(AVAL)
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.1.0)AVAL=1.0
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC   MARCH 1993.  ADD FOLLOWING SECTION.
        ELSE
          AVAL=REAL(JCOL)/100.
          AVAL=ABS(AVAL)
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.1.0)AVAL=1.0
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVAL,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+6
          ICSTR(NCSTR:NCSTR2)='setgray'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        END IF
      ELSE
CCCCC   MARCH 1993.  FOR BLACK AND WHITE DEVICES, BE SURE TO RESET
CCCCC   GRAY SCALE.
CCCCC   IF(IGCOLO.NE.'ON')GOTO9000
        IF(IGCOLO.EQ.'ON')THEN
C
          ATEMP=255.0
          IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
            AVALR=REAL(JCOL - 1000)/ATEMP
            AVALG=0.0
            AVALB=0.0
          ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
            AVALR=0.0
            AVALG=REAL(JCOL - 2000)/ATEMP
            AVALB=0.0
          ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
            AVALR=0.0
            AVALG=0.0
            AVALB=REAL(JCOL - 3000)/ATEMP
          ELSE
            IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
            AVALR=REAL(IRED(JCOL))/ATEMP
            AVALG=REAL(IGREEN(JCOL))/ATEMP
            AVALB=REAL(IBLUE(JCOL))/ATEMP
          ENDIF
C
          NCSTR=0
          NCHTOT=7
          NCHDEC=5
          CALL GRTRRE(AVALR,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVALG,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          CALL GRTRRE(AVALB,NCHTOT,NCHDEC,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=' '
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+10
          ICSTR(NCSTR:NCSTR2)='setrgbcolor'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
CCCCC     MARCH 1993.  ADD FOLLOWING SECTION.
        ELSE
          ICSTR(1:10)='0. setgray'
          NCSTR=10
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 91--                                       **
C        **  TREAT THE QUIC CASE                             **
C        ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 96--                                       **
C        **  TREAT THE X11     CASE                          **
C        ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=4
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=2
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=5
C
      IF(IX11OF.EQ.'OFF')GOTO9000
      CALL XFORE(JCOL)
#endif
      GOTO9000
C
C        *************************************************
C        **  STEP 100--                                 **
C        **  TREAT THE VGA VIA TURBO-C       CASE       **
C        **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C        **             ENHANCEMENTS, PAGE 122.         **
C        **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C        **             PAGE 309-310, 312-313.          **
C        *************************************************
C
10000 CONTINUE
C
      IF(ITCST.EQ.'CLOS')GOTO9000
CTURB CALL TCSECO(ICASE,ICOL)
      GOTO9000
C
C        ******************************************************
C        **  STEP 110--                                      **
C        **  TREAT THE GKS                DRIVER             **
C        ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C       ******************************************************
C       **  STEP 120--                                      **
C       **  TREAT THE GD                     DRIVER         **
C       **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C       **  1) JPEG                                         **
C       **  2) PNG                                          **
C       **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C       **  NOTE: COLOR PASSED TO DRAWING ROUTINES          **
C       ******************************************************
C
12000 CONTINUE
C
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)JCOL=3
      IF(JCOL.GE.2000 .AND. JCOL.LE.2999)JCOL=5
      IF(JCOL.GE.3000 .AND. JCOL.LE.3999)JCOL=4
C
#ifdef HAVE_GD
      CALL GDSECO(JCOL)
#endif
      GOTO9000
C
C         ******************************************************
C         **  STEP 130--                                      **
C         **  TREAT THE ABSOFT                 DRIVER         **
C         ******************************************************
C
13000 CONTINUE
C
      IFACT=1
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
        IR=IFACT*(JCOL - 1000)
        IG=0
        IB=0
      ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
        IR=0
        IG=IFACT*(JCOL - 2000)
        IB=0
      ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
        IR=0
        IG=0
        IB=IFACT*(JCOL - 3000)
      ELSE
        IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
        IR=IFACT*IRED(JCOL)
        IG=IFACT*IGREEN(JCOL)
        IB=IFACT*IBLUE(JCOL)
      ENDIF
C
      ITEMP=1
#ifdef HAVE_ABSOFT
      CALL SetMyColor(ITEMP,IR,IG,IB)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C  NOTE: COLOR CAN SET EITHER FROM COLOR MAP TABLE OR BY SETTING
C        RGB VALUES DIRECTLY.  FOR INITIAL IMPLEMENTATION, WE WILL
C        USE THE COLORMAP METHOD, BUT INCLUDE CODE DIRECT METHOD
C        IN CASE THAT PROVES MORE EFFECTIVE.
C
13500 CONTINUE
C
COLD  CALL aqtTakeColorFromColormapEntry(JCOL)
CCCCC AR=REAL(IRED(JCOL))/255.
CCCCC AG=REAL(IGREEN(JCOL))/255.
CCCCC AB=REAL(IBLUE(JCOL))/255.
CCCCC CALL aqtSetColor(AR,AG,AB)
#ifdef HAVE_AQUA
      CALL aqseco(JCOL)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      IF(ILATCO.EQ.'ON')THEN
        IF(JCOL.GE.1000 .AND. JCOL.LE.1999)ICOL='RED'
        IF(JCOL.GE.2000 .AND. JCOL.LE.2999)ICOL='GREE'
        IF(JCOL.GE.3000 .AND. JCOL.LE.3999)ICOL='BLUE'
        ICSTR(1:1)=IBASLC
        ICSTR(2:12)='color{    }'
        ICSTR(8:11)=ICOL(1:4)
        NCSTR=12
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        GOTO9000
      ENDIF
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SCALABLE VECTOR GRAPHICS       DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      ATEMP=255.0
      IF(JCOL.GE.1000 .AND. JCOL.LE.1999)THEN
        ARED=REAL(JCOL - 1000)/ATEMP
        AGREEN=0.0
        ABLUE=0.0
      ELSEIF(JCOL.GE.2000 .AND. JCOL.LE.2999)THEN
        ARED=0.0
        AGREEN=REAL(JCOL - 2000)/ATEMP
        ABLUE=0.0
      ELSEIF(JCOL.GE.3000 .AND. JCOL.LE.3999)THEN
        ARED=0.0
        AGREEN=0.0
        ABLUE=REAL(JCOL - 3000)/ATEMP
      ELSEIF(JCOL.LT.0 .AND. JCOL.GE.-100)THEN
        ARED=REAL(ABS(JCOL))/100.
        AGREEN=ARED
        ABLUE=ARED
      ELSE
        IF(JCOL.LT.1 .OR. JCOL.GT.MAXCLR)JCOL=1
        ARED=REAL(IRED(JCOL))/ATEMP
        AGREEN=REAL(IGREEN(JCOL))/ATEMP
        ABLUE=REAL(IBLUE(JCOL))/ATEMP
      ENDIF
C
      IF(ICASE.EQ.'BACK')GOTO9000
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
#ifdef HAVE_CAIRO
      CALL CASECO(IVAL2,ARED,AGREEN,ABLUE)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SECO')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSECO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)ICOL,ICOL2,JCOL,JCOL2
 9013   FORMAT('ICOL,ICOL2,JCOL,JCOL2 = ',2(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9017)IX,ITEN,IUNIT,NCSTR,IERRG4
 9017   FORMAT('IX,ITEN,IUNIT,NCSTR,IERRG4 = ',4I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEC2(ICASE,IRGBFL,ARED,ABLUE,AGREEN,AALPHA)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A COLOR
C              ON A SPECIFIC GRAPHICS DEVICE
C
C              GRSECO IS USED TO SET THE COLOR BASED ON THE X11 VERSION 4
C              COLOR MODEL.  THIS ROUTINE IS USED TO SPECIFY RGB COLORS.
C     WRITTEN BY--ALAN HECKERT
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--2020.10
C     ORIGINAL VERSION--OCTOBER  2020
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
#endif
C
      CHARACTER*4 ICASE
C
      CHARACTER*4 ISUBN0
      CHARACTER*130 ICSTR
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      INCLUDE 'DPCOST.INC'
C
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IREDT=0
      IGREENT=0
      IBLUET=0
      ISUBN0='SEC2'
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON' .OR. ISUBG4.EQ.'SEC2')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEC2--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ARED,ABLUE,AGREEN,AALPHA
   52   FORMAT('ARED,ABLUE,AGREEN,AALPHA = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IMANUF,IMODEL,IGUNIT
   54   FORMAT('IMANUF,IMODEL,IGUNIT = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      IF(IRGBFL.EQ.0)GOTO9000
C
C        ********************************************
C        **  STEP 1--                              **
C        **  BRANCH ACCORDING TO THE MANUFACTURER  **
C        **  AND THE MODEL                         **
C        ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        GOTO2100
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 11--                                       **
C        **  TREAT THE TEKTRONIX 4662                        **
C        **  (A PENPLOTTER).                                 **
C        **  REFERENCE--XXX                                  **
C        ******************************************************
C
C     NO SUPPORTED TEKTRONIX DEVICES SUPPORT FULL RGB COLORS
C
 1100 CONTINUE
      GOTO9000
C
C
C        ******************************************************
C        **  STEP 21--                                       **
C        **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C        **  (MULTI-COLOR PENPLOTTER)                        **
C        **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C        **             OPERATING AND PROGRAMMING MANUAL,    **
C        **             PAGE 73.                             **
C        ******************************************************
C
C     NO SUPPORTED HP DEVICES SUPPORT FULL RGB COLORS
C
 2100 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 26--                                       **
C        **  TREAT THE UNIX LIBPLOT CASE                     **
C        ******************************************************
C
 2600 CONTINUE
C
      AFACT=65535./REAL(IRGBMX)
      IVALR=INT(AFACT*ARED)
      IVALG=INT(AFACT*AGREEN)
      IVALB=INT(AFACT*ABLUE)
      IF(IVALR.GT.65535)IVALR=65535
      IF(IVALG.GT.65535)IVALG=65535
      IF(IVALB.GT.65535)IVALB=65535
C
#ifdef HAVE_LIBPLOT
      CALL PLSECO(IVALR,IVALG,IVALB)
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 31--                                       **
C        **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C        ******************************************************
C
 3100 CONTINUE
C
C  NOTE: BACKGROUND COLOR SET WHEN ERASE SCREEN DONE.  SKIP HERE
C
      IF(ICASE.EQ.'BACK')GOTO9000
      IRED=INT(ARED+0.1)
      IGREEN=INT(AGREEN+0.1)
      IBLUE=INT(ABLUE+0.1)
      ICSTR(1:14)='SET RGB COLOR '
      ICSTR(15:18)=ICASE
      ICSTR(19:19)='  '
      NCSTR=19
      NCHTOT=5
      CALL GRTRIN(IRED,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      CALL GRTRIN(IGREEN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      CALL GRTRIN(IBLUE,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        ***************************************************************
C        **  STEP 32--                                                **
C        **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C        ***************************************************************
C
 3200 CONTINUE
C
C  NOTE: BACKGROUND COLOR SET WHEN ERASE SCREEN DONE.  SKIP HERE
C
      IF(ICASE.EQ.'BACK')GOTO9000
      ICSTR(1:8)='SERGBCO '
      ICSTR(9:12)=ICASE
      ICSTR(13:13)=' '
      NCSTR=13
      NCHTOT=5
      CALL GRTRIN(IRED,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      CALL GRTRIN(IGREEN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=' '
      CALL GRTRIN(IBLUE,NCHTOT,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C        ******************************************************
C        **  STEP 33--                                       **
C        **  TREAT THE CGM CASE                              **
C        ******************************************************
C
 3300 CONTINUE
      GOTO9000
C
C        ***************************************************
C        **  STEP 34--                                    **
C        **  TREAT THE CGM (BINARY)                 CASE  **
C        ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 41--                                       **
C        **  TREAT THE CALCOMP XXXXXX CASE                   **
C        **  TO SET COLOR--                                  **
C        **  WRITE OUT AN XXXXXXXXXX                         **
C        **  (NOT DONE)                                      **
C        **  REFERENCE--XX                                   **
C        **             XX                                   **
C        **             PAGES XX AND XX                      **
C        **  USE CALCOMP LIBRARY ROUTINES                    **
C        ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 46--                                       **
C        **  TREAT THE LAHEY   XXXXXX CASE                   **
C        **  REFERENCE--Programmer's Reference, Revision C   **
C        **             Lahey Computer Systems, January, 1992**
C        **             PAGES 51 THRU 65                     **
C        ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 47--                                       **
C        **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C        **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C        ******************************************************
C
 4700 CONTINUE
      IF(ICASE.EQ.'BACK')GOTO9000
C
      AFACT=1.0
      IF(IRGBMX.NE.255)THEN
        AFACT=REAL(IRGBMX)/255.
      ENDIF
      AREDT=ARED/AFACT
      AGREENT=AGREEN/AFACT
      ABLUET=ABLUE/AFACT
      IREDT=INT(AREDT)
      IGREENT=INT(AGREENT)
      IBLUET=INT(ABLUET)
      IF(IREDT.GT.255)IREDT=255
      IF(IGREENT.GT.255)IGREENT=255
      IF(IBLUET.GT.255)IBLUET=255
C
#ifdef HAVE_QWIN
      IF(IQWNCL.EQ.'RGB')THEN
        JTEMP=RGBTOINTEGER(IREDT,IGREENT,IBLUET)
        ISTATUS=SETCOLORRGB(JTEMP)
      ENDIF
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 48--                                       **
C        **  TREAT THE OPEN-GL DRIVER                        **
C        **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C        ******************************************************
C
 4800 CONTINUE
C
      ATEMP=REAL(IRGBMX)
      AREDT=ARED/ATEMP
      AGREENT=AGREEN/ATEMP
      ABLUET=ABLUE/ATEMP
C
#ifdef HAVE_OPEN_GL
      CALL GLSECO(JCOL,ARED,AGREEN,ABLUE)
#endif
      GOTO9000
C
C        ******************************************************
C        **  STEP 49--                                       **
C        **  TREAT THE LAHEY INTERACTOR CASE                 **
C        ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 49B-                                       **
C        **  TREAT THE LAHEY WINTERACTOR CASE                **
C        ******************************************************
C
 4950 CONTINUE
      IF(ICASE.EQ.'BACK')GOTO9000
      GOTO9000
C
C
C        ******************************************************
C        **  STEP 51--                                       **
C        **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C        **  TO SET COLOR--                                  **
C        **  WRITE OUT A    71 TO 74     OP CODE             **
C        **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C        **             MODELS 3600SX AND 3653SX             **
C        **             PAGES B-0 AND B-1                    **
C        **  USE CALCOMP LIBRARY ROUTINES                    **
C        ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 66--                                       **
C        **  TREAT THE SUN CASE                              **
C        ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 81--                                       **
C        **  TREAT THE REGIS CASE                            **
C        **  ADD SUPPORT FOR COLOR (JANUARY, 1991).  SPECIFY **
C        **  THE COLOR BY HLS VALUE.  THESE VALUES ARE STORED**
C        **  IN AN ARRAY.  REGIS SUPPORTS 64 HLS COLORS (AT  **
C        **  LEAST ON THE VT-240, DON'T KNOW IF MORE RECENT  **
C        **  MODELS SUPPORT MORE).  THESE 64 COLORS ARE      **
C        **  FIXED (I.E., CAN'T REDEFINE AVAILABLE COLORS).  **
C        **  NOTE THAT REGIS ALLOWS 4 COLOR MAP LOCATIONS TO **
C        **  BE DEFINED.  WE USE LOCATION 0 FOR THE          **
C        **  BACKGROUND COLOR AND LOCATIONS 1 THRU 3 FOR THE **
C        **  FOREGROUND COLOR.  THE M1 COMMAND DEFINES THE   **
C        **  COLOR AND COMMAND W(I1) SPECIFIES WHICH COLOR   **
C        **  MAP.                                            **
C        ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 86--                                       **
C        **  TREAT THE POSTSCRIPT CASE                       **
C        **  INDEX BY THE USER, THE OTHERS ONLY BY INDEX     **
C        ******************************************************
C
 8600 CONTINUE
C
      IF(ICASE.EQ.'BACK')GOTO9000
      IF(IGCOLO.EQ.'ON')THEN
C
        ATEMP=REAL(IRGBMX)
        AVALR=ARED/ATEMP
        AVALG=AGREEN/ATEMP
        AVALB=ABLUE/ATEMP
        IF(AVALR.GT.1.0)AVALR=1.0
        IF(AVALR.LT.0.0)AVALR=0.0
        IF(AVALG.GT.1.0)AVALG=1.0
        IF(AVALG.LT.0.0)AVALG=0.0
        IF(AVALB.GT.1.0)AVALB=1.0
        IF(AVALB.LT.0.0)AVALB=0.0
C
        NCSTR=0
        NCHTOT=7
        NCHDEC=5
        CALL GRTRRE(AVALR,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRRE(AVALG,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRRE(AVALB,NCHTOT,NCHDEC,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+10
        ICSTR(NCSTR:NCSTR2)='setrgbcolor'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:10)='0. setgray'
        NCSTR=10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C        ******************************************************
C        **  STEP 91--                                       **
C        **  TREAT THE QUIC CASE                             **
C        ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 96--                                       **
C        **  TREAT THE X11     CASE                          **
C        ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C        *************************************************
C        **  STEP 100--                                 **
C        **  TREAT THE VGA VIA TURBO-C       CASE       **
C        **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C        **             ENHANCEMENTS, PAGE 122.         **
C        **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C        **             PAGE 309-310, 312-313.          **
C        *************************************************
C
10000 CONTINUE
      GOTO9000
C
C        ******************************************************
C        **  STEP 110--                                      **
C        **  TREAT THE GKS                DRIVER             **
C        ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C       ******************************************************
C       **  STEP 120--                                      **
C       **  TREAT THE GD                     DRIVER         **
C       **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C       **  1) JPEG                                         **
C       **  2) PNG                                          **
C       **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C       **  NOTE: COLOR PASSED TO DRAWING ROUTINES          **
C       ******************************************************
C
12000 CONTINUE
C
#ifdef HAVE_GD
      AFACT=1.0
      IF(IRGBMX.NE.255)THEN
        AFACT=REAL(IRGBMX)/255.
      ENDIF
      AREDT=ARED/AFACT
      AGREENT=AGREEN/AFACT
      ABLUET=ABLUE/AFACT
      IREDT=INT(AREDT)
      IGREENT=INT(AGREENT)
      IBLUET=INT(ABLUET)
      IF(IREDT.GT.255)IREDT=255
      IF(IGREENT.GT.255)IGREENT=255
      IF(IBLUET.GT.255)IBLUET=255
      CALL GDSEC2(IREDT,IGREENT,IBLUET,IRETCO)
#endif
      GOTO9000
C
C         ******************************************************
C         **  STEP 130--                                      **
C         **  TREAT THE ABSOFT                 DRIVER         **
C         ******************************************************
C
13000 CONTINUE
C
      AFACT=1.0
      IF(IRGBMX.NE.255)THEN
        AFACT=REAL(IRGBMX)/255.
      ENDIF
      AREDT=ARED/AFACT
      AGREENT=AGREEN/AFACT
      ABLUET=ABLUE/AFACT
      IREDT=INT(AREDT)
      IGREENT=INT(AGREENT)
      IBLUET=INT(ABLUET)
      IF(IREDT.GT.255)IREDT=255
      IF(IGREENT.GT.255)IGREENT=255
      IF(IBLUET.GT.255)IBLUET=255
      ITEMP=1
#ifdef HAVE_ABSOFT
      CALL SetMyColor(ITEMP,IREDT,IGREENT,IBLUET)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C  NOTE: COLOR CAN SET EITHER FROM COLOR MAP TABLE OR BY SETTING
C        RGB VALUES DIRECTLY.  FOR INITIAL IMPLEMENTATION, WE WILL
C        USE THE COLORMAP METHOD, BUT INCLUDE CODE DIRECT METHOD
C        IN CASE THAT PROVES MORE EFFECTIVE.
C
C        FOR "RGB COLOR" COMMANDS, NEED TO USE SETTING RGB COLOR
C        DIRECTLY.  NEED TO UPDATE "aqua.c" CODE FIRST TO SUPPORT
C        THIS.  WHEN DO THAT, CAN UPDATE CODE HERE.
C
13500 CONTINUE
C
COLD  CALL aqtTakeColorFromColormapEntry(JCOL)
CCCCC AR=REAL(IRED(JCOL))/255.
CCCCC AG=REAL(IGREEN(JCOL))/255.
CCCCC AB=REAL(IBLUE(JCOL))/255.
CCCCC CALL aqtSetColor(AR,AG,AB)
#ifdef HAVE_AQUA
CCCCC CALL aqseco(JCOL)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SCALABLE VECTOR GRAPHICS       DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      IF(ICASE.EQ.'BACK')GOTO9000
      ATEMP=REAL(IRGBMX)
      ARED=ARED/ATEMP
      AGREEN=AGREEN/ATEMP
      ABLUE=ABLUE/ATEMP
C
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
#ifdef HAVE_CAIRO
      CALL CASECO(IVAL2,ARED,AGREEN,ABLUE)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON' .OR. ISUBG4.EQ.'SEC2')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEC2--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)ICOL,ICOL2,JCOL,JCOL2
 9013   FORMAT('ICOL,ICOL2,JCOL,JCOL2 = ',2(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9017)IX,ITEN,IUNIT,NCSTR,IERRG4
 9017   FORMAT('IX,ITEN,IUNIT,NCSTR,IERRG4 = ',4I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,MIN(NCSTR,255)
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEDI(ICASE,IDIR,ANGLE,JDIR,ANGLE2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A DIRECTION
C              ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IDIR
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SEDI'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEDI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEDI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)ICASE,IDIR,JDIR,ANGLE,ANGLE2
   53   FORMAT('ICASE,IDIR,JDIR,ANGLE,ANGLE2 = ',2(A4,2X),I8,2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IMANUF,IMODEL,IBUGG4,IGUNIT
   55   FORMAT('IMANUF,IMODEL,IBUGG4,IGUNIT = ',3(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-19, XXX.                         **
C               **********************************************************
C
 2300 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:6)='*m1nZ'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT  CASE                    **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:14)='SET DIRECTION '
      ICSTR(15:18)=IDIR
      NCSTR=18
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:10)='SET ANGLE '
      NCSTR=10
      X=ANGLE
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(X,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:5)='SEDI '
      ICSTR(6:9)=IDIR
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:5)='SEAN '
      NCSTR=5
      X=ANGLE
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(X,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM CASE                              **
C               ******************************************************
C
 3300 CONTINUE
      IF(IDIR.EQ.'VERT')THEN
        IF(IJUSSW.EQ.'ON')THEN
          ICSTR(1:14)='TEXTPATH DOWN;'
          NCSTR=14
        ELSE
          ICSTR(1:15)='TEXTPATH RIGHT;'
          NCSTR=15
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:15)='TEXTPATH RIGHT;'
        NCSTR=15
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS CASE                            **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE                             **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11     CASE                          **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  DONE VIA settextstyle in GRWRTH & GRWRTV   **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSEDI(IDIR)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEDI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEDI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9017)ANGLE,X,NCHTOT,NCHDEC,NCSTR
 9017   FORMAT('ANGLE,X,NCHTOT,NCHDEC,NCSTR = ',2G15.7,3I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
        WRITE(ICOUT,9029)IBUGG4,ISUBG4,IERRG4
 9029   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEFI(ICASE,IFILLT,JFILLT)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A FILL
C              SPECIFICATION (ON/OFF) ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IFILLT
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SEFI'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEFI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEFI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ICASE,IFILLT,IMANUF,IMODEL,IBUGG4
   52   FORMAT('ICASE,IFILLT,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4027')GOTO1200
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        GOTO2100
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX (ALL NON-4027 DEVICES)      **
C               **  (A PENPLOTTER).                                 **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               **************************************************************
C               **  STEP 12--                                               **
C               **  TREAT THE TEKTRONIX 4027 CASE                           **
C               **  (COLOR RASTER DEVICES).                                 **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1200 CONTINUE
      IF(ICASE.EQ.'TEXT')THEN
        ICSTR(1:6)='!ATT C'
        IX=JFILLT+48
        CALL DPCONA(IX,ICSTR(7:7))
        ICSTR(8:8)=';'
        NCSTR=8
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HP CASES                              **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT  CASE                    **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
      ICSTR(1:9)='SET FILL '
      ICSTR(10:13)=IFILLT
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:5)='SEFI '
      ICSTR(6:9)=IFILLT
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM CASE                              **
C               ******************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO SET FILL--                                   **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS CASE                            **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE                             **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11     CASE                          **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSEFI(IFILLT)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEFI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEFI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IERRG4,IFILLT,JFILLT,IX,NCSTR
 9013   FORMAT('IERRG4,IFILLT,JFILLT,IX,NCSTR = ',2(A4,2X),3I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEFO(ICASE,IFONT,JFONT)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A FONT
C              ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
CWINT USE WINTERACTER
CINTE USE INTERACTER
      CHARACTER*4 ICASE
      CHARACTER*4 IFONT
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SEFO'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEFO')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEFO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)ICASE,IFONT,IMANUF,IMODEL,IBUGG4
   54   FORMAT('ICASE,IFONT,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE XX-X, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASE              **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
C     CHANGE JANUARY 1988.  ADDED "SET GENERAL FONT [ON/OFF]".
C     "OFF" IMPLIES DATAPLOT WILL DRAW A SOFTWARE FONT (I.E., MOVE AND
C     DRAW COMMANDS)
C     "ON" IMPLIES THAT THE POST PROCESSOR WILL MAP A DATAPLOT FONT
C     TO A POST PROCESSOR FONT AND THE POST-PROCESSOR WILL DRAW THE
C     STRING
C
C     "NULL" TELLS THE POST-PROCESSOR THAT DATAPLOT WILL DRAW THE STRING
C     AS LOW LEVEL MOVE AND DRAW COMMANDS.
C
      ICSTR(1:9)='SET FONT '
      ICSTR(10:13)=IFONT
      IF(IFNTSW.EQ.'OFF'.AND.IFONT.NE.'TEKT')ICSTR(10:13)='NULL'
      NCSTR=13
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
C     CHANGE JANUARY 1988.  ADDED "SET GENERAL FONT [ON/OFF]".
C     "OFF" IMPLIES DATAPLOT WILL DRAW A SOFTWARE FONT (I.E., MOVE AND
C     DRAW COMMANDS)
C     "ON" IMPLIES THAT THE POST PROCESSOR WILL MAP A DATAPLOT FONT
C     TO A POST PROCESSOR FONT AND THE POST-PROCESSOR WILL DRAW THE
C     STRING
C
C     "NULL" TELLS THE POST-PROCESSOR THAT DATAPLOT WILL DRAW THE STRING
C     AS LOW LEVEL MOVE AND DRAW COMMANDS.
C
      ICSTR(1:5)='SEFO '
      ICSTR(6:9)=IFONT
      IF(IFNTSW.EQ.'OFF'.AND.IFONT.NE.'TEKT')ICSTR(10:13)='NULL'
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM                                CASE        **
C               ***************************************************************
C
 3300 CONTINUE
C     CHANGE JANUARY 1988.  ADDED "SET GENERAL FONT [ON/OFF]".
C     "OFF" IMPLIES DATAPLOT WILL DRAW A SOFTWARE FONT (I.E., MOVE AND
C     DRAW COMMANDS), SO METAFILE SHOULD NOT SET TEXT FONT
C     "ON" IMPLIES THAT THE POST PROCESSOR WILL MAP A DATAPLOT FONT
C     TO A POST PROCESSOR FONT AND THE POST-PROCESSOR WILL DRAW THE
C     STRING
C
      IF(IFNTSW.EQ.'OFF')GOTO9000
      ICSTR(1:14)='TEXTFONTINDEX '
      NCSTR=14
      NCHTOT=2
      CALL GRTRIN(JFONT,NCHTOT,ICSTR,NCSTR)
      ICSTR(17:17)=';'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS     CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC      CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  DONE VIA settextstyle in GRWRTH & GRWRTV   **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSEFO(IFONT)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
COLD  CALL aqtSetFontname(IAQUFN)
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEFO')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEFO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IERRG4,IFONT,JFONT,NCSTR
 9013   FORMAT('IERRG4,IFONT,JFONT,NCSTR = ',2(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEJU(ICASE,IJUST,JJUST)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A JUSTIFICATION
C              ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. LATEK
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IJUST
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SEJU'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEJU')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEJU--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IBUGG4,ICASE,IJUST,IMANUF,IMODEL
   52   FORMAT('IBUGG4,ICASE,IJUST,IMANUF,IMODEL = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE XX-X, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT  CASE                    **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:18)='SET JUSTIFICATION '
      ICSTR(19:22)=IJUST
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:5)='SEJU '
      ICSTR(6:9)=IJUST
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE GENERAL CGM CASE                      **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 3300 CONTINUE
C
      IF(IJUSSW.EQ.'OFF')GOTO9000
C
      IF(IJUST.EQ.'LEFT')GOTO3310
      IF(IJUST.EQ.'CENT')GOTO3320
      IF(IJUST.EQ.'RIGH')GOTO3330
C
      IF(IJUST.EQ.'LJUS')GOTO3310
      IF(IJUST.EQ.'CJUS')GOTO3320
      IF(IJUST.EQ.'RJUS')GOTO3330
C
      IF(IJUST.EQ.'LEBO')GOTO3310
      IF(IJUST.EQ.'CEBO')GOTO3320
      IF(IJUST.EQ.'RIBO')GOTO3330
C
      IF(IJUST.EQ.'LECE')GOTO3340
      IF(IJUST.EQ.'CECE')GOTO3350
      IF(IJUST.EQ.'RICE')GOTO3360
C
      IF(IJUST.EQ.'LETO')GOTO3370
      IF(IJUST.EQ.'CETO')GOTO3380
      IF(IJUST.EQ.'RITO')GOTO3390
C
      GOTO3310
C
 3310 CONTINUE
      ICSTR(1:26)='TEXTALIGN LEFT,BOTTOM,0,0;'
      NCSTR=26
      GOTO3399
C
 3320 CONTINUE
      ICSTR(1:25)='TEXTALIGN CTR,BOTTOM,0,0;'
      NCSTR=25
      GOTO3399
C
 3330 CONTINUE
      ICSTR(1:27)='TEXTALIGN RIGHT,BOTTOM,0,0;'
      NCSTR=27
      GOTO3399
C
 3340 CONTINUE
      ICSTR(1:24)='TEXTALIGN LEFT,HALF,0,0;'
      NCSTR=24
      GOTO3399
C
 3350 CONTINUE
      ICSTR(1:23)='TEXTALIGN CTR,HALF,0,0;'
      NCSTR=23
      GOTO3399
C
 3360 CONTINUE
      ICSTR(1:25)='TEXTALIGN RIGHT,HALF,0,0;'
      NCSTR=25
      GOTO3399
C
 3370 CONTINUE
      ICSTR(1:23)='TEXTALIGN LEFT,TOP,0,0;'
      NCSTR=23
      GOTO3399
C
 3380 CONTINUE
      ICSTR(1:22)='TEXTALIGN CTR,TOP,0,0;'
      NCSTR=22
      GOTO3399
C
 3390 CONTINUE
      ICSTR(1:24)='TEXTALIGN RIGHT,TOP,0,0;'
      NCSTR=24
      GOTO3399
C
 3399 CONTINUE
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 6600 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS     CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC      CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11       CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  DONE VIA settextjustify in GRWRTH & GRWRTV **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSEJU(IJUST)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEJU')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEJU--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)JJUST,NCSTR,IERRG4
 9023   FORMAT('JJUST,NCSTR,IERRG4 = ',2I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.LE.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEMO(IGRASW,PDIAXC,PDIAYC)
C
C     PURPOSE--SET TERMINAL INTO GRAPHICS MODE OR TO DIAGLOGUE MODE
C              ON A SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989.  SUN (BY BILL ANDERSON)
C     UPDATED         --JANUARY  1989.  POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL    1989.  SOFT-CODE BACKSLASH FOR UNIX
C     UPDATED         --MARCH    1990.  X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 IGRASW
C
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
      CHARACTER*4 IC4
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SEMO'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEMO')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEMO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)IMANUF,IMODEL,IMODE2,IMODE3
   52   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)IGUNIT,IGBAUD,PDIAXC,PDIAYC
   53   FORMAT('IGUNIT,IGBAUD,PDIAXC,PDIAYC = ',2I8,2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IGCODE,ISOFT,ISOFT2,ISOFT3
   54   FORMAT('IGCODE,ISOFT,ISOFT2,ISOFT3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,59)IGRASW,IBUGG4,ISUBG4,IERRG4
   59   FORMAT('IGRASW,IBUGG4,ISUBG4,IERRG4 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3300
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4020')GOTO1100
        IF(IMODEL.EQ.'4022')GOTO1100
        IF(IMODEL.EQ.'4025')GOTO1100
        IF(IMODEL.EQ.'4027')GOTO1100
C
        IF(IMODEL.EQ.'4105')GOTO1200
        IF(IMODEL.EQ.'4107')GOTO1200
        IF(IMODEL.EQ.'4109')GOTO1200
        IF(IMODEL.EQ.'4115')GOTO1200
        IF(IMODEL.EQ.'4107')GOTO1200
        IF(IMODEL.EQ.'4113')GOTO1200
C
        GOTO9000
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE 4027 CASE--                           **
C               **  (A COLOR TERMINAL).                             **
C               **  EXCLAMATION POINT MON K  (PAGE XXX)             **
C               ******************************************************
C
C     CORRECTIONS PROVIDED BY MARIA ZIMMER
C     WRIGHT-PATTERSON AFB, OHIO   JANUARY 1985
C
 1100 CONTINUE
      IF(IGRASW.EQ.'ON')GOTO9000
      ICSTR(1:6)='!MON K'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX 4105 CASE                   **
C               **  (A COLOR DEVICE)                                **
C               **  1. ENABLE DIALOGUE AREA                         **
C               **     ESCAPE KA1   (PAGE 5-14)                     **
C               **  2. ERASE DIAGLOUE AREA (AND BUFFER)             **
C               **     ESCAPE LZ     (PAGE 5-8)                     **
C               **     THIS IS A PATCH SO THAT AFTER A PLOT IS FORME**
C               **     THE DIALGOU WILL NOT IMMEDIATELY APPEAR ATOP **
C               **     BETTER SOLUTION IS TO PLACE DIALOGUE CURSOR A**
C               **     TOP OF SCREEN BUT PROBABLY CANNOT DO IT      **
C               **     ON 4105                                      **
C               **     NET EFFECT IS THAT WHENEVER DIALOGUEMODE IS  **
C               **     ENTERED, THE DIAGOGUE BUFFER WILL BE ERASED. **
C               **  3. MAKE DIALOGUE AREA VISIBLE                   **
C               **     ESCAPE LV1      (PAGE 5-39)                  **
C               ** 11. DISABLE DIALOGUE AREA                        **
C               **     ESCAPE KA0   (PAGE 5-14)                     **
C               ** 12. MAKE DIALOGUE AREA INVISIBLE                 **
C               **     ESCAPE LV0      (PAGE 5-39)                  **
C               ******************************************************
C
 1200 CONTINUE
      IF(IGRASW.EQ.'OFF')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:4)='KA1'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C       THE FOLLOWING 3-LINE 4105 ETC. PATCH WAS ENTERED AUGUST 25, 1986
        ICSTR(1:1)=IUSC
        NCSTR=1
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='LZ'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:1)=IESCC
        ICSTR(2:4)='LV1'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:1)=IESCC
        ICSTR(2:4)='KA0'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:1)=IESCC
        ICSTR(2:4)='LV0'
        NCSTR=4
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  THERE IS NO   SET MODE    INSTRUCTION PER SE.   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  THERE IS NO   SET MODE    INSTRUCTION PER SE.   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-4, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      IF(IGRASW.EQ.'OFF')THEN
        ICSTR(1:1)=IESCC
        ICSTR(2:5)='*deZ'
        NCSTR=5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:1)=IESCC
        ICSTR(2:5)='*dcZ'
        NCSTR=5
      ENDIF
C
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT  CASE                        **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      IF(IGRASW.EQ.'OFF')THEN
        ICSTR(1:19)='ENTER DIALOGUE MODE'
        NCSTR=19
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:19)='ENTER GRAPHICS MODE'
        NCSTR=19
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      IF(IGRASW.EQ.'OFF')THEN
        ICSTR(1:5)='SEMO '
        ICSTR(6:9)='DIAL'
        NCSTR=9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:5)='SEMO '
        ICSTR(6:9)='GRAP'
        NCSTR=9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CGM   GENERAL (DEVICE-INDEPENDENT) CASE        **
C               **  CGM DOES NOT SUPPORT THIS FEATURE                        **
C               ***************************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO SET MODE--                                   **
C               **  OFFLINE DEVICE, NULL ROUTINE                    **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  THERE IS NO   SET MODE    INSTRUCTION PER SE.   **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - NULL ROUTINE               **
C               ******************************************************
C
 6600 CONTINUE
      GOTO 9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO GO INTO ALPHA    MODE---                     **
C               **  WRITE OUT AN ESC BACKSLASH                      **
C               **  TO GO INTO GRAPHICS MODE---                     **
C               **  WRITE OUT AN ESC P p                            **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 96                             **
C               ******************************************************
C
 8100 CONTINUE
      IF(IGRASW.EQ.'OFF')THEN
        ICSTR(1:1)=IESCC
CCCCC   THE FOLLOWING LINE WAS FIXED (SOFT-CODE BACKSLASH) APRIL 1989
        ICSTR(2:2)=IBASLC
        NCSTR=2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='Pp'
        NCSTR=3
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 95--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               *************************************************
C
10000 CONTINUE
      IC4='DIAL'
      IF(IGRASW.EQ.'ON')IC4='GRAP'
CTURB CALL TCSEMO(IC4)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (EEPIC)                  DRIVER **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEMO')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEMO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)NCSTR,IERRG4
 9023   FORMAT('NCSTR,IERRG4 = ',I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEPA(ICASE,IPATTT,PXSPA,PYSPA,
     1JPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA,PXSPA2,PYSPA2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A PATTERN
C              ON A SPECIFIC GRAPHICS DEVICE
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2899
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY   1989. SUN (BY BILL ANDERSON)
C                                       DRIVER OBSOLETE
C     UPDATED         --JANUARY   1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH     1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY       1991. ISUBNO TO ISUBN0 (JJF)
C     UPDATED         --MAY       1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY       1991. VGA/TURBOC DRIVER (JJF)
C                                       DRIVER OBSOLETE
C     UPDATED         --JULY      1996. LAHEY DRIVER (ALAN HECKERT)
C                                       OLD STYLE CALCOMP
C                                       DRIVER OBSOLETE
C     UPDATED         --OCTOBER   1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER   1996. OPENGL DRIVER (ALAN)
C                                       USE BILL MITCHELLS OPENGL
C                                       BINDING FOR FORTRAN
C     UPDATED         --OCTOBER   1996. GKS (ALAN)
C                                       CODED, NOT TESTED
C     UPDATED         --OCTOBER   1996. BINARY CGM (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996. DISPLAY POSTSCRIPT (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996. BLANK PATTERN (JPATTT=-1) ON
C                                       SOME DEVICES
C     UPDATED         --OCTOBER   1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY      1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE      2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE      2000. MACINTOSH
C                                       PLACEHOLDER FOR NOW
C                     --MARCH     2002. CHANGE TO QUARTZ (NEW MAC GRAPHICS
C                                       LIBRARY)
C     UPDATED         --JUNE      2000. PC PRINTER
C                                       PLACEHOLDER FOR NOW
C                     --MARCH     2002. CHANGE TO GHOSTSCRIPT
C     UPDATED         --MARCH     2002. LATEX (USING EEPIC)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --MARCH     2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --SEPTEMBER 2007. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
      INTEGER(2) STYLE
#endif
C
      CHARACTER*4 ICASE
      CHARACTER*4 IPATTT
      CHARACTER*4 IHORPA
      CHARACTER*4 IVERPA
      CHARACTER*4 IDUPPA
      CHARACTER*4 IDDOPA
      CHARACTER*1 IPATTZ
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
      DIMENSION ARRCAL(10)
      DIMENSION XPATT(8)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SEPA'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEPA')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSEPA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)ICASE,IPATTT,JPATTT
   53   FORMAT('ICASE,IPATTT,JPATTT = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)PXSPA,PYSPA,PXSPA2,PYSPA2
   54   FORMAT('PXSPA,PYSPA,PXSPA2,PYSPA2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)IHORPA,IVERPA,IDUPPA,IDDOPA
   55   FORMAT('IHORPA,IVERPA,IDUPPA,IDDOPA = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,58)IMANUF,IMODEL,IBUGG4,ISUBG4
   58   FORMAT('IMANUF,IMODEL,IBUGG4,ISUBG4 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4006')GOTO1400
        IF(IMODEL.EQ.'4010')GOTO1400
C
        IF(IMODEL.EQ.'4020')GOTO1200
        IF(IMODEL.EQ.'4022')GOTO1200
        IF(IMODEL.EQ.'4025')GOTO1200
        IF(IMODEL.EQ.'4027')GOTO1200
C
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4113')GOTO1300
C
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               *******************************************
C               **  STEP 11--                            **
C               **  TREAT THE TEKTRONIX 4014             **
C               **  REFERENCE--40Z105 MANUAL, PAGE 5-52  **
C               *******************************************
C
 1100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
CCCCC   ADD FOLLOWING LINE OCTOBER 1996
        IF(JPATTT.EQ.-1)GOTO9000
        CALL DPCONA(JPATTT,IPATTZ)
        ICSTR(1:1)=IESCC
        ICSTR(2:2)=IPATTZ
        NCSTR=2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               **************************************************************
C               **  STEP 12--                                               **
C               **  TREAT THE TEKTRONIX 4027                                **
C               **  (COLOR RASTER DEVICE).                                  **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1200 CONTINUE
C
      IF(ICASE.EQ.'LINE')THEN
        IF(JPATTT.EQ.-1)GOTO9000
        ICSTR(1:5)='!LIN '
        NCSTR=5
        NCHTOT=8
        CALL GRTRIN(JPATTT,NCHTOT,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               **************************************************************
C               **  STEP 13--                                               **
C               **  TREAT THE TEKTRONIX 4105                                **
C               **  (COLOR RASTER DEVICE).                                  **
C               **  REFERENCE--XXX                                          **
C               **************************************************************
C
 1300 CONTINUE
C
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(JPATTT.EQ.-1)GOTO9000
        CALL DPCONA(JPATTT,IPATTZ)
        ICSTR(1:1)=IESCC
        ICSTR(2:2)=IPATTZ
        NCSTR=2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 14--                                           **
C               **  TREAT THE TEKTRONIX 4010 AND 4006                   **
C               **  (THEY HAVE ONLY SOLID LINES AND INCOMPLETE PLOT-10  **
C               **  REFERENCE--XXX                                      **
C               ***********************************************************
C
 1400 CONTINUE
CCCCC ADD FOLLOWING LINE OCTOBER 1996
      IF(JPATTT.EQ.-1)GOTO9000
      GOTO9000
C
C               ****************************************************
C               **  STEP 21--                                     **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE           **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER          **
C               **             OPERATING AND PROGRAMMING MANUAL,  **
C               **             PAGE 258 AND 152.                  **
C               ****************************************************
C
 2100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(IPATTT.EQ.'BLAN' .OR. IPATTT.EQ.'BL  ' .OR.
     1     IPATTT.EQ.'NONE' .OR. IPATTT.EQ.'NO  ' .OR.
     1     IPATTT.EQ.'    ')THEN
          ICSTR(1:9)='~Q @ @cH}'
          NCSTR=9
        ELSEIF(IPATTT.EQ.'SOLI' .OR. IPATTT.EQ.'SO  ')THEN
          ICSTR(1:3)='~Q}'
          NCSTR=3
        ELSEIF(IPATTT.EQ.'DOTT' .OR. IPATTT.EQ.'DOT ' .OR.
     1         IPATTT.EQ.'DO  ')THEN
          ICSTR(1:13)='~Q!A!A!A!Aa@}'
          NCSTR=13
        ELSEIF(IPATTT.EQ.'DASH' .OR. IPATTT.EQ.'DA  ')THEN
          ICSTR(1:9)='~Q"A"Aa@}'
          NCSTR=9
        ELSEIF(IPATTT.EQ.'DA1 ')THEN
          ICSTR(1:7)='~Q$Ba@}'
          NCSTR=7
        ELSEIF(IPATTT.EQ.'DA2 ')THEN
          ICSTR(1:9)='~Q#A!Aa@}'
          NCSTR=9
        ELSEIF(IPATTT.EQ.'DA3 ')THEN
          ICSTR(1:9)='~Q#A!Aa@}'
          NCSTR=9
        ELSEIF(IPATTT.EQ.'DA4 ')THEN
          ICSTR(1:9)='~Q#A!Aa@}'
          NCSTR=9
        ELSE
          ICSTR(1:3)='~Q}'
          NCSTR=3
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO SET PATTERN--                                **
C               **  WRITE OUT A    LT     PATTERN NUMBER            **
C               **  (WITH A TRAILING SEMI-COLON WHICH IS THE        **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 100, 141.                       **
C               ******************************************************
C
 2200 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        ICSTR(1:2)='LT'
        IF(JPATTT.GE.0)THEN
          NCSTR=2
          NCHTOT=1
          CALL GRTRIN(JPATTT,NCHTOT,ICSTR,NCSTR)
          ICSTR(4:4)=';'
          NCSTR=4
        ELSE
          ICSTR(3:3)=';'
          NCSTR=3
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-6, 10-7.                         **
C               **********************************************************
C
 2300 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        ICSTR(1:1)=IESCC
        ICSTR(2:3)='*m'
        NCSTR=3
        NCHTOT=1
        IF(JPATTT.GT.9)NCHTOT=2
        CALL GRTRIN(JPATTT,NCHTOT,ICSTR,NCSTR)
        NCSTRT=NCSTR+1
        NCEND=NCSTR+2
        ICSTR(NCSTRT:NCEND)='bZ'
        NCSTR=NCEND
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASES             **
C               **********************************************************
C
 2600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
C
C       FOR LINE, SET LINE PATTERN (AND ALSO SET CAP STYLE AND JOIN STYLE)
C
#ifdef HAVE_LIBPLOT
        INDEX=2
        ICODE=0
        AVAL=0.0
        IF(IPATTT.EQ.'SOLI')ICODE=0
        IF(IPATTT.EQ.'SO  ')ICODE=0
        IF(IPATTT.EQ.'DASH')ICODE=1
        IF(IPATTT.EQ.'DA  ')ICODE=1
        IF(IPATTT.EQ.'DOTT')ICODE=2
        IF(IPATTT.EQ.'DA2 ')ICODE=3
        IF(IPATTT.EQ.'DA3 ')ICODE=4
        IF(IPATTT.EQ.'DA4 ')ICODE=5
        IF(IPATTT.EQ.'DA5 ')ICODE=6
        CALL PLLATR(INDEX,ICODE,DBLE(AVAL))
        INDEX=3
        ICODE=0
        IF(ILPLCS.EQ.'BUTT')ICODE=0
        IF(ILPLCS.EQ.'ROUN')ICODE=1
        IF(ILPLCS.EQ.'PROJ')ICODE=2
        CALL PLLATR(INDEX,ICODE,DBLE(AVAL))
        INDEX=4
        ICODE=0
        IF(ILPLJS.EQ.'MITE')ICODE=0
        IF(ILPLJS.EQ.'ROUN')ICODE=1
        IF(ILPLJS.EQ.'BEVE')ICODE=2
        CALL PLLATR(INDEX,ICODE,DBLE(AVAL))
#endif
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
      IF(ICASE.EQ.'LINE')THEN
        ICSTR(1:17)='SET PATTERN LINE '
        ICSTR(18:21)=IPATTT
        NCSTR=21
      ELSEIF(ICASE.EQ.'REGI')THEN
        ICSTR(1:19)='SET PATTERN REGION '
        ICSTR(20:24)=IPATTT
        NCSTR=24
      ELSEIF(ICASE.EQ.'MARK')THEN
        ICSTR(1:19)='SET PATTERN MARKER '
        ICSTR(20:24)=IPATTT
        NCSTR=24
      ELSEIF(ICASE.EQ.'TEXT')THEN
        ICSTR(1:17)='SET PATTERN TEXT '
        ICSTR(18:21)=IPATTT
        NCSTR=21
      ELSE
        GOTO9000
      ENDIF
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      IF(ICASE.EQ.'LINE')THEN
        ICSTR(1:10)='SEPA LINE '
        ICSTR(11:14)=IPATTT
        NCSTR=14
      ELSEIF(ICASE.EQ.'REGI')THEN
        ICSTR(1:10)='SEPA REGI '
        ICSTR(11:14)=IPATTT
        NCSTR=14
      ELSEIF(ICASE.EQ.'MARK')THEN
        ICSTR(1:10)='SEPA MARK '
        ICSTR(11:14)=IPATTT
        NCSTR=14
      ELSEIF(ICASE.EQ.'TEXT')THEN
        ICSTR(1:10)='SEPA TEXT '
        ICSTR(11:14)=IPATTT
        NCSTR=14
      ELSE
        GOTO9000
      ENDIF
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM                                CASE        **
C               ***************************************************************
C
 3300 CONTINUE
      IF(ICASE.EQ.'LINE')THEN
        ICSTR(1:9)='LINETYPE '
        NCHTOT=1
        NCSTR=9
        CALL GRTRIN(JPATTT,NCHTOT,ICSTR,NCSTR)
        ICSTR(11:11)=';'
        NCSTR=11
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSEIF(ICASE.EQ.'REGI')THEN
        IF(IPATTT.EQ.'SOLI' .OR. IPATTT.EQ.'FILL')THEN
          ICSTR(1:15)='INTSTYLE SOLID;'
          NCSTR=15
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          ICSTR(1:15)='INTSTYLE HATCH;'
          NCSTR=15
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:11)='HATCHINDEX '
          NCHTOT=1
          NCSTR=11
          CALL GRTRIN(JPATTT,NCHTOT,ICSTR,NCSTR)
          ICSTR(13:13)=';'
          NCSTR=13
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO SET PATTERN--                                **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--CALCOMP ELECTROMECHANICAL PLOTTERS - **
C               **             PROGRAMMING, CALCOMP, 1987           **
C               **             PAGES 33 AND 34                      **
C               **  USE CALCOMP LIBRARY ROUTINE DASHS               **
C               **  SINCE THIS ROUTINE IS NOT SUPPORTED BY MANY     **
C               **  VERSIONS OF THE LIBRARY, COMMENT OUT.  SITES    **
C               **  CAN ACTIVATE IF DESIRED.                        **
C               **      CALL DASHS(ARRAY,ICNT)                      **
C               **  WHERE                                           **
C               **      ICNT=0   - TURN ON SOLID LINE               **
C               **      ICNT=2, ARRAY(1)=0.1, (2)=-0.1 - DEFAULT    **
C               **                 DASH PATTERN.                    **
C               **  ARRAY GIVES LENGTH OF ALTERNATING SOLID AND     **
C               **  SEGMENTS IN INCHES.  CURRENTLY ONLY DEFINE 1    **
C               **  DASH AND 1 DOTTED PATTERN                       **
C               ******************************************************
C
 4100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(JPATTT.EQ.-1)GOTO9000
        IF(JPATTT.EQ.2)THEN
          ICNT=2
          ARRCAL(1)=0.05
          ARRCAL(2)=-0.05
        ELSEIF(JPATTT.EQ.1 .OR. JPATTT.GT.2)THEN
          ICNT=2
          ARRCAL(1)=0.1
          ARRCAL(2)=-0.1
        ELSE
          ARRCAL(1)=0.
          ARRCAL(2)=0.
          ICNT=0
        ENDIF
C
C       FOLLOWING LINE TO ACTIVATE CALCOMP DASHED LINES
C
#ifdef HAVE_CALCOMP
        CALL DASHS(ARRCAL,ICNT)
#endif
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
#ifdef HAVE_QWIN
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(IPATTT.EQ.'BLAN' .OR.  IPATTT.EQ.'BL  ' .OR.
     1     IPATTT.EQ.'NONE' .OR. IPATTT.EQ.'NO  ' .OR.
     1     IPATTT.EQ.'    ')THEN
           STYLE=#0000
        ELSEIF(IPATTT.EQ.'SOLI' .OR.  IPATTT.EQ.'SO  ')THEN
           STYLE=#FFFF
        ELSEIF(IPATTT.EQ.'DOTT' .OR. IPATTT.EQ.'DOT ' .OR.
     1     IPATTT.EQ.'DO  ')THEN
           STYLE=#AAAA
        ELSEIF(IPATTT.EQ.'DASH' .OR. IPATTT.EQ.'DA  ')THEN
           STYLE=#FF00
        ELSEIF(IPATTT.EQ.'DA1 ')THEN
           STYLE=#FF00
        ELSEIF(IPATTT.EQ.'DA2 ')THEN
           STYLE=#F0F0
        ELSEIF(IPATTT.EQ.'DA3 ')THEN
           STYLE=#3C3C
        ELSEIF(IPATTT.EQ.'DA4 ')THEN
           STYLE=#8888
        ELSE
           STYLE=#FFFF
        ENDIF
        CALL SETLINESTYLE(STYLE)
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(IPATTT.EQ.'BLAN' .OR.  IPATTT.EQ.'BL  ' .OR.
     1     IPATTT.EQ.'NONE' .OR. IPATTT.EQ.'NO  ' .OR.
     1     IPATTT.EQ.'    ')THEN
        ELSEIF(IPATTT.EQ.'SOLI' .OR.  IPATTT.EQ.'SO  ')THEN
        ELSEIF(IPATTT.EQ.'DOTT' .OR. IPATTT.EQ.'DOT ' .OR.
     1         IPATTT.EQ.'DO  ')THEN
        ELSEIF(IPATTT.EQ.'DASH' .OR. IPATTT.EQ.'DA  ')THEN
        ELSEIF(IPATTT.EQ.'DA1 ')THEN
        ELSEIF(IPATTT.EQ.'DA2 ')THEN
        ELSEIF(IPATTT.EQ.'DA3 ')THEN
        ELSEIF(IPATTT.EQ.'DA4 ')THEN
        ELSE
        ENDIF
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(IPATTT.EQ.'BLAN' .OR.  IPATTT.EQ.'BL  ' .OR.
     1     IPATTT.EQ.'NONE' .OR. IPATTT.EQ.'NO  ' .OR.
     1     IPATTT.EQ.'    ')THEN
          CALL IGrLineType(0)
        ELSEIF(IPATTT.EQ.'SOLI' .OR.  IPATTT.EQ.'SO  ')THEN
          CALL IGrLineType(0)
        ELSEIF(IPATTT.EQ.'DOTT' .OR. IPATTT.EQ.'DOT ' .OR.
     1         IPATTT.EQ.'DO  ')THEN
          CALL IGrLineType(1)
        ELSEIF(IPATTT.EQ.'DASH' .OR. IPATTT.EQ.'DA  ')THEN
          CALL IGrLineType(2)
        ELSEIF(IPATTT.EQ.'DA1 ')THEN
          CALL IGrLineType(3)
        ELSEIF(IPATTT.EQ.'DA2 ')THEN
          CALL IGrLineType(4)
        ELSEIF(IPATTT.EQ.'DA3 ')THEN
          CALL IGrLineType(5)
        ELSEIF(IPATTT.EQ.'DA4 ')THEN
          CALL IGrLineType(6)
        ELSE
        ENDIF
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(IPATTT.EQ.'BLAN' .OR.  IPATTT.EQ.'BL  ' .OR.
     1     IPATTT.EQ.'NONE' .OR. IPATTT.EQ.'NO  ' .OR.
     1     IPATTT.EQ.'    ')THEN
          CALL IGrLineType(0)
        ELSEIF(IPATTT.EQ.'SOLI' .OR.  IPATTT.EQ.'SO  ')THEN
          CALL IGrLineType(0)
        ELSEIF(IPATTT.EQ.'DOTT' .OR. IPATTT.EQ.'DOT ' .OR.
     1         IPATTT.EQ.'DO  ')THEN
          CALL IGrLineType(1)
        ELSEIF(IPATTT.EQ.'DASH' .OR. IPATTT.EQ.'DA  ')THEN
          CALL IGrLineType(2)
        ELSEIF(IPATTT.EQ.'DA1 ')THEN
          CALL IGrLineType(3)
        ELSEIF(IPATTT.EQ.'DA2 ')THEN
          CALL IGrLineType(4)
        ELSEIF(IPATTT.EQ.'DA3 ')THEN
          CALL IGrLineType(5)
        ELSEIF(IPATTT.EQ.'DA4 ')THEN
          CALL IGrLineType(6)
        ELSE
        ENDIF
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO SET PATTERN--                                **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE ZETA VERSION OF CALCOMP LIBRARY.  VALUE OF  **
C               **  LINE PATTERN STORED IN DEVICE COMMON.  USED IN  **
C               **  VALUE OF "IPEN" SENT TO PLOT ROUTINE.  NOTHING  **
C               **  DONE IN THIS ROUTINE                            **
C               ******************************************************
C
 5100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               ******************************************************
C
 6600 CONTINUE
#ifdef HAVE_SUN
      IF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(IPATTT.EQ.'BLAN' .OR. IPATTT.EQ.'BL  ' .OR.
     1     IPATTT.EQ.'NONE' .OR. IPATTT.EQ.'NO  ' .OR.
     1     IPATTT.EQ.'    ')GOTO9000
        IF(IPATTT.EQ.'SOLI' .OR. IPATTT.EQ.'SO  ')CALL cflntype(0)
        IF(IPATTT.EQ.'DOTT' .OR. IPATTT.EQ.'DOT ' .OR.
     1     IPATTT.EQ.'DO  ')CALL cflntype(1)
        IF(IPATTT.EQ.'DASH' .OR. IPATTT.EQ.'DA  ')CALL cflntype(2)
        IF(IPATTT.EQ.'DA1 ')CALL cflntype(3)
        IF(IPATTT.EQ.'DA2 ')CALL cflntype(4)
        IF(IPATTT.EQ.'DA3 ')CALL cflntype(5)
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO SET (LINE) PATTERN--                         **
C               **  WRITE OUT A    W(P     PATTERN NUMBER)          **
C               **  WHERE PATTERN NUMBER IS 0 TO 6.                 **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGE 136                             **
C               ******************************************************
C
 8100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        ICSTR(1:3)='W(P'
        NCSTR=3
        NCHTOT=1
        CALL GRTRIN(JPATTT,NCHTOT,ICSTR,NCSTR)
        ICSTR(5:5)=')'
        NCSTR=5
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  TO SET (LINE) PATTERN--                         **
C               **  [ <X> <X> ...] <OFFSET> SETDASH                 **
C               **  THE FOLLOWING PATTERNS ARE USED, BUT THEY ARE   **
C               **  SCALED TO THE DOTS PER INCH (PATTERNS ARE FOR   **
C               **  72 DOTS PER INCH)                               **
C               **  [ ] 0                - SOLID                    **
C               **  [ 2 4 ] 0            - DOTTED                   **
C               **  [ 4 4 ] 0            - DASH                     **
C               **  [ 4 2 ] 0            - DA1                      **
C               **  [ 6 4 2 4 ] 0        - DA2                      **
C               **  [ 6 4 6 4 ] 0        - DA3                      **
C               **  [ 6 4 4 4 2 4 ] 0    - DA4                      **
C               **  [ 6 4 2 4 2 4 ] 0    - DA5                      **
C               **  REFERENCE--POSTSCRIPT LANGUAGE, TUTORIAL AND    **
C               **             COOKBOOK, ADOBE SYSTEMS              **
C               ******************************************************
CCCCC JUNE, 1990.  BUG FIX.  POSTSCRIPT DOES NOT SUPPORT A "NULL" LINE
CCCCC PATTERN.  SET TO SOLID, BUT IN GRDRPL, IF PATTERN IS ZERO, SKIP
CCCCC THE LINE.
C
 8600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        ASCALE=PSTPPI/72.
        IF(JPATTT.EQ.1)THEN
          ICSTR(1:13)='[ ] 0 setdash'
          NCSTR=13
        ELSEIF(JPATTT.EQ.2)THEN
C
C         DOTTED PATTERN (DEFAULT: 2 4)
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,1).GT.0 .AND. IPSTDP(2,1).GT.0)THEN
            DO8610JJ=1,10
              IVALZZ=IPSTDP(JJ,1)
              IF(IVALZZ.LE.0)GOTO8619
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8610       CONTINUE
 8619       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(2.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=2
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:25)=' ] 0 setdash'
            NCSTR=25
          ENDIF
        ELSEIF(JPATTT.EQ.3)THEN
C
C         DASHED PATTERN (DEFAULT: 4 4)
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,2).GT.0 .AND. IPSTDP(2,2).GT.0)THEN
            DO8620JJ=1,10
              IVALZZ=IPSTDP(JJ,2)
              IF(IVALZZ.LE.0)GOTO8629
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8620       CONTINUE
 8629       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:25)=' ] 0 setdash'
            NCSTR=25
          ENDIF
        ELSEIF(JPATTT.EQ.4)THEN
C
C         DA1    PATTERN (DEFAULT: 4 2 )
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,3).GT.0 .AND. IPSTDP(2,3).GT.0)THEN
            DO8630JJ=1,10
              IVALZZ=IPSTDP(JJ,3)
              IF(IVALZZ.LE.0)GOTO8639
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8630       CONTINUE
 8639       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(2.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=2
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:25)=' ] 0 setdash'
            NCSTR=25
          ENDIF
        ELSEIF(JPATTT.EQ.5)THEN
C
C         DA2    PATTERN (DEFAULT: 6 4 2 4 )
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,4).GT.0 .AND. IPSTDP(2,4).GT.0)THEN
            DO8640JJ=1,10
              IVALZZ=IPSTDP(JJ,4)
              IF(IVALZZ.LE.0)GOTO8649
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8640       CONTINUE
 8649       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(6.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=6
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:14)=' '
            NCSTR=14
            IJUNK=INT(2.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=2
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(20:20)=' '
            NCSTR=20
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(26:37)=' ] 0 setdash'
            NCSTR=37
          ENDIF
        ELSEIF(JPATTT.EQ.6)THEN
C
C         DA3    PATTERN (DEFAULT: 6 4 6 4 )
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,5).GT.0 .AND. IPSTDP(2,5).GT.0)THEN
            DO8650JJ=1,10
              IVALZZ=IPSTDP(JJ,5)
              IF(IVALZZ.LE.0)GOTO8659
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8650       CONTINUE
 8659       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(6.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=6
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:14)=' '
            NCSTR=14
            IJUNK=INT(6.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=6
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(20:20)=' '
            NCSTR=20
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(26:37)=' ] 0 setdash'
            NCSTR=37
          ENDIF
        ELSEIF(JPATTT.EQ.7)THEN
C
C         DA4    PATTERN (DEFAULT: 6 4 4 4 2 4 )
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,6).GT.0 .AND. IPSTDP(2,6).GT.0)THEN
            DO8660JJ=1,10
              IVALZZ=IPSTDP(JJ,6)
              IF(IVALZZ.LE.0)GOTO8669
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8660       CONTINUE
 8669       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(6.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=6
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:14)=' '
            NCSTR=14
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(20:20)=' '
            NCSTR=20
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(26:26)=' '
            NCSTR=26
            IJUNK=INT(2.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=2
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(32:32)=' '
            NCSTR=32
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(38:49)=' ] 0 setdash'
            NCSTR=49
          ENDIF
        ELSEIF(JPATTT.EQ.8)THEN
C
C         DA5    PATTERN (DEFAULT: 6 4 2 4 2 4 )
C
          ICSTR(1:2)='[ '
          NCHTOT=5
          NCSTR=2
          IF(IPSTDP(1,7).GT.0 .AND. IPSTDP(2,7).GT.0)THEN
            DO8670JJ=1,10
              IVALZZ=IPSTDP(JJ,7)
              IF(IVALZZ.LE.0)GOTO8679
              IJUNK=INT(REAL(IVALZZ)*ASCALE+0.5)
              IF(IJUNK.LT.1)IJUNK=1
              CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=' '
 8670       CONTINUE
 8679       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR+11)=' ] 0 setdash'
            NCSTR=NCSTR+11
          ELSE
            IJUNK=INT(6.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=6
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(8:8)=' '
            NCSTR=8
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(14:14)=' '
            NCSTR=14
            IJUNK=INT(2.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(20:20)=' '
            NCSTR=20
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(26:26)=' '
            NCSTR=26
            IJUNK=INT(2.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=2
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(32:32)=' '
            NCSTR=32
            IJUNK=INT(4.*ASCALE+0.5)
            IF(IJUNK.LE.1)IJUNK=4
            CALL GRTRIN(IJUNK,NCHTOT,ICSTR,NCSTR)
            ICSTR(38:49)=' ] 0 setdash'
            NCSTR=49
          ENDIF
        ELSE
          ICSTR(1:13)='[ ] 0 setdash'
          NCSTR=13
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  TO SET (LINE) PATTERN--                         **
C               **  WRITE OUT A    ^V(PATTERN NUMBER)               **
C               **  HOWEVER, SET WHEN ACTUALLY DRAW LINE            **
C               **  WHERE PATTERN NUMBER IS 0 TO 9, A-F             **
C               **  REFERENCE--QUIC PROGRAMMERS MANUAL, FROM QMS    **
C               **             CHAPTER 14                           **
C               ******************************************************
C
 9100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(JPATTT.EQ.-1)GOTO9000
        ICODE=3
        INDEX=0
        IF(IX11CS.EQ.'ROUND')INDEX=1
        IF(IX11CS.EQ.'NOTLAST')INDEX=2
        IF(IX11CS.EQ.'PROJECT')INDEX=3
        CALL XLATTR(INDEX,ICODE)
        ICODE=4
        INDEX=0
        IF(IX11JS.EQ.'ROUND')INDEX=1
        IF(IX11JS.EQ.'BEVEL')INDEX=2
        CALL XLATTR(INDEX,ICODE)
        ICODE=2
        INDEX=0
        CALL XLATTR(JPATTT,ICODE)
      ENDIF
#endif
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 74.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 310.                       **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 29.         **
C               *************************************************
C
10000 CONTINUE
      IF(ITCST.EQ.'CLOS')GOTO9000
CCCCC ADD FOLLOWING LINE OCTOBER 1996
      IF(JPATTT.EQ.-1)GOTO9000
CTURB CALL TCSEPA(ICASE,IPATTT)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(JPATTT.EQ.-1)GOTO9000
#ifdef HAVE_GKS
        CALL GSLN(JPATTT)
#endif
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
#ifdef HAVE_GD
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        CALL GDSEPA(JPATTT)
      ENDIF
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(JPATTT.EQ.-1)GOTO9000
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        IF(JPATTT.EQ.-1)GOTO9000
        IOPT=1
        PTHICK=-1.0
C
        NPATT=0
        DO13511I=1,8
          XPATT(1)=0.0
13511 CONTINUE
        IF(JPATTT.EQ.2)THEN
          NPATT=2
          XPATT(1)=4.0
          XPATT(2)=2.0
        ELSEIF(JPATTT.EQ.3)THEN
          NPATT=2
          XPATT(1)=1.0
          XPATT(2)=2.0
        ELSEIF(JPATTT.EQ.4)THEN
          NPATT=4
          XPATT(1)=4.0
          XPATT(2)=2.0
          XPATT(3)=1.0
          XPATT(4)=2.0
        ELSEIF(JPATTT.EQ.5)THEN
          NPATT=2
          XPATT(1)=6.0
          XPATT(2)=2.0
        ELSEIF(JPATTT.EQ.6)THEN
          NPATT=4
          XPATT(1)=6.0
          XPATT(2)=2.0
          XPATT(3)=1.0
          XPATT(4)=2.0
        ELSEIF(JPATTT.EQ.7)THEN
          NPATT=2
          XPATT(1)=8.0
          XPATT(2)=4.0
        ELSEIF(JPATTT.EQ.8)THEN
          NPATT=4
          XPATT(1)=8.0
          XPATT(2)=4.0
          XPATT(3)=1.0
          XPATT(4)=2.0
        ENDIF
C
#ifdef HAVE_AQUA
        CALL aqsepa(XPATT,NPATT,PTHICK,IOPT)
#endif
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEK (USING EEPIC)            DRIVER **
C               ******************************************************
C
15000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SEPA')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSEPA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9023)JPATTT,NCSTR,IERRG4
 9023   FORMAT('NCSTR,JPATTT,IERRG4 = ',2I8,2X,A4)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSEPP(I,
     1                  IDMANU,IDMODE,IDMOD2,IDMOD3,
     1                  IDPOWE,IDCONT,IDCOLO,IDFONT,IDNVPP,IDNHPP,
     1                  IDUNIT,IDNVOF,IDNHOF,
     1                  IBUGO2,IFOUN2,IERROR)
C
C     PURPOSE--SCAN FOR PARTICULAR MANUFACTURERS FOR DEVICE I, AND
C              APPROPRIATELY UPDATE THE CONTINUITY, COLOR, AND PICTURE
C              POINT VECTORS.
C     NOTE--MANY OF THE PICTURE POINT SETTINGS HAVE BEEN ASSIGNED
C           VALUES OF 1000 AND 1000--THIS INDICATES THAT THE
C           ACTUAL COORECT VALUES ARE NOT KNOWN AND SHOULD
C           BE ASSIGNED THE PROPER VALUE IF SUCH A DEVICE
C           EXISTS AT ONE'S INSTALLATION.
C     INPUT  ARGUMENTS--I
C                     --IDMANU
C                     --IDMODE
C                     --IDMOD2
C                     --IDMOD3
C     OUTPUT ARGUMENTS--IDPOWE
C                     --IDCONT
C                     --IDCOLO
C                     --IDNVPP
C                     --IDNHPP
C                     --IFOUN2 ('YES' OR 'NO' )
C                     --IERROR ('YES' OR 'NO' )
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--82/7
C     ORIGINAL VERSION--OCTOBER   1980.
C     UPDATED         --MAY       1982.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. EMULATE ORIENTATION FOR SOME
C                                      DEVICES (BY ALAN HECKERT)
C     UPDATED         --MAY      1990. HP-GL UPDATES (BY ALAN HECKERT)
C     UPDATED         --NOVEMBER 1990. POSTSCRIPT BUG FIX (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --AUGUST   1992. HP-GL FOR LASERJET III (ALAN)
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN (ALAN)
C     UPDATED         --OCTOBER  1996. OPEN GL (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --NOVEMBER 1996. SUPPORT FOR
C                                      "LANDSCAPE WORDPERFECT"
C                                      FOR POSTSCRIPT DRIVER
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C                                      CHANGE THIS TO "QUARTZ"
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C                                      CHANGE THIS TO "GHOSTSCRIPT"
C     UPDATED         --MARCH    2002. ADD LATEX (EEPIC)
C     UPDATED         --MARCH    2002. ADD SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --JANUARY  2003. SUPPORT FOR ORIENTATION WHEN DEVICE
C                                      IS INITIALIZED.
C     UPDATED         --JANUARY  2003. SUPPORT FOR LANDSCAPE WORDPERFECT
C                                      ORIENTATION FOR POSTSCRIPT AND
C                                      OTHER DEVICES
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM DEVICE
C                                      USED WITH MAC OSX
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C     UPDATED         --OCTOBER  2016. REMOVE THE "TERMINAL" DEVICES AS
C                                      THESE DO NOT SUPPORT GRAPHICS
C     UPDATED         --DECEMBER 2019. CHECK FEEDBACK SETTING FOR OUTPUT
C                                      MESSAGES
C
C---------------------------------------------------------------------
C
      CHARACTER*4 IDMANU
      CHARACTER*4 IDMODE
      CHARACTER*4 IDMOD2
      CHARACTER*4 IDMOD3
C
      CHARACTER*4 IDPOWE
      CHARACTER*4 IDCONT
      CHARACTER*4 IDCOLO
      CHARACTER*4 IDFONT
C
      CHARACTER*4 IC4
      CHARACTER*2 IC2
C
      CHARACTER*4 IBUGO2
      CHARACTER*4 IFOUN2
      CHARACTER*4 IERROR
C
C---------------------------------------------------------------------
C
      DIMENSION IDMANU(*)
      DIMENSION IDMODE(*)
      DIMENSION IDMOD2(*)
      DIMENSION IDMOD3(*)
C
      DIMENSION IDPOWE(*)
      DIMENSION IDCONT(*)
      DIMENSION IDCOLO(*)
      DIMENSION IDFONT(*)
      DIMENSION IDNVPP(*)
      DIMENSION IDNHPP(*)
      DIMENSION IDUNIT(*)
C
C  MAY, 1988.  ADD VERTICAL AND HORIZONTAL OFFSET PARAMETERS.
C
      DIMENSION IDNVOF(*)
      DIMENSION IDNHOF(*)
C
C---------------------------------------------------------------------
C
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
C
C  MAY, 1988. ADD "GRAPHICS UNIT" FROM "DPCOGR" COMMON BLOCKS.
C
      COMMON/ICOMGU/IGUNIT,IPRGR,IRDGR
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOF2.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IFOUN2='NO'
      IERROR='NO'
C
      IF(IBUGO2.EQ.'ON')THEN
        WRITE(ICOUT,11)
   11   FORMAT('AT THE BEGINNING OF GRSEPP')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      IDPOWE(I)='ON'
      IDFONT(I)='OFF'
C
C  MAY, 1988.  SEPARATE UNITS FOR GRAPHICS.
CCCCC IDUNIT(I)=IPR
      IDUNIT(I)=IPRGR
      IF(I.EQ.2)IDUNIT(I)=IPL1NU
      IF(I.EQ.3)IDUNIT(I)=IPL2NU
C
C     ******************************************************************
C     **  FOLLOWING ARE EITHER ALPHANUMERIC TERMINALS OR LINE PRINTERS**
C     ******************************************************************
C
C               *******************************
C               **  TREAT THE BATCH CASE     **
C               **  TREAT THE DISCRETE CASE  **
C               **  TREAT THE TERMINAL CASE  **
C               *******************************
C
      IF(IDMANU(I).EQ.'BATC')THEN
        IDCONT(I)='OFF'
        IDCOLO(I)='OFF'
        IDNHPP(I)=132
        IDNVPP(I)=66
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8919
      ELSEIF(IDMANU(I).EQ.'DISC')THEN
        IDCONT(I)='OFF'
        IDCOLO(I)='OFF'
        IDNHPP(I)=72
        IDNVPP(I)=24
        IF(IDMODE(I).EQ.'WIDE')IDNHPP(I)=132
        IF(IDMODE(I).EQ.'WIDE')IDNVPP(I)=66
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8919
      ELSEIF(IDMANU(I).EQ.'TERM')THEN
        IDCONT(I)='OFF'
        IDCOLO(I)='OFF'
        IDNHPP(I)=132
        IDNVPP(I)=66
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8919
      ENDIF
C
C     ******************************************************************
C     **  FOLLOWING ARE METAFILES                                     **
C     **  (GENERAL, GENERAL CODED, METAFILE, FILE, CGM)               **
C     ******************************************************************
C
      IF(IDMANU(I).EQ.'FILE' .OR. IDMANU(I).EQ.'META' .OR.
     1   IDMANU(I).EQ.'GENE' .OR. IDMANU(I).EQ.'CGM'  .OR.
     1   IDMANU(I).EQ.'CGMB')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=10000
        IDNVPP(I)=10000
        IF(IDMANU(I).EQ.'CGM')IDMODE(I)='CGM'
        IF(IDMANU(I).EQ.'CGM')IDMANU(I)='GENE'
        IF(IDMANU(I).EQ.'CGMB')IDMODE(I)='CGMB'
        IF(IDMANU(I).EQ.'CGMB')IDMANU(I)='GENE'
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8919
      ENDIF
C
C     ******************************************************************
C     **  FOLLOWING ARE CURRENTLY SUPPORTED DEVICES                   **
C     **                                                              **
C     **  1) TEKTRONIX   - (MODELS 4006, 4010, 4020, 4022, 4025, 4027 **
C     **                           4051, 4052, 4113, 4115, 4662, 4105 **
C     **                           4107, 4109, 4014, 4114)            **
C     **  2) HP          - HP-GL (9872, 7475, 7580)                   **
C     **                 -         7221 PLOTTER                       **
C     **                 -         2622 AND COMPATIBLE                **
C     **                           (2623, 2647, 2648, 9816, 9836,     **
C     **                                 2393, [MONOCHROME MODELS]    **
C     **                           2627, 2397, 2390 [8 COLORS])       **
C     **  3) CALCOMP     - REQUIRES LOCAL VERSION OF CALCOMP LIBRARY  **
C     **  4) ZETA        - REQUIRES LOCAL VERSION OF ZETA (A CALCOMP  **
C     **                   EXTENDED LIBRARY)                          **
C     **  5) REGIS       - ANY DEC TERMINAL RUNNING REGIS PROTOCOL    **
C     **  6) SUN         - USES SUN GRAPHICS LIBRARY                  **
C     **                   CODE IN DATAPLOT GRAPHICS ROUTINES NEEDS   **
C     **                   TO BE UNCOMMENTED)                         **
C     **  7) QUIC        - (EITHER LANDSCAPE OR PORTRAIT MODE)        **
C     **  8) POSTSCRIPT  - (EITHER LANDSCAPE OR PORTRAIT MODE)        **
C     **  9) X11         - (PICTURE POINTS CAN VARY)                  **
C     **  9) VGA/TURBO-C - REQUIRES TURBO-C 2.0 OR ABOVE              **
C     ** 10) LAHEY       - REQUIRES LAHEY COMPILER AND GRAPHICS LIB   **
C     ** 11) QWIN        - REQUIRES MICROSOFT COMPILER                **
C     ** 12) GKS         - REQUIRES A GKS LIBRARY                     **
C     ** 13) OPGL        - REQUIRES BILL MITCHELLS OPENGL             **
C     **                   FORTRAN 90 BINDING                         **
C     ** 14) GD          - REQUIRES GD LIBRARY                        **
C     **                   (JPEG, PNG, WINDOWS BMP)                   **
C     ** 15) LIBPLOT     - UNIX LIBPLOT LIBRARY                       **
C     ** 16) LATEX (EEPIC) - LATEX (USING EEPIC PACKAGE)              **
C     ** 17) ABSOFT      - ABSOFT DRIVER                              **
C     ** 18) SVG         - SCALABLE VECTOR GRAPHICS                   **
C     ** 19) AQUATERM    - AQUATERM                                   **
C     ******************************************************************
C
      IF(IDMANU(I).EQ.'HEWL' .OR. IDMANU(I).EQ.'HP')THEN
C
C       TREAT THE HEWLETT PACKARD CASE
C       REFERENCE--7221T OPERATING AND PROGRAMMING MANUAL, PAGE 78
C       (FOR 2622 AND 2623) PAGE 10-1
C
C       UPDATED MAY, 1990 FOR HP-GL.  ADD CHECK FOR MODEL NUMBER:
C       UPDATED AUGUST 1992.  CHECK FOR LASERJET III MODEL (TREAT AS 7475
C       BUT IS MONOCHROME, ADVANCE PAGE HANDLED SEPARATELY)
C       9872              - (4 PENS, 1 PAPER SIZE)
C       7475, 7550        - (8 PENS, 2 PAPER SIZES)
C       7580              - (8 PENS, 4 PAPER SIZES)
C       7585, 7586        - (8 PENS, 5 PAPER SIZES)
C       LJET, LASE, LJ    - (1 PEN, 1 PAPER SIZE)
C
C       FOLLOWING ANSI STANDARD PAPER SIZES RECOGNIZED:
C
C       A  - 8 1/2 X 11
C       B  - 11    X 17
C       C  - 17    X 22
C       D  - 22    X 34
C       E  - 34    X 44
C
C       NOTE THAT FOR HP-GL, THE "IP" POINTS DEFINE THE "SCALE" POINTS WHILE
C       THE "SC" POINTS DEFINE THE USER UNITS.  THAT IS, THE LOWER LEFT CORNER
C       SPECIFIED BY SC IS MAPPED TO THE LOWER LEFT SCALING POINT AND THE UPPER
C       RIGHT CORNER SPECIFIED BY SC IS MAPPED TO THE UPPER RIGHT SCALING POINT.
C       THAT IS, THE IP AND SC COMMANDS DEFINE THE WINDOW-TO-VIEWPORT MAPPING.
C       DATAPLOT DOES NOT SPECIFY THE IP PARAMETER BECAUSE MOST HP-GL PLOTTERS
C       ALLOW A USER TO MANUALLY SET THESE FROM THE PLOTTER AND WE DO NOT WANT
C       TO OVERIDE IF THEY HAVE SET IT.  WE SET THE SC PARAMETERS EQUAL TO THE
C       DEFAULT IP VALUES FOR THE GIVEN PLOTTER AND PAPER SIZE (EXCEPT FOR THE
C       7580/85/86 PLOTTERS WHICH USE NEGATIVE VALUES, FOR THESE WE DOUBLE THE
C       POSITIVE DISTANCE).  THIS MEANS WE PLOT IN ABSOLUTE PLOTTER UNITS.  WE
C       DO THIS SINCE DATAPLOT TYPICALLY WORKS IN "PICTURE POINT" UNITS ANYWAY
C       WHEN IT GETS TO THE DEVICE LEVEL.
C
C       UPDATED JULY, 1990 FOR HP 26XX MODELS.  SUPPORT COLOR ON SOME MODELS.
C
C       MODEL      RESOLUTION       COLORS
C       =====      ==========       ======
C       2622       512 X 390          0
C       2623       512 X 390          0
C       2647       720 X 360          0
C       2648       720 X 360          0
C       2393       512 X 390          0
C       9816       512 X 390          0
C       9836       512 X 390          0
C       2627       512 X 390          8
C       2397       512 X 390          8
C       2390       512 X 390          8
C
C       THESE MODELS ALL USE THE SAME DEVICE DRIVER.  THEY DIFFER ONLY IN
C       THE NUMBER OF PICTURE POINTS AND IN WHETHER THEY SUPPORT COLOR OR
C       NOT.
C
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=16158
        IDNVPP(I)=11040
        IDNVOF(I)=0
        IDNHOF(I)=0
        IC4=IDMODE(I)
        IC2=IC4(1:2)
        IF(IDMODE(I).EQ.'2627'.OR.IDMODE(I).EQ.'2397'.OR.
     1     IDMODE(I).EQ.'2390')THEN
          IDNHPP(I)=512
          IDNVPP(I)=390
          IDCOLO(I)='ON'
          IDMODE(I)='2622'
        ELSE IF(IDMODE(I).EQ.'2647'.OR.IDMODE(I).EQ.'2648')THEN
          IDNHPP(I)=720
          IDNVPP(I)=360
          IDCOLO(I)='OFF'
          IDMODE(I)='2622'
        ELSE IF(IDMODE(I).EQ.'9816'.OR.IDMODE(I).EQ.'9836'.OR.
     1          IDMODE(I).EQ.'2393'.OR.IDMODE(I).EQ.'2622'.OR.
     1          IDMODE(I).EQ.'2623'.OR.IDMODE(I).EQ.'216'.OR.
     1          IDMODE(I).EQ.'236'.OR. IC2.EQ.'26')THEN
          IDNHPP(I)=512
          IDNVPP(I)=390
          IDCOLO(I)='OFF'
          IDMODE(I)='2622'
        END IF
        IF(IDMODE(I).EQ.'7221')IDNHPP(I)=3040
        IF(IDMODE(I).EQ.'7221')IDNVPP(I)=2000
        IF(IDMOD2(I).EQ.'7550')IDMOD2(I)='7475'
        IF(IDMOD2(I).EQ.'7586')IDMOD2(I)='7585'
        IF(IDMOD2(I).EQ.'LJET' .OR. IDMOD2(I).EQ.'LJ  ' .OR.
     1     IDMOD2(I).EQ.'LASE')THEN
          IDMOD3(I)='LJET'
          IDMOD2(I)='7475'
        ENDIF
        IF(IDMODE(I).EQ.'2622'.AND.IDNHPP(I).EQ.512)THEN
          IF(IORNSW.EQ.'PORT')THEN
            IDNHPP(I)=302
            IDNHOF(I)=45
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            IDNHPP(I)=390
            IDNHOF(I)=60
          END IF
        ELSE IF(IDMODE(I).EQ.'2622'.AND.IDNHPP(I).EQ.720)THEN
          IF(IORNSW.EQ.'PORT')THEN
            IDNHPP(I)=278
            IDNHOF(I)=221
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            IDNHPP(I)=369
            IDNHOF(I)=180
          ELSE IF(IORNSW.EQ.'LAND')THEN
            IDNHPP(I)=466
            IDNHOF(I)=127
          END IF
        ELSE IF(IDMODE(I).EQ.'GL  ')THEN
          IGUNIT=IDUNIT(I)
          IF(IDMOD2(I).EQ.'7475')THEN
            IHPGCL=8
            IF(IDMOD3(I).EQ.'B   ')THEN
              IDNHPP(I)=16640
              IDNVPP(I)=10365
            ELSEIF(IDMOD3(I).EQ.'LJET')THEN
              IHPGCL=1
              IDNHPP(I)=10250
              IDNVPP(I)=7796
            ELSE
              IDNHPP(I)=10250
              IDNVPP(I)=7796
            END IF
          ELSE IF(IDMOD2(I).EQ.'7580')THEN
            IHPGCL=8
            IF(IDMOD3(I).EQ.'B   ')THEN
              IDNHPP(I)=14200
              IDNVPP(I)=9000
            ELSE IF(IDMOD3(I).EQ.'C   ')THEN
              IDNHPP(I)=19280
              IDNVPP(I)=16566
            ELSE IF(IDMOD3(I).EQ.'D   ')THEN
              IDNHPP(I)=20120
              IDNVPP(I)=30340
            ELSE
              IDNHPP(I)=5580
              IDNVPP(I)=9000
            END IF
          ELSE IF(IDMOD2(I).EQ.'7585')THEN
            IHPGCL=8
            IF(IDMOD3(I).EQ.'B   ')THEN
              IDNHPP(I)=14200
              IDNVPP(I)=9000
            ELSE IF(IDMOD3(I).EQ.'C   ')THEN
              IDNHPP(I)=14180
              IDNVPP(I)=20150
            ELSE IF(IDMOD3(I).EQ.'D   ')THEN
              IDNHPP(I)=20120
              IDNVPP(I)=30340
            ELSE IF(IDMOD3(I).EQ.'E   ')THEN
              IDNHPP(I)=41680
              IDNVPP(I)=32360
            ELSE
              IDNHPP(I)=5580
              IDNVPP(I)=9000
            END IF
          ELSE
            IHPGCL=4
            IDMOD2(I)='9872'
            IDNHPP(I)=16158
            IDNVPP(I)=11040
          END IF
          IHPGX=IDNHPP(I)
          IHPGY=IDNVPP(I)
          IF(IORNSW.EQ.'PORT')THEN
            ASPECT=8.5/11.
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            ASPECT=1.
          ELSE IF(IORNSW.EQ.'LAND')THEN
            ASPECT=11./8.5
          ELSE
            ASPECT=-1.0
          END IF
          IF(ASPECT.GT.0.0)THEN
            IXMIN=0
            IXMAX=IDNHPP(I)
            IYMIN=0
            IYMAX=IDNVPP(I)
            XDIST=REAL(IXMAX-IXMIN+1)
            YDIST=REAL(IYMAX-IYMIN+1)
            XSIZE=YDIST*ASPECT
            IF(XSIZE.GT.REAL(IXMAX))XSIZE=REAL(IXMAX)
            XOFF=(XDIST-XSIZE)/2.
            IF(XOFF.LT.0.)XOFF=0.
            IDNHPP(I)=INT(XSIZE+0.5)
            IDNHOF(I)=INT(XOFF+0.5)
          END IF
        END IF
        IF(IHPGCL.LE.4)THEN
          IHPGPM(1)='BLACK'
          IHPGPM(2)='RED '
          IHPGPM(3)='BLUE'
          IHPGPM(4)='GREEN'
          DO6050J=5,16
          ITEMP=MOD(J-1,4)+1
          IHPGPM(J)=IHPGPM(ITEMP)
 6050     CONTINUE
        ELSE
          IHPGPM(1)='BLACK'
          IHPGPM(2)='RED '
          IHPGPM(3)='BLUE'
          IHPGPM(4)='GREEN'
          IHPGPM(5)='MAGENTA'
          IHPGPM(6)='ORANGE'
          IHPGPM(7)='CYAN'
          IHPGPM(8)='YELLOW'
          DO6060J=9,16
            ITEMP=J-8
            IHPGPM(J)=IHPGPM(ITEMP)
 6060     CONTINUE
        END IF
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
  999     FORMAT(1X)
          CALL DPWRST('XXX','BUG ')
          IF(IDMODE(I).EQ.'2622')THEN
            WRITE(ICOUT,6021)
 6021       FORMAT('HEWLETT-PACKARD 26XX-TYPE TERMINAL')
            CALL DPWRST('XXX','BUG ')
            WRITE(ICOUT,6022)
 6022       FORMAT('INCLUDING 981X, 983X, 21X, 23X TERMINALS')
            CALL DPWRST('XXX','BUG ')
            GOTO6090
          ELSEIF(IDMODE(I).EQ.'7221')THEN
            WRITE(ICOUT,6001)
 6001       FORMAT('HEWLETT-PACKARD 7221T')
            CALL DPWRST('XXX','BUG ')
          ELSE
            WRITE(ICOUT,6002)
 6002       FORMAT('HEWLETT-PACKARD WITH HP-GL')
            CALL DPWRST('XXX','BUG ')
          ENDIF
          WRITE(ICOUT,6010)
 6010     FORMAT('PEN SETTINGS--')
          CALL DPWRST('XXX','BUG ')
C
          IF(IDMODE(I).NE.'7221')THEN
            DO6079J=1,IHPGCL
              WRITE(ICOUT,6072)J,IHPGPM(J)
 6072         FORMAT('PEN ',I2,' = ',A8,'(3 MM)')
              CALL DPWRST('XXX','BUG ')
 6079       CONTINUE
          ELSE
            WRITE(ICOUT,6011)
 6011       FORMAT(12X,'PEN 1 = BLACK (3 MM)')
            CALL DPWRST('XXX','BUG ')
            WRITE(ICOUT,6012)
 6012       FORMAT(12X,'PEN 2 = RED   (3 MM)')
            CALL DPWRST('XXX','BUG ')
            WRITE(ICOUT,6013)
 6013       FORMAT(12X,'PEN 3 = BLUE  (3 MM)')
            CALL DPWRST('XXX','BUG ')
            WRITE(ICOUT,6014)
 6014       FORMAT(12X,'PEN 4 = GREEN (3 MM)')
            CALL DPWRST('XXX','BUG ')
          ENDIF
        ENDIF
C
 6090   CONTINUE
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'TEKT')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IF(IDMODE(I).EQ.'4027')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4105')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4107')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4109')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4115')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4107')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4109')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4113')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4115')IDCOLO(I)='ON'
        IF(IDMODE(I).EQ.'4662')IDCOLO(I)='ON'
C
        IDNHPP(I)=4096
        IDNVPP(I)=3124
        IF(IDMODE(I).EQ.'4006')IDNHPP(I)=1024
        IF(IDMODE(I).EQ.'4006')IDNVPP(I)=781
        IF(IDMODE(I).EQ.'4010')IDNHPP(I)=1024
        IF(IDMODE(I).EQ.'4010')IDNVPP(I)=781
        IF(IDMODE(I).EQ.'4020')IDNHPP(I)=640
        IF(IDMODE(I).EQ.'4020')IDNVPP(I)=480
        IF(IDMODE(I).EQ.'4022')IDNHPP(I)=640
        IF(IDMODE(I).EQ.'4022')IDNVPP(I)=480
        IF(IDMODE(I).EQ.'4025')IDNHPP(I)=640
        IF(IDMODE(I).EQ.'4025')IDNVPP(I)=480
        IF(IDMODE(I).EQ.'4027')IDNHPP(I)=640
        IF(IDMODE(I).EQ.'4027')IDNVPP(I)=480
        IF(IDMODE(I).EQ.'4051')IDNHPP(I)=1024
        IF(IDMODE(I).EQ.'4051')IDNVPP(I)=781
        IF(IDMODE(I).EQ.'4052')IDNHPP(I)=1024
        IF(IDMODE(I).EQ.'4052')IDNVPP(I)=781
        IF(IDMODE(I).EQ.'4113')IDNHPP(I)=1000
        IF(IDMODE(I).EQ.'4113')IDNVPP(I)=800
        IF(IDMODE(I).EQ.'4115')IDNHPP(I)=1000
        IF(IDMODE(I).EQ.'4115')IDNVPP(I)=800
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IDNHPP(I).EQ.4096)THEN
          IF(IORNSW.EQ.'PORT')THEN
            IDNHPP(I)=2414
            IDNHOF(I)=841
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            IDNHPP(I)=3124
            IDNHOF(I)=486
          END IF
        ELSE IF(IDNHPP(I).EQ.1024)THEN
          IF(IORNSW.EQ.'PORT')THEN
            IDNHPP(I)=603
            IDNHOF(I)=89
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            IDNHPP(I)=781
            IDNHOF(I)=121
          END IF
        ELSE IF(IDNHPP(I).EQ.640)THEN
          IF(IORNSW.EQ.'PORT')THEN
            IDNHPP(I)=371
            IDNHOF(I)=54
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            IDNHPP(I)=480
            IDNHOF(I)=80
          END IF
        ELSE IF(IDNHPP(I).EQ.1000)THEN
          IF(IORNSW.EQ.'PORT')THEN
            IDNHPP(I)=618
            IDNHOF(I)=191
          ELSE IF(IORNSW.EQ.'SQUA')THEN
            IDNHPP(I)=800
            IDNHOF(I)=100
          END IF
        END IF
        IF(IDMODE(I).EQ.'4662' .AND. IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,6411)
 6411     FORMAT('TEKTRONIX 4662 MULTI-PEN PLOTTER')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,6412)
 6412     FORMAT('PEN SETTINGS--')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,6413)
 6413     FORMAT(12X,'PEN 1 = BLACK (3.5 MM)')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,6414)
 6414     FORMAT(12X,'PEN 2 = RED   (3.5 MM)')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,6415)
 6415     FORMAT(12X,'PEN 3 = BLUE  (3.5 MM)')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,6416)
 6416     FORMAT(12X,'PEN 4 = GREEN (3.5 MM)')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8919
      ELSEIF(IDMANU(I).EQ.'ZETA')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IF(IZETCL.GT.0)IDCOLO(I)='ON'
        IDNHPP(I)=INT(1000.*11.)
        IDNVPP(I)=INT(1000.*8.5)
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=INT(1000.*8.5)
          IDNVPP(I)=INT(1000.*11.)
          IDNVOF(I)=0
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=INT(1000.*8.5)
          IDNVPP(I)=INT(1000.*8.5)
          IDNVOF(I)=0
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=INT(1000.*8.5)
          IDNVPP(I)=INT(1000.*11.)
          IDNVOF(I)=INT(1000.*((11.0-7.73)/2))
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'POST')THEN
          IDNHPP(I)=INT(1000.*30.)
          IDNVPP(I)=INT(1000.*30.)
          IDNVOF(I)=0
          IDNHOF(I)=0
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'CALC')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IF(ICALCL.GT.0)IDCOLO(I)='ON'
        IDNHPP(I)=INT(1000.*11.)
        IDNVPP(I)=INT(1000.*8.5)
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=INT(1000.*8.5)
          IDNVPP(I)=INT(1000.*11.)
          IDNVOF(I)=0
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=INT(1000.*8.5)
          IDNVPP(I)=INT(1000.*8.5)
          IDNVOF(I)=0
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=INT(1000.*8.5)
          IDNVPP(I)=INT(1000.*11.)
          IDNVOF(I)=INT(1000.*((11.0-7.73)/2))
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'POST')THEN
          IDNHPP(I)=INT(1000.*30.)
          IDNVPP(I)=INT(1000.*30.)
          IDNVOF(I)=0
          IDNHOF(I)=0
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'REGI' .OR.  IDMANU(I).EQ.'VT' .OR.
     1       IDMANU(I).EQ.'DEC')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IDNHPP(I)=768
        IDNVPP(I)=480
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=371
          IDNHOF(I)=198
        ELSE IF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=480
          IDNHOF(I)=144
        ELSE IF(IORNSW.EQ.'LAND')THEN
          IDNHPP(I)=621
          IDNHOF(I)=73
        ELSE IF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=621
          IDNHOF(I)=73
        END IF
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,7102)
 7102     FORMAT('DEC WITH REGIS')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'SUN')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IDUMMY=0
#ifdef HAVE_SUN
        CALL isitcolor(IDUMMY)
#endif
        ISUNCL=IDUMMY
        IF(ISUNCL.GT.0)IDCOLO(I)='ON'
        IDNHPP(I)=10000
        IDNVPP(I)=10000
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'LIBP')THEN
C
C       UNIX LIBPLOT   CASE 
C       BY DEFAULT, BITMAP DEVICES WILL BE SET TO
C       570x570 (THIS IS THE LIBPLTO DEFAULT)
C
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=570
        IDNVPP(I)=570
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'QUIC' .OR. IDMANU(I).EQ.'QMS')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IDNHPP(I)=INT(11.*QUIPPI)-(IQUILM+IQUIRM)
        IDNVPP(I)=INT(8.5*QUIPPI)-(IQUITM+IQUIBM)
        IF(IORNSW.EQ.'PORT')IDNHPP(I)=INT(8.5*QUIPPI)-(IQU2LM+IQU2RM)
        IF(IORNSW.EQ.'PORT')IDNVPP(I)=INT(11.*QUIPPI)-(IQU2TM+IQU2BM)
        IDNVOF(I)=IQUITM
        IDNHOF(I)=IQUILM
        IF(IORNSW.EQ.'PORT')IDNVOF(I)=IQU2TM
        IF(IORNSW.EQ.'PORT')IDNHOF(I)=IQU2LM
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'POST')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IF(IPSTDC.EQ.'ON')IDCOLO(I)='ON'
        IDNHPP(I)=INT(11.*PSTPPI)-(IPSTLM+IPSTRM)
        IDNVPP(I)=INT(8.5*PSTPPI)-(IPSTTM+IPSTBM)
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=INT(8.5*PSTPPI)-(IPS2LM+IPS2RM)
          IDNVPP(I)=INT(11.*PSTPPI)-(IPS2TM+IPS2BM)
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=INT(8.5*PSTPPI)-(IPSTLM+IPSTRM)
          IDNVPP(I)=INT(6.5*PSTPPI)-(IPSTTM+IPSTBM)
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=INT(8.5*PSTPPI)-(IPSTLM+IPSTRM)
          IDNVPP(I)=INT(8.5*PSTPPI)-(IPSTTM+IPSTBM)
        ENDIF
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8919
      ELSEIF(IDMANU(I).EQ.'X11 ')THEN
C
C       TREAT THE X11        CASE
C       ACTUAL PICTURE POINTS CAN VARY (BOTH BECAUSE
C       DIFFERENT WORKSTATIONS SUPPORTED AND BECAUSE
C       RESIDENT WINDOW MANAGER CAN MODIFY REQUESTED
C       PICTURE POINTS.  SET TO 0 HERE (THE X11 C LIBRARY
C       DEFAULT VALUES.  USER CAN SPECIFY A
C       SUGGESTED SIZE VIA DEVICE .. PICTURE POINTS.
C       THE X11 C LIBRARY WILL QUERY THE COLOR
C       CAPABILITY OF THE SPECIFIC WORKSTATION.
C
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=0
        IDNVPP(I)=0
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'TURB')THEN
C
C       TREAT THE VGA VIA TURBO-C       CASE
C       REFERENCE--TURBO C 1.5 ADDITIONS &
C       ENHANCEMENTS, PAGE 105.
C       REFERENCE--TURBO C 2.0 REFERENCE GUIDE,
C       PAGE 200.
C
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=640
        IDNVPP(I)=480
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,7702)
 7702     FORMAT('TURBO-C/VGA')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'LAHE')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='OFF'
        IF(ILAHNC.GT.0)IDCOLO(I)='ON'
        IF(IORNSW.EQ.'PORT')THEN
          IF(IDMODE(I).EQ.'WINT'.OR.IDMODE(I).EQ.'INTE')THEN
            IDNHPP(I)=450
            IDNVPP(I)=600
          ELSE
            IDNHPP(I)=INT(1000.*8.5)
            IDNVPP(I)=INT(1000.*11.)
          ENDIF
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IF(IDMODE(I).EQ.'WINT'.OR.IDMODE(I).EQ.'INTE')THEN
            IDNHPP(I)=450
            IDNVPP(I)=450
          ELSE
            IDNHPP(I)=INT(1000.*8.5)
            IDNVPP(I)=INT(1000.*8.5)
          ENDIF
        ELSE
          IF(IDMODE(I).EQ.'WINT'.OR.IDMODE(I).EQ.'INTE')THEN
            IDNHPP(I)=600
            IDNVPP(I)=450
          ELSE
            IDNHPP(I)=INT(1000.*11.)
            IDNVPP(I)=INT(1000.*8.5)
          ENDIF
        ENDIF
C
        IDNVOF(I)=0
        IDNHOF(I)=0
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'QWIN')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=-1
        IDNVPP(I)=-1
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,7902)
 7902     FORMAT('MICROSOFT QUICK-WIN DRIVER')
          CALL DPWRST('XXX','BUG ')
         ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'GKS ')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=1000
        IDNVPP(I)=1000
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,8002)
 8002     FORMAT('GKS LIBRARY')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'GD  ')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=600
        IDNVPP(I)=465
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=465
          IDNVPP(I)=600
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=465
          IDNVPP(I)=360
          IDNVOF(I)=220
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=465
          IDNVPP(I)=465
          IDNVOF(I)=0
          IDNHOF(I)=0
        ENDIF
        IDFONT(I)='SIMP'
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,8202)IDMODE(I)
 8202     FORMAT('GD LIBRARY--',A4)
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'OPGL')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=600
        IDNVPP(I)=450
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=450
          IDNVPP(I)=600
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=450
          IDNVPP(I)=350
          IDNVOF(I)=125
          IDNHOF(I)=0
        ENDIF
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,8302)
 8302     FORMAT('OPEN-GL (BASED ON f90gl)')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'ABSO')THEN
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=600
        IDNVPP(I)=450
        IDNVOF(I)=0
        IDNHOF(I)=0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=450
          IDNVPP(I)=600
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=450
          IDNVPP(I)=350
          IDNVOF(I)=125
          IDNHOF(I)=0
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=450
          IDNVPP(I)=450
          IDNVOF(I)=0
          IDNHOF(I)=0
        ENDIF
        IF(IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,5102)
 5102     FORMAT('ABSOFT (=PLPLOT) LIBRARY)')
          CALL DPWRST('XXX','BUG ')
        ENDIF
        GOTO8900
      ELSEIF(IDMANU(I).EQ.'LATE' .OR. IDMANU(I).EQ.'EEPI')THEN
C
C       TREAT THE LATEX CASE--
C       USE 72 DPI COORDINATE SCALE STARTING FROM
C       LOWER LEFT CORNER.  SUPPORT PORTRAIT AND
C       LANDSCAPE WORDPERFECT OPTIONS.  REGULAR
C       LANDSCAPE MODE WILL BE TREATED SAME AS
C       LANDSCAPE WORDPERFECT (I.E., LANDSCAPE
C       MODE IN A PORTRAIT PAGE).
C
C       NOTE: IF CAPTURE SWITCH IS ON AND THIS IS DEVICE 1, THEN
C             SET IGUNIT EQUAL TO CAPTURE FILE.
C
        IFLAG9=0
        IF(I.EQ.1 .AND. IPR.EQ.ICAPNU)THEN
          IGUNIT=ICAPNU
          IFLAG9=1
        ENDIF
        IDNVOF(I)=0
        IDNHOF(I)=0
        ADOTPI=300.0
        IF(IORNSW.EQ.'PORT')THEN
          IDNHPP(I)=INT(6.25*ADOTPI)
          IDNVPP(I)=INT(9.0*ADOTPI)
        ELSEIF(IORNSW.EQ.'LAND')THEN
          IDNHPP(I)=INT(6.25*ADOTPI)
          IDNVPP(I)=INT((6.25*ADOTPI)*(8.5/11.0))
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IDNHPP(I)=INT(6.25*ADOTPI)
          IDNVPP(I)=INT((6.25*ADOTPI)*(8.5/11.0))
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IDNHPP(I)=INT(6.0*ADOTPI)
          IDNVPP(I)=INT(6.0*ADOTPI)
        ELSE
          IDNHPP(I)=INT(6.25*ADOTPI)
          IDNVPP(I)=INT((6.25*ADOTPI)*(8.5/11.0))
        ENDIF
        IF(IFLAG9.EQ.0 .AND. IFEEDB.EQ.'ON')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,8402)IDMODE(I)
 8402     FORMAT('LATEX (USING EPIC/EEPIC/GRAPHICS)--',A4)
          CALL DPWRST('XXX','BUG ')
          GOTO8900
        ELSE
          GOTO8919
        ENDIF
      ELSEIF(IDMANU(I).EQ.'SVG ')THEN
C
C       NOTE 09/2010: ALLOW USER TO SPECIFY DESIRED HORIZONTAL/VERTICAL
C                     SIZE IN THE SVG COMMAND, E.G.:
C                     DEVICE 1 SVG 800 500
        IXDEFA=600
        IYDEFA=450
C
        IF(IDMODE(I).NE.'    ')THEN
          READ(IDMODE(I)(1:4),'(I4)',ERR=8610)IXDEFA
          IF(IXDEFA.LT.200)IXDEFA=200
          IF(IXDEFA.GT.1200)IXDEFA=1200
        ENDIF
        IF(IDMOD2(I).NE.'    ')THEN
          READ(IDMOD2(I)(1:4),'(I4)',ERR=8610)IYDEFA
          IF(IYDEFA.LT.200)IYDEFA=200
          IF(IYDEFA.GT.1200)IYDEFA=1200
        ENDIF
        GOTO8610
      ELSEIF(IDMANU(I).EQ.'AQUA')THEN
C
C       NOTE: ALLOW USER TO SPECIFY DESIRED HORIZONTAL/VERTICAL SIZE
C             IN THE AQUA COMMAND, E.G.:  DEVICE 1 AQUA 600 400
        IXDEFA=600
        IYDEFA=450
C
        IF(IDMODE(I).NE.'    ')THEN
          READ(IDMODE(I)(1:4),'(I4)',ERR=8610)IXDEFA
          IF(IXDEFA.LT.200)IXDEFA=200
          IF(IXDEFA.GT.1200)IXDEFA=1200
        ENDIF
        IF(IDMOD2(I).NE.'    ')THEN
          READ(IDMOD2(I)(1:4),'(I4)',ERR=8610)IYDEFA
          IF(IYDEFA.LT.200)IYDEFA=200
          IF(IYDEFA.GT.1200)IYDEFA=1200
        ENDIF
        GOTO8610
      ELSEIF(IDMANU(I).EQ.'CAIR')THEN
C
C       DEFAULT PICTURE POINTS (BASED ON 72 DPI) FOR VARIOUS SETTINGS
C       FOR ORIENTATION.  THESE ARE BASED ON POSTSCRIPT DIMENSIONS, BUT
C       USE FOR OTHER DEVICES AS WELL.  USER CAN SPECIFY EXPLICIT
C       SETTINGS IF DESIRED.
C
        IF(IORNSW.EQ.'LAND')THEN
          IXDEFA=792
          IYDEFA=612
        ELSEIF(IORNSW.EQ.'PORT')THEN
          IXDEFA=612
          IYDEFA=792
        ELSEIF(IORNSW.EQ.'SQUA')THEN
          IXDEFA=612
          IYDEFA=612
        ELSEIF(IORNSW.EQ.'LAN2')THEN
          IXDEFA=612
          IYDEFA=468
        ELSE
          IXDEFA=792
          IYDEFA=612
        ENDIF
C
        IF(IDMOD2(I).NE.'    ')THEN
          READ(IDMOD2(I)(1:4),'(I4)',ERR=8610)IXDEFA
          IF(IXDEFA.LT.100)IXDEFA=100
          IF(IXDEFA.GT.10000)IXDEFA=10000
        ENDIF
        IF(IDMOD3(I).NE.'    ')THEN
          READ(IDMOD3(I)(1:4),'(I4)',ERR=8610)IYDEFA
          IF(IYDEFA.LT.100)IYDEFA=100
          IF(IYDEFA.GT.10000)IYDEFA=10000
        ENDIF
        IDCONT(I)='ON'
        IDCOLO(I)='ON'
        IDNHPP(I)=IXDEFA
        IDNVPP(I)=IYDEFA
        IDNHOF(I)=0
        IDNVOF(I)=0
        GOTO8900
C
      ELSEIF(IDMANU(I).EQ.'WMF ')THEN
        GOTO8610
      ELSEIF(IDMANU(I).EQ.'D3  ')THEN
        GOTO8610
      ENDIF
C
 8610 CONTINUE
C
      IDCONT(I)='ON'
      IDCOLO(I)='ON'
      IDNHPP(I)=IXDEFA
      IDNVPP(I)=IYDEFA
      IDNVOF(I)=0
      IDNHOF(I)=0
      IF(IORNSW.EQ.'PORT')THEN
        IDNHPP(I)=450
        IDNVPP(I)=600
      ELSEIF(IORNSW.EQ.'LAN2')THEN
        IDNHPP(I)=450
        IDNVPP(I)=350
        IDNVOF(I)=125
        IDNHOF(I)=0
      ELSEIF(IORNSW.EQ.'SQUA')THEN
        IDNHPP(I)=450
        IDNVPP(I)=450
        IDNVOF(I)=0
        IDNHOF(I)=0
      ENDIF
      IF(IFEEDB.EQ.'ON')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        IF(IDMANU(I).EQ.'AQUA')THEN
          WRITE(ICOUT,8612)
 8612     FORMAT('AQUATERM (FOR MAC OSX)')
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IDMANU(I).EQ.'SVG')THEN
          WRITE(ICOUT,8613)
 8613     FORMAT('SCALABLE VECTOR GRAPHICS (SVG)')
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IDMANU(I).EQ.'CAIR')THEN
          WRITE(ICOUT,8615)IDMODE(I)
 8615     FORMAT('CAIRO (',A4,')')
          CALL DPWRST('XXX','BUG ')
        ENDIF
      ENDIF
      GOTO8900
C
 8900 CONTINUE
      IF(IFEEDB.EQ.'ON')THEN
        WRITE(ICOUT,8910)
 8910   FORMAT('PICTURE POINTS--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,8911)IDNHPP(I)
 8911   FORMAT(12X,'HORIZONTAL = ',I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,8912)IDNVPP(I)
 8912   FORMAT(12X,'VERTICAL   = ',I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
 8919 CONTINUE
      IFOUN2='YES'
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
C
      IF(IBUGO2.EQ.'ON')THEN
        WRITE(ICOUT,51)
   51   FORMAT('AT THE BEGINNING OF GRSEPP')
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSESI(ICASE,IFONT,PHEIGH,PWIDTH,PVEGAP,PHOGAP,
     1                  JSIZE,JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A SIZE (E.G., A
C              CHARACTER SIZE) (HEIGHT, WIDTH, VERTICAL GAP, HORIZONTAL
C              GAP9 GIVEN IN (0.0 TO 100.0) REPRESENTATION INTO AN
C              INTEGER NUMERIC REPRESENTATION (IN JSIZE) THAT WILL BE
C              UNDERSTOOD BY THE TEKTRONIX GRAPHICS DEVICE BEING USED.
C              ALSO, CREATE OTHER VARIABLES WHICH CONTAIN THE CLOSEST
C              ALLOWABLE SIZES (IN 0.0 TO 100.0 UNITS) THAT IS PERMITTED
C              ON THE TEKTRONIX GRAPHICS DEVICE BEING USED.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PVONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MARCH    1991. REGIS FIX (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD STYLE CALCOMP
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. SUPPORT FOR LATEX
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --APRIL    2016. MODIFICATIONS TO QWIN DRIVER
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      GRAPHICS DEVICES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
      TYPE(FONTINFO) MSFONT
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
      CHARACTER*1 IQUOTE
      CHARACTER*4 ICASE
      CHARACTER*4 IFONT
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      CALL DPCONA(39,IQUOTE)
      ISUBN0='SESI'
      IERRG4='NO'
C
      NCSTR=(-999)
      PVETO2=(-999.0)
      PHOTO2=(-999.0)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SESI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSESI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ICASE,IFONT,JSIZE
   52   FORMAT('ICASE,IFONT,JSIZE = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)PHEIGH,PWIDTH,PVEGAP,PHOGAP
   53   FORMAT('PHEIGH,PWIDTH,PVEGAP,PHOGAP = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)JHEIG2,JWIDT2,JVEGA2,JHOGA2
   55   FORMAT('JHEIG2,JWIDT2,JVEGA2,JHOGA2 = ',4I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)PHEIG2,PWIDT2,PVEGA2,PHOGA2
   56   FORMAT('PHEIG2,PWIDT2,PVEGA2,PHOGA2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,57)IMANUF,IMODEL,IBUGG4
   57   FORMAT('IMANUF,IMODEL,IBUGG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4012')GOTO1100
        IF(IMODEL.EQ.'4013')GOTO1100
        IF(IMODEL.EQ.'4014')GOTO1100
        IF(IMODEL.EQ.'4015')GOTO1100
        IF(IMODEL.EQ.'4016')GOTO1100
C
        IF(IMODEL.EQ.'4054')GOTO1100
C
        IF(IMODEL.EQ.'4113')GOTO1100
        IF(IMODEL.EQ.'4114')GOTO1100
C
        IF(IMODEL.EQ.'4662')GOTO1200
C
        GOTO9000
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ********************************************************
C               **  STEP 11--                                         **
C               **  TREAT THE TEKTRONIX 4012, 4013, 4014, 4016, 4054, **
C               **  AND 4114 (THESE ARE ALL NON-COLOR (= MONOCHROME)  **
C               **  DEVICES WHICH ARE LARGE SCREEN AND SO HAVE 4      **
C               **  CHARCTER SIZES.) REFERENCE--XXX                   **
C               ********************************************************
C
 1100 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:2)=';'
      IF(JSIZE.EQ.2)ICSTR(2:2)=':'
      IF(JSIZE.EQ.3)ICSTR(2:2)='9'
      IF(JSIZE.EQ.4)ICSTR(2:2)='8'
      NCSTR=2
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ****************************************************
C               **  STEP 12--                                     **
C               **  TREAT THE TEKTRONIX 4662 PENPLOTTER CASE      **
C               **  REFERENCE--XXX                                **
C               ****************************************************
C
 1200 CONTINUE
      ICSTR(1:1)=IESCC
      ICSTR(2:8)='AI31,48'
      IF(JSIZE.EQ.2)ICSTR(2:8)='AI34,53'
      IF(JSIZE.EQ.3)ICSTR(2:8)='AI51,82'
      IF(JSIZE.EQ.4)ICSTR(2:8)='AI56,88'
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO SET SIZE--                                   **
C               **  USE THE TILDA PERCENT (= LABEL SIZE) INSTRUCTION*
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH ARE THE**
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 119-121.                        **
C               ******************************************************
C
 2100 CONTINUE
      ICSTR(1:2)='~%'
      NCSTR=2
      PVETO2=PHEIG2+PVEGA2
      PHOTO2=PWIDT2+PHOGA2
      CALL GRTRSD(PHOTO2,PVETO2,IX,IY,ISUBN0)
      CALL HPTRPT(IX,IY,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO SET SIZE--                                   **
C               **  USE THE SR (= REL CHAR SIZE) INSTRUCTION        **
C               **  ALONG WITH FLOATING POINT COORDINATES,          **
C               **  (WITH   TRAILING SEMI-COLONS WHICH ARE THE      **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 84-85, 144.                     **
C               ******************************************************
C
 2200 CONTINUE
      ICSTR(1:2)='SR'
      NCSTR=2
      NCHTOT=10
      NCHDEC=1
      CALL GRTRRE(PWIDT2,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(13:13)=','
      NCSTR=13
      CALL GRTRRE(PHEIG2,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(24:24)=';'
      NCSTR=24
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-19, XXX.                         **
C               **********************************************************
C
 2300 CONTINUE
C     NEEDS MORE WORK FOR FULL 8 SIZES
      ICSTR(1:1)=IESCC
      ICSTR(2:6)='*m1mZ'
      IF(PHEIG2.GT.3.0)ICSTR(2:6)='*m2mZ'
      IF(PHEIG2.GT.6.0)ICSTR(2:6)='*m3mZ'
      IF(PHEIG2.GT.9.0)ICSTR(2:6)='*m4mZ'
      IF(PHEIG2.GT.11.0)ICSTR(2:6)='*m5mZ'
      IF(PHEIG2.GT.14.0)ICSTR(2:6)='*m6mZ'
      IF(PHEIG2.GT.17.0)ICSTR(2:6)='*m8mZ'
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASE              **
C               **  SIZE WILL BE SET IN GRWRTH AND GRWRTV               **
C               **********************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      ICSTR(1:20)='SET SIZE CHARACTERS '
      NCSTR=20
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PHEIGH,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(31:32)='  '
      NCSTR=32
      CALL GRTRRE(PWIDTH,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      ICSTR(1:5)='SESI '
      NCSTR=5
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PHEIGH,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(16:17)='  '
      NCSTR=17
      CALL GRTRRE(PWIDTH,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3300 CONTINUE
      ICSTR(1:11)='CHARHEIGHT '
      NCSTR=10
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PHEIGH,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(22:22)=';'
      NCSTR=22
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO SET SIZE--                                   **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               **  USE CALCOMP LIBRARY.  SIZE SENT TO "SYMBOL"     **
C               **  SUBROUTINE IN "GRWRTH" AND "GRWRTV".            **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
C     2016/04: REWRITE THIS SECTION.  WANT ARGUMENT TO SETFONT TO
C              LOOK SOMETHING LIKE
C
C                  t'Arial''h17w10eb'
C
 4700 CONTINUE
#ifdef HAVE_QWIN
      IF(IQWNFT.LT.1)GOTO9000
      ICSTR=' '
      ICSTR(1:1)='t'
      ICSTR(2:2)=IQUOTE
      NCH=0
      DO4710I=32,1,-1
        IF(IQWNFZ(I:I).NE.' ')THEN
          NCH=I
          GOTO4719
        ENDIF
 4710 CONTINUE
 4719 CONTINUE
      IF(NCH.EQ.0)THEN
        ICSTR(3:7)='Arial'
        ICSTR(8:8)=IQUOTE
        NCSTR=8
      ELSE
        NCSTR=3+NCH-1
        ICSTR(3:NCSTR)=IQWNFZ(1:NCH)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
      ENDIF
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='h'
      NCSTR=NCSTR+1
      IF(JHEIG2.LE.5)JHEIG2=5
      IF(JHEIG2.GE.30)JHEIG2=30
      WRITE(ICSTR(NCSTR:NCSTR+1),'(I2.2)')JHEIG2
      NCSTR=NCSTR+2
      ICSTR(NCSTR:NCSTR)='w'
      NCSTR=NCSTR+1
      IF(JWIDT2.LE.5)JWIDT2=5
      IF(JWIDT2.GE.30)JWIDT2=30
      WRITE(ICSTR(NCSTR:NCSTR+1),'(I2.2)')JWIDT2
      NCSTR=NCSTR+1
      IF(IQWNST.EQ.'ITAL')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='i'
      ENDIF
      IF(IQWNFW.EQ.'BOLD')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='e'
      ENDIF
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='b'
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      IRESLT=SETFONT(ICSTR(1:NCSTR))
      IRESLT=GETFONTINFO(MSFONT)
      JHEIG2=MSFONT.PIXHEIGHT
      JWIDT2=MSFONT.PIXWIDTH
      IF(JHEIG2.EQ.0)JHEIG2=16
      IF(JWIDT2.EQ.0)JWDT2=8
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
#ifdef HAVE_INTERACTER
      CALL IGrCharSize(PHEIG2,PWIDT2)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      ATEMP=1.5
      AHEIG=PHEIG2/(100.0*(1.0/25.0))
      AWIDTH=PWIDT2/(ATEMP*100.0*(1.0/75.0))
#ifdef HAVE_WININTERACTER
      CALL IGrCharSize(AHEIG,AWIDTH)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO SET SIZE--                                   **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE ZETA VERSION OF CALCOMP LIBRARY.  SIZE      **
C               **  SENT TO "SYMBOL" ROUTINE IN "GRWRTH" AND "GRWRTV"**
C               **  HOWEVER, SET THE CHARACTER ASPECT RATIO IN GRTRSI*
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               ******************************************************
C
 6600 CONTINUE
      IDUMMY  = INT(PHEIG2*100)
#ifdef HAVE_SUN
      CALL cfcharheight(IDUMMY)
#endif
      GOTO 9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO SET CHARACTER HEIGHT---                      **
C               **  WRITE OUT A  T ( S SIZE-NUMBER )                **
C               **  WHERE SIZE-NUMBER IS FROM 0 TO 16               **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 118                            **
C               ******************************************************
C
C     MARCH, 1991.  BASE ON VALUE OF JSIZE (DETERMINED IN GRTRSI).
 8100 CONTINUE
      ICSTR(1:3)='T(S'
      ICSTR(4:6)=' 0)'
      IF(JSIZE.GE.0.AND.JSIZE.LE.9)WRITE(ICSTR(5:5),'(I1)')JSIZE
      IF(JSIZE.GE.10.AND.JSIZE.LE.99)WRITE(ICSTR(4:5),'(I2)')JSIZE
      NCSTR=6
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  CHARACTER SIZE DETERMINED BY POINT SIZE         **
C               **  OF FONT SELECTED.  FONT SELECTED IN "GRWRTH"    **
C               **  "GRWRTV".  NOTHING DONE HERE.                   **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **             COOKBOOK, ADOBE SYSTEMS              **
C               ******************************************************
C
 8600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  CHARACTER SIZE DETERMINED BY POINT SIZE         **
C               **  OF FONT SELECTED.  FONT SELECTED IN "GRWRTH"    **
C               **  "GRWRTV".  NOTHING DONE HERE.                   **
C               **  REFERENCE--QUIC PROGRAMMERS MANUAL,             **
C               **             FROM QMS                             **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  C LIBRARY WILL HANDLE SIZE AND JUSTIFICATION,   **
C               **  SO THIS WILL BE  A NULL ROUTINE                 **
C               ******************************************************
C
 9600 CONTINUE
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  DONE VIA settextstyle in GRWRTH & GRWRTV   **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSESI(PHEIGH,PWIDTH,PVEGAP,PHOGAP)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 CASE           **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
COLD  CALL aqtSetFontsize(PHEIG2)
#ifdef HAVE_AQUA
      CALL aqsesi(PHEIG2)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX                  DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      IF(JSIZE.EQ.1)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:5)='tiny'
        NCSTR=5
      ELSEIF(JSIZE.EQ.2)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:11)='scriptsize'
        NCSTR=11
      ELSEIF(JSIZE.EQ.3)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:13)='footnotesize'
        NCSTR=13
      ELSEIF(JSIZE.EQ.5)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:6)='small'
        NCSTR=6
      ELSEIF(JSIZE.EQ.5)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:11)='normalsize'
        NCSTR=11
      ELSEIF(JSIZE.EQ.6)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:6)='large'
        NCSTR=6
      ELSEIF(JSIZE.EQ.7)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:6)='Large'
        NCSTR=6
      ELSEIF(JSIZE.EQ.8)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:6)='LARGE'
        NCSTR=6
      ELSEIF(JSIZE.EQ.9)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:5)='huge'
        NCSTR=5
      ELSEIF(JSIZE.EQ.10)THEN
        ICSTR(1:1)=IBASLC
        ICSTR(2:5)='Huge'
        NCSTR=5
      ELSE
        ICSTR(1:1)=IBASLC
        ICSTR(2:11)='normalsize'
        NCSTR=11
      ENDIF
C
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SESI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSESI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9018)PVETO2,PHOTO2,IX,IY,NCSTR
 9018   FORMAT('PVETO2,PHOTO2,IX,IY,NCSTR = ',2G15.7,2X,3I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GT.0)THEN
          DO9025I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9026)I,ICSTR(I:I),IASCNE
 9026       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9025     CONTINUE
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRSETH(ICASE,PTHICK,JTHICK,PTHIC2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, SET A THICKNESS
C              (E.G., A PEN THICKNESS) ON A SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY   1989. SUN (BY BILL ANDERSON)
C                                       DRIVER OBSOLETE
C     UPDATED         --JANUARY   1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH     1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY       1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY       1991. VGA/TURBOC DRIVER (JJF)
C                                       DRIVER OBSOLETE
C     UPDATED         --JULY      1996. LAHEY DRIVER (ALAN HECKERT)
C                                       OLD STYLE CALCOMP
C                                       DRIVER OBSOLETE
C     UPDATED         --OCTOBER   1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER   1996. OPENGL DRIVER (ALAN)
C                                       USE BILL MITCHELLS OPENGL
C                                       BINDING FOR FORTRAN
C     UPDATED         --OCTOBER   1996. GKS (ALAN)
C                                       CODED, NOT TESTED
C     UPDATED         --OCTOBER   1996. BINARY CGM (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996. DISPLAY POSTSCRIPT (ALAN)
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY      1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE      2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE      2000. MACINTOSH
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000.  PC PRINTER
C                                       PLACEHOLDER FOR NOW
C     UPDATED         --FEBRUARY  2006. SUPPORT FOR LATEX
C     UPDATED         --SEPTEMBER 2007. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL     2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL     2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                       (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER   2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER   2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                       GRAPHICS DEVICES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*130 ICSTR
      CHARACTER*4 ISUBN0
C
      DIMENSION XPATT(8)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      ISUBN0='SETH'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SETH')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRSETH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)ICASE,IBUGG4,IMANUF,IMODEL
   54   FORMAT('ICASE,IBUGG4,IMANUF,IMODEL = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)PTHICK,JTHICK
   56   FORMAT('PTHICK,JTHICK = ',G15.7,I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 23--                                       **
C               **  TREAT THE HEWLETT-PACKARD 2622  CASES           **
C               **  LINE THICKNESS IMPLEMENTED IN SOFTWARE          **
C               ******************************************************
C
 2300 CONTINUE
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASE              **
C               **********************************************************
C
 2600 CONTINUE
      INDEX=1
      ICODE=0
      AVAL=PTHICK
#ifdef HAVE_LIBPLOT
      CALL PLLATR(INDEX,ICODE,DBLE(AVAL))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
C  JANUARY, 1988: TWO SET COMMANDS FOR LINE THICKNESS.
C  SET THICKNESS <ON/OFF> - IF OFF, LINE WIDTH IS SET TO THE
C                           REQUESTED VALUE, UP TO THE POST PROCESSOR
C                           TO IMPLEMENT MULTIPLE WIDTH LINES.
C                           IF ON, MULTIPLE LINE WIDTH WILL BE IMPLEMENTED
C                           WITHIN DATAPLOT.  THE LINE WIDTH FOR A
C                           SINGLE LINE DETERMINED BY NEXT COMMAND.
C  SET PEN WIDTH <WIDTH> - SETS PEN WIDTH TO BE USED IN IMPLEMENTING
C                          MULTIPLE LINE WIDTH WITHIN DATAPLOT (0.1 DEFAULT)
 3100 CONTINUE
C
      IF(IPTHSW.EQ.'ON')THEN
        ICSTR(1:14)='SET THICKNESS '
        NCSTR=14
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PPENSW,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:14)='SET THICKNESS '
        NCSTR=14
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PTHIC2,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
C  JANUARY, 1988: TWO SET COMMANDS FOR LINE THICKNESS.
C  SET THICKNESS <ON/OFF> - IF OFF, LINE WIDTH IS SET TO THE
C                           REQUESTED VALUE, UP TO THE POST PROCESSOR
C                           TO IMPLEMENT MULTIPLE WIDTH LINES.
C                           IF ON, MULTIPLE LINE WIDTH WILL BE IMPLEMENTED
C                           WITHIN DATAPLOT.  THE LINE WIDTH FOR A
C                           SINGLE LINE DETERMINED BY NEXT COMMAND.
C  SET PEN WIDTH <WIDTH> - SETS PEN WIDTH TO BE USED IN IMPLEMENTING
C                          MULTIPLE LINE WIDTH WITHIN DATAPLOT (0.1 DEFAULT)
 3200 CONTINUE
C
      IF(IPTHSW.EQ.'ON')THEN
        ICSTR(1:5)='SETH '
        NCSTR=5
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PPENSW,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:5)='SETH '
        NCSTR=5
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(PTHIC2,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM            CASE                   **
C               **  LINEWIDTH <NUMBER>                              **
C               **  NOTE THAT LINE WIDTH SPECIFICATION MODE IS SET  **
C               **  TO ABSOLUTE IN "GRINDE".  THIS CORRESPONDS TO   **
C               **  THE DATAPLOT MEANING (I.E., 0.1 IS A PERCENTAGE **
C               **  OF THE TOTAL (100 PER CENT) VERTICAL SIZE OR    **
C               **  VDC UNITS.                                      **
C               **  NOTE: THE ABSOLUTE MODE DESCRIBED IN THE STANDARD*
C               **        DOES NOT SEEM TO BE SUPPORTED.  THERE IS  **
C               **        AN "ABSTRACT" MODE, BUT I CAN NOT FIND    **
C               **        DOCUMENTATION ON WHAT THIS MEANS.  IT MAY **
C               **        BE A REPLACEMENT FOR ABSOLUTE, BUT I AM   **
C               **        NOT SURE.  FOR NOW, USE SCALED MODE WHICH **
C               **        SPECIFIES LINE WIDTH AS A MULTIPLE OF THE **
C               **        NOMINAL DEVICE LINE WIDTH.                **
C               ******************************************************
C
 3300 CONTINUE
C
      IF(IPTHSW.EQ.'ON')THEN
        ICSTR(1:14)='LINEWIDTH 1.0;'
        NCSTR=14
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        ICSTR(1:10)='LINEWIDTH '
        NCSTR=10
        ASCALE=PTHIC2/PPENSW
        NCHTOT=10
        NCHDEC=5
        CALL GRTRRE(ASCALE,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(21:21)=';'
        NCSTR=21
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  LINE THICKNESS IS IMPLEMENTED IN SOFTWARE       **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(IOPGOF.EQ.'OFF')GOTO9000
      ICODE=1
      ISTYLE=0
#ifdef HAVE_OPENGL
      CALL GLATTR(ICODE,ISTYLE,PTHIC2)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN           CASE                    **
C               ******************************************************
C
 6600 CONTINUE
#ifdef HAVE_SUN
      CALL cflnwidth(pthick)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS         CASE                    **
C               ******************************************************
C
 8100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT    CASE                    **
C               **  <NUMBER> SETLINEWIDTH                           **
C               ******************************************************
C
 8600 CONTINUE
      NCHTOT=5
      NCSTR=0
      ITEMP=INT(PTHIC2)
      CALL GRTRIN(ITEMP,NCHTOT,ICSTR,NCSTR)
      ICSTR(6:18)=' setlinewidth'
      NCSTR=18
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC          CASE                    **
C               **  FOR QUIC, THE PEN WIDTH IS SET ONLY AFTER       **
C               **  VECTOR GRAPHICS MODE IS ENTERED IN "GRDRLI" OR  **
C               **  "GRDRPL".  NOTHING DONE HERE                    **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11           CASE                    **
C               ******************************************************
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
      ICODE=1
      INDEX=INT(PTHIC2+0.5)
      CALL XLATTR(INDEX,ICODE)
#endif
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 124.         **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 320-321.                   **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 30.         **
C               *************************************************
C
10000 CONTINUE
CTURB CALL TCSETH(PTHICK)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               **  LINE THICKNESS HANDLED IN SOFTWARE              **
C               ******************************************************
C
12000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
COLD  CALL aqtSetLinewidth(PTHIC2)
      NPATT=0
      DO13501I=1,8
        XPATT(I)=-1.0
13501 CONTINUE
      IOPT=2
#ifdef HAVE_AQUA
      CALL aqsepa(XPATT,NPATT,PTHIC2,IOPT)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      IF(ILATLT.EQ.'HARD')THEN
        IF(PTHIC2.GE.0.25)THEN
          ICSTR(1:1)=IBASLC
          ICSTR(2:11)='Thicklines'
          NCSTR=11
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSEIF(PTHIC2.GE.0.15)THEN
          ICSTR(1:1)=IBASLC
          ICSTR(2:11)='thicklines'
          NCSTR=11
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ELSE
          ICSTR(1:1)=IBASLC
          ICSTR(2:10)='thinlines'
          NCSTR=10
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ENDIF
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'SETH')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRSETH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9019)IERRG4
 9019   FORMAT('IERRG4 = ',A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRCA(ITYPE,ICASE,JCASE)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A CASE
C              (UPPER OR LOWER) GIVEN IN CHARACTER REPRESENTATI INTO A
C              NUMERIC REPRESENTATION THAT WILL BE UNDERSTOOD BY A
C              SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --APRIL    2009. THIS CODE DOES NOT CONTAIN ANY
C                                      DEVICE SPECIFIC CODE, SO REMOVE
C                                      DEVICE DEPENDENT BRANCHES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ITYPE
      CHARACTER*4 ICASE
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRCA')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRCA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ITYPE,ICASE,IMANUF,IMODEL,IBUGG4
   52   FORMAT('ITYPE,ICASE,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               *************************************
C               **  STEP 0--                       **
C               **  DEFINE CASE                    **
C               **  FOR A GENERAL GRAPHICS DEVICE  **
C               *************************************
C
      JCASE=1
      IF(ICASE.EQ.'UPPE')JCASE=1
      IF(ICASE.EQ.'LOWE')JCASE=2
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRCA')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRCA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9019)IERRG4
 9019   FORMAT('IERRG4 = ',A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRCO(ICASE,ICOL,JCOL)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A COLOR
C              GIVEN IN CHARACTER REPRESENTATION INTO A NUMERIC
C              REPRESENTATION THAT WILL BE UNDERSTOOD BY A SPECIFIC
C              GRAPHICS DEVICE.
C     NOTE--THIS SUBROUTINE IS NEEDED FOR COLOR DEVICES ONLY.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1990. PEN MAP FOR HPGL, ZETA, CALCOMP (ALAN)
C     UPDATED         --JULY     1990. SOME HP-26XX TERMINALS SUPPORT COLOR
C     UPDATED         --AUGUST   1990. SUPPORT GRAYSCALE ON POSTSCRIPT (ALAN)
C     UPDATED         --JANUARY  1991. ADD COLOR SUPPORT FOR REGIS (ALAN)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JUNE     1991. ADDITIONAL COLOR SUPPORT FOR X11 (ALAN)
C     UPDATED         --AUGUST   1992. SIGNIFICANT CHANGES TO SUPPORT A
C                                      CONSISTENT SET OF COLORS AND
C                                      INDICES (ALAN)
C                                      ALSO MAKE TABLE-DRIVEN FOR
C                                      BETTER EFFICIENCY.
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --MAY      2012. ADD SUPPORT FOR:
C                                         R0 - R255
C                                         B0 - B255
C                                         G0 - G255
C                                      THIS ADDS SHADING TO PRIMRY COLORS
C                                      SIMILAR TO GRAY SCALE.  A BIT OF A
C                                      STOP GAP TO IMPLEMENTING FULL RGB
C                                      SUPPORT.
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      GRAPHICS DEVICES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 ICOL
      CHARACTER*4 CJUNK
C
      PARAMETER (MAXCLR=163)
      CHARACTER*4 ICOLNM(MAXCLR)
C
      INTEGER J4027(MAXCLR)
      INTEGER J4105(MAXCLR)
      INTEGER JPLOT4(MAXCLR)
      INTEGER JPLOT8(MAXCLR)
      INTEGER J2622(MAXCLR)
      INTEGER JCGM(MAXCLR)
      INTEGER JSUN(MAXCLR)
      INTEGER JX11(MAXCLR)
      INTEGER JREGIS(MAXCLR)
      INTEGER JPC(MAXCLR)
      INTEGER JLAHEY(MAXCLR)
      INTEGER JWINT(MAXCLR)
C
      CHARACTER*4 ISUBN0
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOP2.INC'
C
C  AUGUST 1992.  DEFINE COLOR TABLES.
C
C  ROW 1: WHIT, BLAC, RED , BLUE, GREE, MAGE, ORAN, CYAN, YELL, YGRE
C  ROW 2: DGRE, LBLU, VBLU, VRED, DGRA, LGRA, AQUA, BROW, CABL, CORA
C  ROW 3: CBLU, DOGR, DORC, DSBL, DTUR, FIRE, FGRE, GOLD, GLDR, GRAY
C  ROW 4: IRED, KHAK, DMGR, LSBL, LGRE, MARO, MAQU, MBLU, MFGR, MGLD
C  ROW 5: MORC, MSGR, MSBL, MSPG, MTUR, MVRD, MDBL, NAVY, ORED, ORCH
C  ROW 6: PGRE, PINK, PLUM, PURP, SALM, SGRE, SIEN, SKBL, SBLU, SPGR
C  ROW 7: STBL, TAN , THIS, TURQ, VIOL, WHEA, GYEL, LCYA, BLU2, BLU3
C  ROW 8: BLU4, CYA2, CYA3, CYA4, GRE2, GRE3, GRE4, YEL2, YEL3, YEL4
C  ROW  9: ORA2, ORA3, ORA4, RED2, RED3, RED4, MAG1, MAG2, MAG3, LCOR,
C  ROW 10: DSAL, LSAL, CRIM, DRED, LPIN, HPIN, DPIN, PVRE, TOMA, DORA,
C  ROW 11: LYEL, LCHI, PAPW, MOCA, PPUF, PGRO, DKHA, LAVE, FUCH, MPUR,
C  ROW 12: AMET, DVIO, DMAG, INDI, CHAR, LAGR, LIME, LIGR, ODRA, OLIV,
C  ROW 13: DSGR, LSGR, DCYA, TEAL, PTUR, AQUA, PBLU, LSKB, DSKB, DODB,
C  ROW 14: RBLU, DBLU, CORN, BLAL, BISQ, NAVW, BWOO, ROSB, SANB,
C  ROW 15: DGRO, PERU, CHOC, SADB, SNOW, HONE, MCRE, AZUR, ABLU, GHOS,
C  ROW 16: WSMO, SEAS, BEIG, OLDL, FLOR, IVOR, ANIT, LINE, MROS, GAIN,
C  ROW 17: SILV, DAGR, LSLG, SLGR
C
      DATA (ICOLNM(I),I=1,50)/
     1 'WHIT', 'BLAC', 'RED ', 'BLUE', 'GREE', 'MAGE', 'ORAN', 'CYAN',
     X 'YELL', 'YGRE',
     2 'DGRE', 'LBLU', 'VBLU', 'VRED', 'DGRA', 'LGRA', 'AQUA', 'BROW',
     X 'CABL', 'CORA',
     3 'CBLU', 'DOGR', 'DORC', 'DSBL', 'DTUR', 'FIRE', 'FGRE', 'GOLD',
     X 'GLDR', 'GRAY',
     4 'IRED', 'KHAK', 'DMGR', 'LSBL', 'LGRE', 'MARO', 'MAQU', 'MBLU',
     X 'MFGR', 'MGLD',
     5 'MORC', 'MSGR', 'MSBL', 'MSPG', 'MTUR', 'MVRD', 'MDBL', 'NAVY',
     X 'ORED', 'ORCH'/
      DATA (ICOLNM(I),I=51,100)/
     6 'PGRE', 'PINK', 'PLUM', 'PURP', 'SALM', 'SGRE', 'SIEN', 'SKBL',
     X 'SBLU', 'SPGR',
     7 'STBL', 'TAN ', 'THIS', 'TURQ', 'VIOL', 'WHEA', 'GYEL', 'LCYA',
     X 'BLU2', 'BLU3',
     8 'BLU4', 'CYA2', 'CYA3', 'CYA4', 'GRE2', 'GRE3', 'GRE4', 'YEL2',
     X 'YEL3', 'YEL4',
     9 'ORA2', 'ORA3', 'ORA4', 'RED2', 'RED3', 'RED4', 'MAG2', 'MAG3',
     X 'MAG4', 'LCOR', 
     * 'DSAL', 'LSAL', 'CRIM', 'DRED', 'LPIN', 'HPIN', 'DPIN', 'PVRE',
     X 'TOMA', 'DORA'/
      DATA (ICOLNM(I),I=101,149)/
     A 'LYEL', 'LCHI', 'PAPW', 'MOCA', 'PPUF', 'PGRO', 'DKHA', 'LAVE',
     X 'FUCH', 'MPUR', 
     B 'AMET', 'DVIO', 'DMAG', 'INDI', 'CHAR', 'LAGR', 'LIME', 'LIGR',
     X 'ODRA', 'OLIV', 
     C 'DSGR', 'LSGR', 'DCYA', 'TEAL', 'PTUR', 'AQUA', 'PBLU', 'LSKB',
     X 'DSKB', 'DODB', 
     D 'RBLU', 'DBLU', 'CORN', 'BLAL', 'BISQ', 'NAVW', 'BWOO',
     X 'ROSB', 'SANB', 
     E 'DGRO', 'PERU', 'CHOC', 'SADB', 'SNOW', 'HONE', 'MCRE', 'AZUR',
     X 'ABLU', 'GHOS'/ 
      DATA (ICOLNM(I),I=150,MAXCLR)/
     F 'WSMO', 'SEAS', 'BEIG', 'OLDL', 'FLOR', 'IVOR', 'ANIT', 'LINE',
     X 'MROS', 'GAIN', 
     G 'SILV', 'DGRA', 'LSLG', 'SLGR'/
C
C  TEKTRONIX 4027
C
C  WHITE   = 0
C  RED     = 1
C  GREEN   = 2
C  BLUE    = 3
C  YELLOW  = 4
C  ORANGE  = 5
C  PURPLE  = 6
C  BLACK   = 7
C
      DATA (J4027(I),I=1,MAXCLR)/
     1  0,  7,  1,  3,  2,  6,  5,  3,  4,  4,
     2  2,  3,  3,  1,  7,  0,  3,  5,  3,  1,
     3  3,  2,  6,  3,  6,  4,  2,  4,  4,  7,
     4  1,  4,  0,  3,  2,  1,  3,  3,  2,  4,
     5  6,  2,  3,  2,  6,  6,  3,  3,  5,  6,
     6  2,  1,  6,  6,  4,  2,  6,  3,  3,  2,
     7  3,  4,  4,  6,  6,  4,  2,  3,  3,  3,
     8  3,  3,  3,  3,  2,  2,  2,  4,  4,  4,
     9  5,  5,  5,  1,  1,  1,  6,  6,  6,  1,
     *  1,  1,  1,  1,  1,  1,  1,  1,  5,  5,
     A  4,  4,  4,  4,  4,  4,  4,  6,  6,  6,
     C  6,  6,  6,  6,  2,  2,  2,  2,  2,  2,
     C  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
     D  3,  3,  1,  1,  1,  1,  1,  1,  1,  1,
     E  1,  1,  1,  7,  7,  7,  7,  7,  7,  7,
     F  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
     G  7,  7,  7/
C
C  TEKTRONIX 4105, GENERAL, GENERAL CODED
C
C  BLACK  = 0
C  WHITE  = 1
C  RED    = 2
C  GREEN  = 3
C  BLUE   = 4
C  CYAN   = 5
C  MAGENTA= 6
C  YELLOW = 7
C
      DATA (J4105(I),I=1,MAXCLR)/
     1  1,  0,  2,  4,  3,  6,  2,  5,  7,  7,
     2  3,  4,  4,  2,  0,  1,  4,  2,  4,  2,
     3  4,  3,  6,  4,  6,  7,  3,  7,  7,  0,
     4  2,  7,  1,  4,  3,  2,  4,  4,  3,  7,
     5  6,  3,  4,  3,  6,  6,  4,  4,  2,  6,
     6  3,  2,  6,  6,  7,  3,  6,  4,  4,  3,
     7  4,  7,  7,  6,  6,  7,  3,  5,  4,  4,
     8  4,  5,  5,  5,  3,  3,  3,  7,  7,  7,
     9  5,  5,  5,  1,  1,  1,  6,  6,  6,  2,
     *  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     A  7,  7,  7,  7,  7,  7,  7,  6,  6,  6,
     B  6,  6,  6,  6,  3,  3,  3,  3,  3,  3,
     C  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,
     D  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,
     E  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,
     F  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     G  0,  0,  0/
C
C  PLOTTERS WITH 4 PENS (TEKTRONIX 4662, HP-7221, CALCOMP, ZETA, HP-GL)
C
C  BLACK   = 1
C  RED     = 2
C  BLUE    = 3
C  GREEN   = 4
C
      DATA (JPLOT4(I),I=1,MAXCLR)/
     1  1,  1,  2,  3,  4,  4,  2,  3,  2,  2,
     2  4,  3,  3,  2,  1,  1,  3,  2,  3,  2,
     3  3,  4,  2,  3,  2,  2,  4,  2,  2,  1,
     4  2,  2,  1,  3,  4,  2,  3,  3,  4,  2,
     5  2,  4,  3,  4,  2,  2,  3,  3,  2,  2,
     6  4,  2,  2,  2,  2,  4,  2,  3,  3,  4,
     7  3,  2,  2,  2,  2,  2,  4,  3,  3,  3,
     8  3,  3,  3,  3,  4,  4,  4,  2,  2,  2,
     9  2,  2,  2,  2,  2,  2,  4,  4,  4,  2,
     *  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     A  4,  4,  4,  4,  4,  4,  4,  3,  3,  3,
     B  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,
     C  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,
     D  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,
     E  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,
     F  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     G  1,  1,  1/
C
C  PLOTTERS WITH 8 PENS (HP-GL, CALCOMP, ZETA)
C
C  BLACK   = 1
C  RED     = 2
C  BLUE    = 3
C  GREEN   = 4
C  MAGENTA = 5
C  ORANGE  = 6
C  CYAN    = 7
C  YELLOW  = 8
C
      DATA (JPLOT8(I),I=1,MAXCLR)/
     1  1,  1,  2,  3,  4,  5,  6,  7,  8,  8,
     2  4,  7,  3,  2,  1,  1,  3,  8,  3,  2,
     3  3,  4,  5,  3,  5,  8,  4,  8,  8,  1,
     4  2,  8,  1,  3,  4,  5,  7,  3,  4,  8,
     5  5,  4,  7,  4,  5,  5,  3,  3,  6,  5,
     6  4,  2,  5,  5,  8,  4,  5,  7,  3,  4,
     7  3,  8,  8,  5,  5,  8,  4,  7,  3,  3,
     8  3,  7,  7,  7,  4,  4,  4,  8,  8,  8,
     9  6,  6,  6,  2,  2,  2,  5,  5,  5,  2,
     *  2,  2,  2,  2,  2,  2,  2,  2,  6,  6,
     A  8,  8,  8,  8,  8,  8,  8,  5,  5,  5,
     B  5,  5,  5,  5,  4,  4,  4,  4,  4,  4,
     C  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,
     D  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,
     E  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,
     F  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     G  1,  1,  1/
C
C  HP-2622 AND RELATED TERMINALS
C
C  BLACK   = 0
C  RED     = 1
C  GREEN   = 2
C  YELLOW  = 3
C  BLUE    = 4
C  MAGENTA = 5
C  CYAN    = 6
C  WHITE   = 7
C
      DATA (J2622(I),I=1,MAXCLR)/
     1  7,  0,  1,  4,  2,  5,  3,  6,  3,  3,
     2  2,  6,  4,  1,  0,  7,  6,  3,  4,  1,
     3  4,  2,  5,  4,  5,  3,  2,  3,  3,  0,
     4  1,  3,  7,  6,  2,  5,  6,  4,  2,  3,
     5  5,  2,  6,  2,  5,  5,  4,  4,  3,  5,
     6  2,  1,  5,  5,  3,  2,  5,  6,  4,  2,
     7  4,  3,  3,  5,  5,  3,  2,  6,  4,  4,
     8  4,  6,  6,  6,  2,  2,  2,  3,  3,  3,
     9  3,  3,  3,  1,  1,  1,  5,  5,  5,  1,
     *  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     A  3,  3,  3,  3,  3,  3,  3,  5,  5,  5,
     B  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,
     C  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,
     D  4,  4,  1,  1,  1,  1,  1,  1,  1,  1,
     E  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,
     F  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     G  0,  0,  0/
C
C  DIRECT RGB DEVICES (CGM, POSTSCRIPT)
C
C  THESE DEVICES ALLOW THE RGB VALUE TO BE SPECIFIED DIRECTLY,
C  SO SIMPLY MAP TO SAME INDEX.  GRSECO ROUTINE WILL THEN USE
C  A TABLE OF RGB VALUES.
C
      DATA (JCGM(I),I=1,MAXCLR)/
     1   1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
     2  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     3  21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
     4  31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
     5  41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
     6  51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
     7  61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
     8  71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
     9  81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
     *  91, 92, 93, 94, 95, 96, 97, 98, 99,100,
     A 101,102,103,104,105,106,107,108,109,110,
     B 111,112,113,114,115,116,117,118,119,120,
     B 121,122,123,124,125,126,127,128,129,130,
     C 131,132,133,134,135,136,137,138,139,130,
     D 141,142,143,144,145,146,147,148,149,140,
     E 151,152,153,154,155,156,157,158,159,150,
     F 161,162,163/
C
C  SUN
C
C  RED     = 1
C  GREEN   = 2
C  BLUE    = 3
C  YELLOW  = 4
C  BLACK   = 5
C  MAGENTA = 6
C  WHITE   = 7
C  DARK    = 0  (ONLY MAP DARK GRAY TO THIS, OTHERWISE USE BLACK)
C
      DATA (JSUN(I),I=1,MAXCLR)/
     1  7,  5,  1,  3,  2,  6,  4,  3,  4,  4,
     2  2,  3,  3,  1,  0,  7,  3,  4,  3,  1,
     3  3,  2,  6,  3,  6,  4,  2,  4,  4,  0,
     4  1,  4,  7,  3,  2,  6,  3,  3,  2,  4,
     5  6,  2,  3,  2,  6,  6,  3,  3,  1,  6,
     6  2,  1,  6,  6,  4,  2,  6,  3,  3,  2,
     7  3,  4,  4,  6,  6,  4,  2,  3,  3,  3,
     8  3,  3,  3,  3,  2,  2,  2,  4,  4,  4,
     9  4,  4,  4,  1,  1,  1,  6,  6,  6,  1,
     *  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     A  4,  4,  4,  4,  4,  4,  4,  6,  6,  6,
     B  6,  6,  6,  6,  2,  2,  2,  2,  2,  2,
     C  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
     D  3,  3,  1,  1,  1,  1,  1,  1,  1,  1,
     E  1,  1,  5,  5,  5,  5,  5,  5,  5,  5,
     F  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
     G  5,  5,  5/
C
C  X11
C
C  SUPPORTS FULL SET OF COLORS
C
      DATA (JX11(I),I=1,MAXCLR)/
     1   1,  0,  4,  5,  2,  6,  8,  7,  3,  9,
     2  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
     3  20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
     4  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
     5  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
     6  50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
     7  60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
     8  70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
     9  80, 81, 82, 83, 84, 85, 86, 87, 88, 90,
     *  91, 92, 93, 94, 95, 96, 97, 98, 99,100,
     A 101,102,103,104,105,106,107,108,109,110,
     B 111,112,113,114,115,116,117,118,119,120,
     B 121,122,123,124,125,126,127,128,129,130,
     C 131,132,133,134,135,136,137,138,139,130,
     D 141,142,143,144,145,146,147,148,149,140,
     E 151,152,153,154,155,156,157,158,159,150,
     F 161,162,163/
C
C  REGIS
C
C  SUPPORTS FULL SET OF COLORS (WITH 1 OR 2 OMISSIONS)
C
      DATA (JREGIS(I),I=1,MAXCLR)/
     1 62,  3, 47,  4, 23, 39, 41, 18, 63, 64,
     2 24,  8, 60, 51, 35, 37,  1,  3,  5, 17,
     3  6, 25, 43,  7, 57, 19, 26, 20, 21, 35,
     4 48, 38, 36,  9, 27, 40,  2, 10, 28, 22,
     5 44, 29, 11, 30, 58, 49, 12, 13, 50, 42,
     6 31, 45, 46, 57, 52, 32, 53, 14, 15, 33,
     7 16, 54, 55, 56, 59, 61, 34, 18,  4,  4,
     8  4, 18, 18, 18, 23, 23, 23, 63, 63, 63,
     9 41, 41, 41, 47, 47, 47, 39, 39, 39,  3,
     *  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     A  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     B  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     C  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     D  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     E  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     F  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     G  3,  3,  3/
C
C  IBM-PC (TURBO-C DRIVER)
C
C  BLACK   = 0
C  BLUE    = 1
C  GREEN   = 2
C  CYAN    = 3
C  RED     = 4
C  MAGENTA = 5
C  BROWN   = 6
C  GRAY    = 7
C  DGRA    = 8
C  LBLUE   = 9
C  LGRAY   =10
C  LCYAN   =11
C  LRED    =12
C  LMAGE   =13
C  YELLOW  =14
C  WHITE   =15
C
C  LRED,  LMAGE ARE NOT IN THE SUPPORTED COLOR LIST.
C  LRED MAPS TO RED2
C  LMAG MAPS TO MAG2
C
      DATA (JPC(I),I=1,MAXCLR)/
     1 15,  0,  4,  1,  2,  5, 14,  3, 14, 14,
     2  2,  9,  1,  4,  8, 10,  3,  6,  9, 12,
     3  1,  2,  5,  1,  5, 14,  2, 14, 14,  7,
     4 12, 14, 10,  9,  2,  5, 11,  9,  2, 14,
     5  5,  2,  9,  2, 13,  5,  1,  1,  4, 13,
     6  2,  4,  5,  5, 14,  2,  5, 11,  1,  2,
     7  1,  6, 14,  5,  5, 14,  2, 11,  1,  1,
     8  1,  3,  3,  3,  2,  2,  2, 14, 14, 14,
     9 14, 14, 14,  4,  4,  4,  5,  5,  5,  4,
     *  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     A 14, 14, 14, 14, 14, 14, 14,  5,  5,  5,
     B  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,
     C  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,
     D  1,  1,  6,  6,  6,  6,  6,  6,  6,  6,
     E  6,  6,  0,  0,  0,  0,  0,  0,  0,  0,
     F  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     G  0,  0,  0/
C
C  IBM-PC  (LAHEY DRIVER)
C
C  BLACK   = 0
C  BLUE    = 1
C  GREEN   = 2
C  CYAN    = 3
C  RED     = 4
C  MAGENTA = 5
C  BROWN   = 6
C  GRAY    = 7
C  DGRA    = 8
C  LBLUE   = 9
C  LGRAY   =10
C  LCYAN   =11
C  LRED    =12
C  LMAGE   =13
C  YELLOW  =14
C  WHITE   =15
C
C  LRED,  LMAGE ARE NOT IN THE SUPPORTED COLOR LIST.
C  LRED MAPS TO RED2
C  LMAG MAPS TO MAG2
C
      DATA (JLAHEY(I),I=1,MAXCLR)/
     1 15,  0,  4,  1,  2,  5, 14,  3, 14, 14,
     2  2,  9,  1,  4,  8, 10,  3,  6,  9, 12,
     3  1,  2,  5,  1,  5, 14,  2, 14, 14,  7,
     4 12, 14, 10,  9,  2,  5, 11,  9,  2, 14,
     5  5,  2,  9,  2, 13,  5,  1,  1,  4, 13,
     6  2,  4,  5,  5, 14,  2,  5, 11,  1,  2,
     7  1,  6, 14,  5,  5, 14,  2, 11,  1,  1,
     8  1,  3,  3,  3,  2,  2,  2, 14, 14, 14,
     9 14, 14, 14,  4,  4,  4,  5,  5,  5,  0,
     *  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     A  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     B  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     C  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     D  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     E  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     F  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     G  0,  0,  0/
C
C  IBM-PC  (LAHEY DRIVER, USING INTERACTOR OR WINTERACTOR)
C          THIS DRIVER SUPPORTS 16 COLORS, WITH EACH COLOR
C          SUPPORTING 16 SHADES.
C
C  WHITE         = 0 - 15
C  LIGHT RED     = 16 - 31
C  DARK  RED     = 32 - 47
C  LIGHT YELLOW  = 48 - 63
C  DARK  YELLOW  = 64 - 79
C  LIGHT GREEN   = 80 - 95
C  DARK  GREEN   = 96 - 111
C  LIGHT CYAN    = 112 - 127
C  DARK  CYAN    = 128 - 143
C  LIGHT BLUE    = 144 - 159
C  DARK  BLUE    = 160 - 175
C  LIGHT MAGENTA = 176 - 191
C  DARK  MAGENTA = 192 - 207
C  BLACK         = 208 - 223
C  DARK  GRAY    = 224 - 239
C  LIGHT GRAY    = 240 - 255
C
      DATA (JWINT(I),I=1,MAXCLR)/
     1   0,223, 47,175,111,207, 31,143, 79, 80,
     2 111,144,207, 47,224,240, 80,223,160, 16,
     3 144,111,207,175, 96, 64, 95, 64, 64, 224,
     4  32, 16,240,144, 80,192, 96,159, 96, 48,
     5  32, 96,160, 96,192,192,143,128, 32, 32,
     6  80, 16,176,207, 31, 95,127,159,160, 95,
     7 160, 16, 48,176,207, 63, 64,112,164,168,
     8 172,132,136,140,100,104,108, 68, 72, 76,
     9  20, 24, 28, 36, 40, 44,196,200,204,223,
     * 223,223,223,223,223,223,223,223,223,223,
     A 223,223,223,223,223,223,223,223,223,223,
     B 223,223,223,223,223,223,223,223,223,223,
     C 223,223,223,223,223,223,223,223,223,223,
     D 223,223,223,223,223,223,223,223,223,223,
     E 223,223,223,223,223,223,223,223,223,223,
     F 223,223,223,223,223,223,223,223,223,223,
     G 223,223,223/
C
C-----START POINT-----------------------------------------------------
C
C  AUGUST 1992.  BE CONSISTENT IN COLORS RECOGNIZED AND IN MAPPING
C  INDEX TO COLOR.  EXCEPTION IS THAT PEN PLOTTERS WILL STILL TREAT
C  INDEX AS A SLOT NUMBER (SINCE SLOT NUMBERS MAY BE FILLED WITH AN
C  ARBITRARY COLOR).
C
C     *****************************************************************
C     **  DATAPLOT SUPPORTS THE FOLLOWING COLORS.  THE TABLE SHOWS   **
C     **  THE DATAPLOT 4 CHARACTER NAME AND ASSOCIATED INDEX NUMBER. **
C     **  THE SUPPORTED COLORS ARE THE "NAMED" COLORS IN THE COLOR   **
C     **  DATABASE IN RELEASE 3 OF X11.  A FEW ADDITIONS ARE ADDED   **
C     **  FROM RELEASE 4 OF X11 (BUT NOT THE ENTIRE SET).  THE SOURCE**
C     **  IS APPENDIX D OF THE XLIB PROGRAMMERS REFERENCE (VOL. II)  **
C     **  FROM O'REILLY AND ASSOCIATES.  EVEN THOUGH WE ARE USING    **
C     **  THE RELEASE 3 LIST, USE THE RGB VALUES FROM RELEASE SINCE  **
C     **  RELEASE 3 WAS TUNED SPECIFICALLY TO A VT-240 WHILE RELEASE **
C     **  4 VALUES SHOULD BE A LITTLE MORE ROBUST.  HOWEVER, THE     **
C     **  SAME RGB VALUES CAN PRODUCE DIFFERENT COLORS ON DIFFERENT  **
C     **  HARDWARE.                                                  **
C     **                                                             **
C     **  X11 SUPPORTS THE FULL SET OF COLORS (SOME IMPLEMENTATIONS  **
C     **      MAY NOT, UNSUPPORTED COLORS MAPPED TO BLACK/WHITE).    **
C     **  POSTSCRIPT ALLOWS RGB VALUES TO BE SPECIFIED DIRECTLY.     **
C     **  CGM ALLOWS A COLOR TABLE TO BE DEFINED.                    **
C     **  REGIS SUPPORTS 64 OF THE 67 COLORS FROM RELASE 3, NONE OF  **
C     **      THE ADDITIONS OF RELEASE 4.                            **
C     **  MOST OTHER TERMINALS AND PLOTTERS SUPPORT 4 TO 8 COLORS,   **
C     **      UNAVAILABLE COLORS ARE MAPPED TO THE (HOPEFULLY)       **
C     **      CLOSEST SUPPORTED COLOR.  PENPLOTTERS ASSUME PEN SLOTS **
C     **      CONTAIN THE FOLLOWING COLORS:                          **
C     **      4 PENS            8 PENS:                              **
C     **      ======            =======                              **
C     **      BLACK             BLACK                                **
C     **      RED               RED                                  **
C     **      BLUE              BLUE                                 **
C     **      GREEN             GREEN                                **
C     **                        MAGENTA                              **
C     **                        ORANGE                               **
C     **                        CYAN                                 **
C     **                        YELLOW                               **
C     **                                                             **
C     **   USE THE <HPGL/CALCOMP/ZETA> PEN MAP COMMANDS IF A DIFFERENT*
C     **   ORDER IS USED.                                            **
C     **                                                             **
C     **   THE FOLLOWING IS THE LIST OF CURRENLT RECOGNIZED COLORS.  **
C     **                                                             **
C     **  COLOR             INDEX     DATAPLOT NAME    RGB           **
C     **  =====             =====     =============    ===           **
C     **  WHITE               0       WHIT             255, 255, 255 **
C     **  BLACK               1       BLAC               0,   0,   0 **
C     **  RED                 2       RED              255,   0,   0 **
C     **  BLUE                3       BLUE               0,   0, 255 **
C     **  GREEN               4       GREE               0, 255,   0 **
C     **  MAGENTA             5       MAGE             255,   0, 255 **
C     **  ORANGE              6       ORAN             255, 165,   0 **
C     **  CYAN                7       CYAN               0, 255, 255 **
C     **  YELLOW              8       YELL             255, 255,   0 **
C     **  YELLOW GREEN        9       YGRE             154, 205,  50 **
C     **  DARK GREEN         10       DGRE               0, 100,   0 **
C     **  LIGHT BLUE         11       LBLU             173, 216, 230 **
C     **  BLUE VIOLET        12       VBLU             138,  43, 226 **
C     **  VIOLET RED         13       VRED             208,  32, 144 **
C     **  DARK SLATE GRAY    14       DGRE,DGRA,DGRY    47,  79,  79 **
C     **  LIGHT GRAY         15       LGRE,LGRA,LGRY   211, 211, 211 **
C     **  AQUAMARINE         16       AQUA             127, 255, 212 **
C     **  BROWN              17       BROWN            165,  42,  42 **
C     **  CADET BLUE         18       CABL              95, 158, 160 **
C     **  CORAL              19       CORA             255, 127,  80 **
C     **  CORNFLOWER BLUE    20       CBLU             100, 149, 237 **
C     **  DARK OLIVE GREEN   21       DOGR              85, 107,  47 **
C     **  DARK ORCHID        22       DORC             153,  50, 204 **
C     **  DARK SLATE BLUE    23       DSBL              72,  61, 139 **
C     **  DARK TURQUOISE     24       DTUR               0, 206, 209 **
C     **  FIREBRICK          25       FIRE             178,  34,  34 **
C     **  FOREST GREEN       26       FGRE              34, 139,  34 **
C     **  GOLD               27       GOLD             255, 215,   0 **
C     **  GOLDENROD          28       GLDR             218, 165,  32 **
C     **  GRAY               29       GRAY, GREY       192, 192, 192 **
C     **  INDIAN RED         30       IRED, LRED       205,  92,  92 **
C     **  KHAKI              31       KHAK             240, 230, 140 **
C     **  DIM GRAY           32       DMGR             105, 105, 105 **
C     **  LIGHT STEEL BLUE   33       LSBL             176, 196, 222 **
C     **  LIME GREEN         34       LGRE              50, 205,  50 **
C     **  MAROON             35       MARO             176,  48,  96 **
C     **  MEDIUM AQUAMARINE  36       MAQU             102, 205, 170 **
C     **  MEDIUM BLUE        37       MBLU               0,   0, 205 **
C     **  MEDIUM FOREST GREEN38       MFGR             107, 142,  35 **
C     **  LIGHT GOLDENROD YEL39       MGLD             250, 250, 210 **
C     **  MEDIUM ORCHID      40       MORC             186,  85, 211 **
C     **  MEDIUM SEA GREEN   41       MSGR              60, 179, 113 **
C     **  MEDIUM SLATE BLUE  42       MSBL             123, 104, 238 **
C     **  MEDIUM SPRING GREEN43       MSPG               0, 250, 154 **
C     **  MEDIUM TURQUOISE   44       MTUR, LMAG        72, 209, 204 **
C     **  MEDIUM VIOLET RED  45       MVRD             199,  21, 133 **
C     **  MIDNIGHT BLUE      46       MDBL              25,  25, 112 **
C     **  NAVY BLUE          47       NAVY               0,   0, 128 **
C     **  ORANGE RED         48       ORED             255,  69,   0 **
C     **  ORCHID             49       ORCH             218, 112, 214 **
C     **  PALE GREEN         50       PGRE             152, 251, 152 **
C     **  PINK               51       PINK             255, 192, 203 **
C     **  PLUM               52       PLUM             221, 160, 221 **
C     **  PURPLE             53       PURP             160,  32, 240 **
C     **  SALMON             54       SALM             250, 128, 114 **
C     **  SEA GREEN          55       SGRE              46, 139,  87 **
C     **  SIENNA             56       SIEN             160,  82,  45 **
C     **  SKY BLUE           57       SKBL, SKYB,      135, 206, 235 **
C     **  SLATE BLUE         58       SBLU             106,  90, 205 **
C     **  SPRING GREEN       59       SPGR               0, 255, 127 **
C     **  STEEL BLUE         60       STBL              70, 130, 180 **
C     **  TAN                61       TAN              210, 180, 140 **
C     **  THISTLE            62       THIS             216, 191, 216 **
C     **  TURQUOISE          63       TURQ              64, 224, 208 **
C     **  VIOLET             64       VIOL             238, 130, 238 **
C     **  WHEAT              65       WHEA             245, 222, 179 **
C     **  GREEN YELLOW       66       GYEL             173, 255,  47 **
C     **  LIGHT CYAN         67       LCYA             224, 255, 255 **
C     **  BLUE2              68       BLU2               0,   0, 238 **
C     **  BLUE3              69       BLU3               0,   0, 205 **
C     **  BLUE4              70       BLU4               0,   0, 139 **
C     **  CYAN2              71       CYA2               0, 238, 238 **
C     **  CYAN3              72       CYA3               0, 205, 205 **
C     **  CYAN4              73       CYA4               0, 139, 139 **
C     **  GREEN2             74       GRE2               0, 238,   0 **
C     **  GREEN3             75       GRE3               0, 205,   0 **
C     **  GREEN4             76       GRE4               0, 139,   0 **
C     **  YELLOW2            77       YEL2             238, 238,   0 **
C     **  YELLOW3            78       YEL3             205, 205,   0 **
C     **  YELLOW4            79       YEL4             139, 139,   0 **
C     **  ORANGE2            80       ORA2             238, 154,   0 **
C     **  ORANGE3            81       ORA3             205, 133,   0 **
C     **  ORANGE4            82       ORA4             139,  90,   0 **
C     **  RED2               83       RED2, LRED       238,   0,   0 **
C     **  RED3               84       RED3             205,   0,   0 **
C     **  RED2               85       RED4             139,   0,   0 **
C     **  MAGENTA2           86       MAG2, LMAG       238,   0, 238 **
C     **  MAGENTA3           87       MAG3             205,   0, 205 **
C     **  MAGENTA4           88       MAG4             139,   0, 139 **
C     **  LIGHT CORAL        89       LCOR             240, 128, 128 **
C     **  DARK SALMON        90       DSAL             233, 150, 122 **
C     **  LIGHT SALMON       91       LSAL             255, 150, 122 **
C     **  CRIMSON            92       CRIM             220,  20,  60 **
C     **  DARK RED           93       DRED             139,   0,   0 **
C     **  LIGHT PINK         94       LPIN             255, 182, 193 **
C     **  HOT PINK           95       HPIN             255, 105, 180 **
C     **  DEEP PINK          96       DPIN             255,  20, 147 **
C     **  PALE VIOLET RED    97       PVRE             219, 112, 147 **
C     **  TOMATO             98       TOMA             255,  99,  71 **
C     **  DARK ORANGE        99       DORA             255, 140,   0 **
C     **  LIGHT YELLOW      100       LYEL             255, 255, 224 **
C     **  LEMON CHIFON      101       LCHI             255, 250, 205 **
C     **  PAPAYA WHIP       102       PAPW             255, 239, 213 **
C     **  MOCASIN           103       MOCA             255, 228, 181 **
C     **  PEACH PUFF        104       PPUF             255, 218, 185 **
C     **  PALE GOLDENROD    105       PGRO             238, 232, 170 **
C     **  DARK KHAKI        106       DKHA             189, 183, 107 **
C     **  LAVENDER          107       LAVE             230, 230, 250 **
C     **  FUCHSIA           108       FUCH             255,   0, 255 **
C     **  MEDIUM PURPLE     109       MPUR             147, 112, 219 **
C     **  AMETHYST          110       AMET             153, 102, 204 **
C     **  DARK VIOLET       111       DVIO             148,   0, 211 **
C     **  DARK MAGENTA      112       DMAG             139,   0, 139 **
C     **  INDIGO            113       INDI              75,   0, 130 **
C     **  CHARTREUSE        114       CHAR             127, 255,   0 **
C     **  LAWN GREEN        115       LAGR             124, 252,   0 **
C     **  LIME              116       LIME               0, 255,   0 **
C     **  LIGHT GREEN       117       LIGR             144, 238, 144 **
C     **  OLIVE DRAB        118       ODRA             107, 142,  35 **
C     **  OLIVE             119       OLIV             128, 128,   0 **
C     **  DARK SEA GREEN    120       DSGR             143, 188, 143 **
C     **  LIGHT SEA GREEN   121       LSGR              32, 178, 170 **
C     **  DARK CYAN         122       DCYA               0, 139, 139 **
C     **  TEAL              123       TEAL               0, 128, 128 **
C     **  PALE TURQUOISE    124       CHAR             175, 238, 238 **
C     **  AQUA              125       AQUA               0, 255, 255 **
C     **  POWDER BLUE       126       PBLU             176, 224, 230 **
C     **  LIGHT SKY BLUE    127       LSKB             135, 206, 250 **
C     **  DEEP SKY BLUE     128       DSKB               0, 191, 255 **
C     **  DODGER BLUE       129       DODB              30, 144, 255 **
C     **  ROYAL BLUE        130       RBLU              65, 105, 225 **
C     **  DARK BLUE         131       DBLU               0,   0, 139 **
C     **  CORNSILK          132       CORN             255, 248, 220 **
C     **  BLANCHED ALMOND   133       BLAL             255, 235, 205 **
C     **  BISQUE            134       BISQ             255, 228, 196 **
C     **  NAVAJO WHITE      135       NAVW             255, 222, 173 **
C     **  BURLY WOOD        136       BWOO             222, 184, 135 **
C     **  ROSY BROWN        137       ROSB             188, 143, 143 **
C     **  SANDY BROWN       138       SANB             244, 164,  96 **
C     **  DARK GOLDENROD    139       DGRO             184, 134,  11 **
C     **  PERU              140       PERU             205, 133,  63 **
C     **  CHOCOLATE         141       CHOC             210, 105,  30 **
C     **  SADDIE BROWN      142       SADB             139,  69,  19 **
C     **  SNOW              143       SNOW             255, 250, 250 **
C     **  HONEYDEW          144       HONE             240, 255, 240 **
C     **  MINT CREAM        145       MCRE             245, 255, 250 **
C     **  AZURE             146       AZUR             240, 255, 255 **
C     **  ALICE BLUE        147       ABLU             240, 248, 255 **
C     **  GHOST WHITE       148       GHOS             248, 248, 255 **
C     **  WHITE SMOKE       149       WSMO             245, 245, 245 **
C     **  SEA SHELL         150       SEAS             255, 245, 238 **
C     **  BEIGE             151       BEIG             245, 245, 220 **
C     **  OLD LACE          152       OLDL             253, 245, 230 **
C     **  FLORAL WHITE      153       FLOR             255, 250, 240 **
C     **  IVORY             154       IVOR             255, 255, 240 **
C     **  ANTIQUE WHITE     155       ANTI             250, 235, 215 **
C     **  LINEN             156       LINE             250, 240, 230 **
C     **  MISTY ROSE        157       MROS             255, 228, 225 **
C     **  GAINSBORO         158       GAIN             220, 220, 220 **
C     **  SILVER            159       SILV             192, 192, 192 **
C     **  DARK GRAY         160       DAGR             169, 169, 169 **
C     **  LIGHT SLATE GRAY  161       LSLG             119, 136, 153 **
C     **  SLATE GRAY        162       SLGR             112, 128, 144 **
C     **                                                             **
C     **  SUPPORT GRAY SCALE WITH FOLLOWING SCHEME:                  **
C     **  G0     = BLACK                                             **
C     **  G1-G99 = GRAY SCALE FROM BLACK TO WHITE                    **
C     **  G100   = WHITE                                             **
C     **  -1 THROUGH -100 WILL CORRESPOND TO G1 THROUGH G100         **
C     **  CURRENTLY, POSTSCRIPT, X11, AND CGM SUPPORT GRAY SCALE,    **
C     **  OTHER DEVICES WILL MAP TO BLACK OR WHITE                   **
C     **  R0-R255 = LEVELS OF RED FOR DEVICES THAT SUPPORT RGB       **
C     **                                                             **
C     **  SUPPORT GRAY SCALE WITH FOLLOWING SCHEME:                  **
C     **  G0     = BLACK                                             **
C     **  G1-G99 = GRAY SCALE FROM BLACK TO WHITE                    **
C     **  G100   = WHITE                                             **
C     **  -1 THROUGH -100 WILL CORRESPOND TO G1 THROUGH G100         **
C     **  CURRENTLY, POSTSCRIPT, X11, AND CGM SUPPORT GRAY SCALE,    **
C     **  OTHER DEVICES WILL MAP TO BLACK OR WHITE                   **
C     **  R0-R255 = LEVELS OF RED FOR DEVICES THAT SUPPORT RGB       **
C     **  Z0-Z255 = LEVELS OF GREEN FOR DEVICES THAT SUPPORT RGB     **
C     **  B0-B255 = LEVELS OF BLUE FOR DEVICES THAT SUPPORT RGB      **
C     *****************************************************************
C
C     **********************************************
C     **    MAP A COLOR NAME TO AN INDEX FOR THE  **
C     **    GENERIC CASE.                         **
C     **********************************************
C
      JINDEX=-999
C
C  CHECK FOR SUPPORTED NAMES
C
      DO40I=1,MAXCLR
        IF(ICOL.EQ.ICOLNM(I))THEN
          JINDEX=I-1
          GOTO49
        ENDIF
 40   CONTINUE
C
C  CHECK FOR SYNONYMS
C
      IF(ICOL.EQ.'DGRY' .OR. ICOL.EQ.'DGRE')THEN
        JINDEX=14
        ICOL='DGRE'
      ELSEIF(ICOL.EQ.'LGRY')THEN
        JINDEX=15
        ICOL='LGRA'
      ELSEIF(ICOL.EQ.'GREY')THEN
        JINDEX=29
        ICOL='GRAY'
      ELSEIF(ICOL.EQ.'LRED')THEN
        JINDEX=83
        ICOL='IRED'
      ELSEIF(ICOL.EQ.'LMAG')THEN
        JINDEX=44
        ICOL='MTUR'
      ELSEIF(ICOL.EQ.'SKYB')THEN
        JINDEX=57
        ICOL='SKBL'
      ENDIF
C
C  CHECK FOR INDEX (0 THROUGH MAXCLR-1)
C
      CJUNK='    '
      DO1I=0,9
        WRITE(CJUNK(1:1),'(I1)')I
        IF(ICOL(1:4).EQ.CJUNK(1:4))THEN
          JINDEX=I
          GOTO9
        ENDIF
 1    CONTINUE
 9    CONTINUE
      CJUNK='    '
      DO11I=10,MAXCLR-1
        WRITE(CJUNK(1:2),'(I2)')I
        IF(ICOL(1:4).EQ.CJUNK(1:4))THEN
          JINDEX=I
          GOTO19
        ENDIF
 11   CONTINUE
 19   CONTINUE
C
C  CHECK FOR GREY SCALE (G0 - G100 OR -1 THROUGH -100)
C
      IF(ICOL.EQ.'G0')THEN
        JINDEX=1
        GOTO89
      ELSEIF(ICOL.EQ.'G100' .OR. ICOL.EQ.'-100')THEN
        JINDEX=0
        GOTO89
      ELSEIF(ICOL(1:1).EQ.'G'.OR.ICOL(1:1).EQ.'-')THEN
        CJUNK='    '
        DO21I=1,9
          WRITE(CJUNK(1:1),'(I1)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JINDEX=-I
            GOTO89
          ENDIF
 21     CONTINUE
C
        CJUNK='    '
        DO31I=10,99
          WRITE(CJUNK(1:2),'(I2)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JINDEX=-I
            GOTO89
           ENDIF
 31     CONTINUE
      ENDIF
C
C  CHECK FOR RED SCALE (R0 - R255)
C
C  THESE WILL BE MAPPED TO 1000 - 1255
C
      IF(ICOL(1:1).EQ.'R')THEN
        DO41I=0,9
          CJUNK='    '
          WRITE(CJUNK(1:1),'(I1)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=1000 + I
            GOTO9000
          ENDIF
 41     CONTINUE
C
        DO43I=10,99
          CJUNK='    '
          WRITE(CJUNK(1:2),'(I2)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=1000 + I
            GOTO9000
          ENDIF
 43     CONTINUE
C
        DO45I=100,255
          CJUNK='    '
          WRITE(CJUNK(1:3),'(I3)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=1000 + I
            GOTO9000
          ENDIF
 45     CONTINUE
      ENDIF
C
C  CHECK FOR GREEN SCALE (Z0 - Z255)
C
C  THESE WILL BE MAPPED TO 2000 - 2255
C
      IF(ICOL(1:1).EQ.'Z')THEN
        DO51I=0,9
          CJUNK='    '
          WRITE(CJUNK(1:1),'(I1)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=2000 + I
            GOTO9000
          ENDIF
 51     CONTINUE
C
        DO53I=10,99
          CJUNK='    '
          WRITE(CJUNK(1:2),'(I2)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=2000 + I
            GOTO9000
          ENDIF
 53     CONTINUE
C
        DO55I=100,255
          CJUNK='    '
          WRITE(CJUNK(1:3),'(I3)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=2000 + I
            GOTO9000
          ENDIF
 55     CONTINUE
      ENDIF
C
C  CHECK FOR BLUE SCALE (B0 - B255)
C
C  THESE WILL BE MAPPED TO 3000 - 3255
C
      IF(ICOL(1:1).EQ.'B')THEN
        DO61I=0,9
          CJUNK='    '
          WRITE(CJUNK(1:1),'(I1)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=3000 + I
            GOTO9000
          ENDIF
 61     CONTINUE
C
        DO63I=10,99
          CJUNK='    '
          WRITE(CJUNK(1:2),'(I2)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=3000 + I
            GOTO9000
          ENDIF
 63     CONTINUE
C
        DO65I=100,255
          CJUNK='    '
          WRITE(CJUNK(1:3),'(I3)')I
          IF(ICOL(2:4).EQ.CJUNK(1:3))THEN
            JCOL=3000 + I
            GOTO9000
          ENDIF
 65     CONTINUE
      ENDIF
C
   89 CONTINUE
   49 CONTINUE
C
      ISUBN0='TRCO'
      IERRG4='NO'
C
      NCSTR=(-999)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRCO')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,91)
   91   FORMAT('***** AT THE BEGINNING OF GRTRCO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,92)IMANUF,IMODEL,IMODE2,IMODE3
   92   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,93)ISOFT,ISOFT2,ISOFT3,IGCODE,IGUNIT
   93   FORMAT('ISOFT,ISOFT2,ISOFT3,IGCODE = ',5(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,94)ICASE,ICOL,IBUGG4,JCOL,JINDEX
   94   FORMAT('ICASE,ICOL,IBUGG4,JCOL,JINDEX = ',3(A4,2X),2I6)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4027')GOTO1100
        IF(IMODEL.EQ.'4105')GOTO1200
        IF(IMODEL.EQ.'4107')GOTO1200
        IF(IMODEL.EQ.'4109')GOTO1200
        IF(IMODEL.EQ.'4115')GOTO1200
        IF(IMODEL.EQ.'4662')GOTO1300
C
        GOTO1200
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE 4027 CASE                             **
C               **  (COLOR DEVICE)                                  **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1100 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=0
      IF(JINDEX.GE.0)JCOL=J4027(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE 4105 CASE                             **
C               **  (COLOR DEVICE)                                  **
C               **  REFERENCE--PROGRAMMER'S MANUAL, PAGE 5-50       **
C               ******************************************************
C
 1200 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=0
      IF(JINDEX.GE.0)JCOL=J4105(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 13--                                       **
C               **  TREAT THE 4662 CASE                             **
C               **  (PENPLOTTER)                                    **
C               **  REFERENCE--XXX                                  **
C               ******************************************************
C
 1300 CONTINUE
      JCOL=1
      IF(JINDEX.LT.0)JCOL=1
      IF(JINDEX.GE.0)JCOL=JPLOT4(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 6 .                             **
C               ******************************************************
C
 2100 CONTINUE
      JCOL=1
      IF(JINDEX.LT.0)JCOL=1
      IF(JINDEX.GE.0)JCOL=JPLOT8(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
C  UPDATED MAY, 1990 FOR "PEN MAP"
C
 2200 CONTINUE
C
      IF(IHPGPF.EQ.'ON')THEN
        JCOL=1
        DO2219I=1,16
          IF(ICOL(1:4).NE.IHPGPM(I)(1:4))GOTO2219
          JCOL=I
          GOTO2299
 2219   CONTINUE
C
        IF(ICOL.EQ.'0')JCOL=0
        IF(ICOL.EQ.'1')JCOL=1
        IF(ICOL.EQ.'2')JCOL=2
        IF(ICOL.EQ.'3')JCOL=3
        IF(ICOL.EQ.'4')JCOL=4
        IF(ICOL.EQ.'5')JCOL=5
        IF(ICOL.EQ.'6')JCOL=6
        IF(ICOL.EQ.'7')JCOL=7
        IF(ICOL.EQ.'8')JCOL=8
C
 2299   CONTINUE
        IF(JCOL.GT.IHPGCL)JCOL=1
      ELSE
        JCOL=1
        IF(JINDEX.LT.0)JCOL=1
        IF(JINDEX.GE.0)JCOL=JPLOT8(JINDEX+1)
        IF(JCOL.GT.IHPGCL)JCOL=MOD(JCOL-1,IHPGCL)+1
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE XX-X, XXX.                          **
C               **********************************************************
C
 2300 CONTINUE
      JCOL=7
      IF(JINDEX.LT.0)JCOL=7
      IF(JINDEX.GE.0)JCOL=J2622(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT CASE.                    **
C               **  USE RGB COLORS.                                 **
C               ******************************************************
C
 2600 CONTINUE
      JCOL=2
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
C  DECEMBER 1987: SET JCOL FOR GRERSC ROUTINE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=0
      IF(JINDEX.GE.0)JCOL=J4105(JINDEX+1)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
C  DECEMBER 1987: SET JCOL FOR GRERSC ROUTINE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=0
      IF(JINDEX.GE.0)JCOL=J4105(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM     (DEVICE-INDEPENDENT) CASE     **
C               **  NOTE: INDEX 0 IS RESERVED FOR THE BACKGROUND    **
C               **        COLOR.                                    **
C               **  NOTE: CGM ALSO ALLOWS COLORS TO BE SPECIFED BY  **
C               **        RGB COMPONENT RATHER THAN BY AN INDEX.  A **
C               **        FUTURE ENHANCEMENT WOULD BE TO SPECIFY    **
C               **        COLORS IN THIS FORMAT (SO BLUE WOULD BE   **
C               **        AN ACTUAL BLUE RATHER THAN AN ARBITRARY   **
C               **        INDEX NUMBER).                            **
C               **  AUGUST 1992.  USE RGB VALUES                    **
C               ******************************************************
C
 3300 CONTINUE
      JCOL=2
      IF(JINDEX.LT.0)JCOL=2
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  USE CALCOMP LIBRARY (ROUTINE NEWPEN SELECTS PEN)**
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
C
C     UPDATE MAY, 1990.
C     1) CHANGE DEFAULT ORDER FROM BLACK, RED, BLUE, GREEN TO BLACK,
C        RED, GREEN, BLUE (TO CORRESPOND TO DEFAULT ORDER IN NIST ZETA
C        LIBRARY)
C     2) DIFFERENT DEFAULT MAPPING BASED ON WHETHER 4 (OR LESS) OR MORE
C        THAN 4
C     3) CHECK FOR USER DEFINED PEN MAPPING
C
      IF(ICALPF.EQ.'ON')THEN
        JCOL=1
        DO4139I=1,16
          IF(ICOL(1:4).NE.ICALPM(I)(1:4))GOTO4139
          JCOL=I
          GOTO4199
 4139   CONTINUE
C
        IF(ICOL.EQ.'0')JCOL=0
        IF(ICOL.EQ.'1')JCOL=1
        IF(ICOL.EQ.'2')JCOL=2
        IF(ICOL.EQ.'3')JCOL=3
        IF(ICOL.EQ.'4')JCOL=4
        IF(ICOL.EQ.'5')JCOL=5
        IF(ICOL.EQ.'6')JCOL=6
        IF(ICOL.EQ.'7')JCOL=7
        IF(ICOL.EQ.'8')JCOL=8
      ELSE
        JCOL=1
        IF(JINDEX.LT.0)JCOL=1
        IF(JINDEX.GE.0)JCOL=JPLOT8(JINDEX+1)
        IF(JCOL.GT.ICALCL)JCOL=MOD(JCOL-1,ICALCL)+1
      ENDIF
C
 4199 CONTINUE
      IF(JCOL.GT.ICALCL)JCOL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IF(ILAHPF.EQ.'ON')THEN
        JCOL=1
        DO4639I=1,16
          IF(ICOL(1:4).NE.ILAHPM(I)(1:4))GOTO4639
          JCOL=I
          GOTO4699
 4639   CONTINUE
C
        IF(ICOL.EQ.'0')JCOL=0
        IF(ICOL.EQ.'1')JCOL=1
        IF(ICOL.EQ.'2')JCOL=2
        IF(ICOL.EQ.'3')JCOL=3
        IF(ICOL.EQ.'4')JCOL=4
        IF(ICOL.EQ.'5')JCOL=5
        IF(ICOL.EQ.'6')JCOL=6
        IF(ICOL.EQ.'7')JCOL=7
        IF(ICOL.EQ.'8')JCOL=8
      ELSE
        JCOL=1
        IF(JINDEX.LT.0)JCOL=1
        IF(JINDEX.GE.0)JCOL=JLAHEY(JINDEX+1)
        IF(JCOL.GT.ILAHNC)JCOL=MOD(JCOL-1,ILAHNC)+1
      ENDIF
C
 4699 CONTINUE
      IF(JCOL.GT.ILAHNC)JCOL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      IF(IQWNCL.EQ.'VGA')THEN
        JCOL=0
        IF(JINDEX.LT.0)JCOL=0
        IF(JINDEX.GE.0)JCOL=JPC(JINDEX+1)
      ELSEIF(IQWNCL.EQ.'RGB')THEN
        JCOL=1
        IF(JINDEX.LT.0)JCOL=JINDEX
        IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      ELSE
        JCOL=0
        IF(JINDEX.LT.0)JCOL=0
        IF(JINDEX.GE.0)JCOL=JPC(JINDEX+1)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      JCOL=223
      IF(JINDEX.LT.0)THEN
        JCOL=224 + INT((REAL(-JINDEX)/100.)*31. + 0.5)
        IF(JCOL.LT.224)JCOL=224
        IF(JCOL.GT.255)JCOL=255
      ENDIF
      IF(JINDEX.GE.0)JCOL=JWINT(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IF(IWINCL.EQ.'VGA')THEN
        JCOL=223
        IF(JINDEX.LT.0)THEN
          JCOL=224 + INT((REAL(-JINDEX)/100.)*31. + 0.5)
          IF(JCOL.LT.224)JCOL=224
          IF(JCOL.GT.255)JCOL=255
        ELSE
          JCOL=JWINT(JINDEX)
        ENDIF
      ELSEIF(IWINCL.EQ.'RGB')THEN
        JCOL=2
        IF(JINDEX.LT.0)JCOL=JINDEX
        IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      ELSE
        JCOL=223
        IF(JINDEX.LT.0)THEN
          JCOL=224 + INT((REAL(-JINDEX)/100.)*31. + 0.5)
          IF(JCOL.LT.224)JCOL=224
          IF(JCOL.GT.255)JCOL=255
        ELSE
          JCOL=JWINT(JINDEX)
        ENDIF
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY ROUTINES                    **
C               ******************************************************
C
C     UPDATE MAY, 1990.
C     1) CHANGE DEFAULT ORDER FROM BLACK, RED, BLUE, GREEN TO BLACK, RED,
C        GREEN, BLUE (TO CORRESPOND TO DEFAULT ORDER IN NIST ZETA
C        LIBRARY)
C     2) DIFFERENT DEFAULT MAPPING BASED ON WHETHER 4 (OR LESS) OR MORE
C        THAN 4
C     3) CHECK FOR USER DEFINED PEN MAPPING
C
 5100 CONTINUE
C
      IF(IZETPF.EQ.'ON')THEN
        JCOL=1
        DO5139I=1,16
          IF(ICOL(1:4).NE.IZETPM(I)(1:4))GOTO5139
          JCOL=I
          GOTO5199
 5139   CONTINUE
C
        IF(ICOL.EQ.'0')JCOL=0
        IF(ICOL.EQ.'1')JCOL=1
        IF(ICOL.EQ.'2')JCOL=2
        IF(ICOL.EQ.'3')JCOL=3
        IF(ICOL.EQ.'4')JCOL=4
        IF(ICOL.EQ.'5')JCOL=5
        IF(ICOL.EQ.'6')JCOL=6
        IF(ICOL.EQ.'7')JCOL=7
        IF(ICOL.EQ.'8')JCOL=8
      ELSE
        JCOL=1
        IF(JINDEX.LT.0)JCOL=1
        IF(JINDEX.GE.0)JCOL=JPLOT8(JINDEX+1)
        IF(JCOL.GT.IZETCL)JCOL=MOD(JCOL-1,IZETCL)+1
      ENDIF
C
 5199 CONTINUE
      IF(JCOL.GT.IZETCL)JCOL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - COLOR SUPPORTED            **
C               ******************************************************
C
 6600 CONTINUE
      IF(ISUNCL.LE.0) THEN
        JCOL=1
      ELSE
        JCOL=5
        IF(JINDEX.LT.0)JCOL=5
        IF(JINDEX.GE.0)JCOL=JSUN(JINDEX+1)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS CASE                            **
C               **  NON-COLOR DEVICE                                **
C               **  ADD COLOR SUPPORT FOR REGIS JANUARY, 1991.      **
C               **  NOTE THAT REGIS SUPPORTS COLOR IN TWO WAYS.     **
C               **  IT ALLOWS AN RGB COLOR SPECIFIED BY NAME.  THIS **
C               **  METHOD ALLOWS 8 DIFFERENT COLORS (BLACK, RED,   **
C               **  GREEN, BLUE, CYAN, YELLOW, MAGENTA, WHITE)  IT  **
C               **  ALSO ALLOWS COLORS TO BE SPECIFIED BY HUE,      **
C               **  LIGHTNESS, AND SATURATION VALUES.  THIS METHOD  **
C               **  ALLOWS 64 COLORS TO BE SPECIFIED.  WE WILL USE  **
C               **  THE HLS METHOD SINCE IT ALLOWS MORE COLOR (ALL  **
C               **  THE RGB COLORS HAVE A CORRESPONDING HLS SPEC).  **
C               **  UNFORTUNATELY, NOT ALL THE COLORS HAVE SIMPLE 4 **
C               **  CHARACTER CODES.  MOST COLORS WILL HAVE TO BE   **
C               **  SPECIFIED BY AN INDEX.  TO MAKE IT EASIER FOR   **
C               **  USERS, A "SHOW REGIS COLORS" COMMAND WAS ADDED. **
C               **  TRANSLATION TAKEN FROM 5-32 OF VT-240 MANUAL.   **
C               **  NOTE THAT MONOCHROME REGIS SUPPORTS 4 INTENSITY **
C               **  LEVELS (I.E., GREY SCALES).  WE HAVE NOT        **
C               **  IMPLEMENTED GREY-SCALE REGION FILLS AS IS DONE  **
C               **  WITH MONOCHROME POSTSCRIPT DEVICES.             **
C               ******************************************************
C
 8100 CONTINUE
      JCOL=3
      IF(IGCOLO.NE.'ON')GOTO9000
C
      IF(JINDEX.LT.0)JCOL=3
      IF(JINDEX.GE.0)JCOL=JREGIS(JINDEX+1)
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  BLACK AND WHITE DEVICE, HOWEVER CAN USE         **
C               **  "GREY SCALE" TO SIMULATE COLOR                  **
C               **  USED FOR REGIONS THAT ARE SOLID FILLED          **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **  COOKBOOK FROM ADOBE SYSTEMS                     **
C               **  MODIFIED JANUARY, 1990 TO SUPPORT COLOR         **
C               ******************************************************
C
C     AUGUST 1990. SUPPORT FULL GRAY SCALE WITH THE FOLLOWING SCHEME.
C                  IF THE COLOR IS GIVEN AS A NEGATIVE INDEX FROM -1 TO
C                  -256 (I.E., -1, -2, ... , -256), INTERPERT THE NUMBER
C                  AS AN EXPLICIT GRAY SCALE INDEX.  POSITIVE INDEX
C                  NUMBERS (0 TO 15) WILL SUPPORT SPECIFIC COLORS AND WILL
C                  BE MAPPED TO EXPLICIT GRAY SCALES (NOT NECESSARILY
C                  SCALED BY NUMERIC VALUE) ON MONOCHROME DEVICES.
C
C     AUGUST 1992. ABOVE SCHEME NO LONGER APPLIES.  SUPPORT ALL 67 COLORS
C                  VIA SPECIFIC RGB VALUES, GRAY SCALE SPECIFIED VIA G0
C                  THROUGH G100  AS STATED IN BEGINING COMMENTS.  NO
C                  LONGER USE THE NEGATIVE VALUES SCHEME.
C
 8600 CONTINUE
      JCOL=2
      IF(JINDEX.LT.0)JCOL=JINDEX
CCCCC IF(IGCOLO.EQ.'OFF')GOTO9000
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE (QMS, TELARIS LASER PRINTERS**
C               **  QUIC DOES NOT SUPPORT COLOR.  HOWEVER, IT DOES  **
C               **  SUPPORT "HALF-TONES" AND "FILL PATTERNS".  THESE**
C               **  ARE DESCRIBED IN CHAPTER 8 OF THE QMS QUIC      **
C               **  PROGRAMMERS MANUAL.  HOWEVER, THESE WILL NOT BE **
C               **  BE USED TO SIMULATE COLOR FOR REGION FILLS (AS  **
C               **  IN POSTSCRIPT AND PCL CASES).  THE REASON IS    **
C               **  POSTSCRIPT SUPPORTS GREYSCALE AS A DIRECTLY     **
C               **  SPECIFIED PROPORTION AND PCL SUPPORTS DOT       **
C               **  DENSITY AS A DIRECTLY SPECIFIED PERCENT.  THE   **
C               **  QMS HALFTONES ARE SPECIFIC PREDFINED PATTERNS,  **
C               **  THERE DID NOT SEEM TO BE A REASONABLE "PROGRESSION"
C               **  IN THE PATTERNS LISTED IN THE MANUAL.           **
C               ******************************************************
C
 9100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JX11(JINDEX+1)
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 74.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 310.                       **
C               *************************************************
C
10000 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=0
      IF(JINDEX.GE.0)JCOL=JPC(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
C
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
C
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      JCOL=0
      IF(JINDEX.LT.0)JCOL=JINDEX
      IF(JINDEX.GE.0)JCOL=JCGM(JINDEX+1)
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRCO')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRCO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9017)ICASE,ICOL,JCOL,JINDEX
 9017   FORMAT('ICASE,ICOL,JCOL,JINDEX = ',2(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRC2(ICOLR,ICOLG,ICOLB,ARED,ABLUE,AGREEN,
     1                  AALPHA,IRGBFL)
C
C     PURPOSE--TRANSLATE A COLOR GIVEN AS THREE NUMBERS (FOR RED, BLUE,
C              GREEN AND ALPHA COMPONENTS).  NOTE THAT THIS ROUTINE
C              SIMPLY SETS A FLAG (IRGBFL) TO 0 (NO RGB SUPPORT FOR THE
C              DEVICE) OR 1 (RGB SUPPORT FOR THE DEVICE).
C     WRITTEN BY--ALAN HECKERT
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2899
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--2020.10
C     ORIGINAL VERSION--OCTOBER  2020.
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IRGBFL=0
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRC2')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,91)
   91   FORMAT('***** AT THE BEGINNING OF GRTRC2--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,92)IMANUF,IMODEL,IMODE2,IMODE3
   92   FORMAT('IMANUF,IMODEL,IMODE2,IMODE3 = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,93)ISOFT,ISOFT2,ISOFT3,IGCODE,IGUNIT
   93   FORMAT('ISOFT,ISOFT2,ISOFT3,IGCODE = ',5(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,94)ICOLR,ICOLG,ICOLB
   94   FORMAT('ICOLR,ICOLG,ICOLB = ',3I5)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C     IF COLORS ARE OUT OF RANGE, TURN OFF RGB COLOR SUPPORT.
C
      AMXVAL=REAL(IRGBMX)
      ARED=REAL(ICOLR)
      AGREEN=REAL(ICOLG)
      ABLUE=REAL(ICOLB)
C
      IF(ARED.LT.0.0 .OR. ARED.GT.AMXVAL)THEN
        IRGBFL=0
        GOTO9000
      ENDIF
      IF(ABLUE.LT.0.0 .OR. ABLUE.GT.AMXVAL)THEN
        IRGBFL=0
        GOTO9000
      ENDIF
      IF(AGREEN.LT.0.0 .OR. AGREEN.GT.AMXVAL)THEN
        IRGBFL=0
        GOTO9000
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1200
      ELSEIF(IMANUF.EQ.'HP')THEN
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 12--                                       **
C               **  TREAT THE TEKTRONIX DEVICES (NO RGB SUPPORT)    **
C               ******************************************************
C
 1200 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD DEVICES (NO RGB       **
C               **  SUPPORT)                                        **
C               ******************************************************
C
 2200 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT CASE.                    **
C               **  USE RGB COLORS.                                 **
C               ******************************************************
C
 2600 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM     (DEVICE-INDEPENDENT) CASE     **
C               **  NOTE: INDEX 0 IS RESERVED FOR THE BACKGROUND    **
C               **        COLOR.                                    **
C               **  NOTE: CGM ALSO ALLOWS COLORS TO BE SPECIFED BY  **
C               **        RGB COMPONENT RATHER THAN BY AN INDEX.  A **
C               **        FUTURE ENHANCEMENT WOULD BE TO SPECIFY    **
C               **        COLORS IN THIS FORMAT (SO BLUE WOULD BE   **
C               **        AN ACTUAL BLUE RATHER THAN AN ARBITRARY   **
C               **        INDEX NUMBER).                            **
C               **  AUGUST 1992.  USE RGB VALUES                    **
C               ******************************************************
C
 3300 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  USE CALCOMP LIBRARY (ROUTINE NEWPEN SELECTS PEN)**
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IRGBFL=1
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE CALCOMP LIBRARY ROUTINES                    **
C               ******************************************************
C
 5100 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - COLOR SUPPORTED            **
C               ******************************************************
C
 6600 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS CASE                            **
C               **  NON-COLOR DEVICE                                **
C               **  ADD COLOR SUPPORT FOR REGIS JANUARY, 1991.      **
C               **  NOTE THAT REGIS SUPPORTS COLOR IN TWO WAYS.     **
C               **  IT ALLOWS AN RGB COLOR SPECIFIED BY NAME.  THIS **
C               **  METHOD ALLOWS 8 DIFFERENT COLORS (BLACK, RED,   **
C               **  GREEN, BLUE, CYAN, YELLOW, MAGENTA, WHITE)  IT  **
C               **  ALSO ALLOWS COLORS TO BE SPECIFIED BY HUE,      **
C               **  LIGHTNESS, AND SATURATION VALUES.  THIS METHOD  **
C               **  ALLOWS 64 COLORS TO BE SPECIFIED.  WE WILL USE  **
C               **  THE HLS METHOD SINCE IT ALLOWS MORE COLOR (ALL  **
C               **  THE RGB COLORS HAVE A CORRESPONDING HLS SPEC).  **
C               **  UNFORTUNATELY, NOT ALL THE COLORS HAVE SIMPLE 4 **
C               **  CHARACTER CODES.  MOST COLORS WILL HAVE TO BE   **
C               **  SPECIFIED BY AN INDEX.  TO MAKE IT EASIER FOR   **
C               **  USERS, A "SHOW REGIS COLORS" COMMAND WAS ADDED. **
C               **  TRANSLATION TAKEN FROM 5-32 OF VT-240 MANUAL.   **
C               **  NOTE THAT MONOCHROME REGIS SUPPORTS 4 INTENSITY **
C               **  LEVELS (I.E., GREY SCALES).  WE HAVE NOT        **
C               **  IMPLEMENTED GREY-SCALE REGION FILLS AS IS DONE  **
C               **  WITH MONOCHROME POSTSCRIPT DEVICES.             **
C               ******************************************************
C
 8100 CONTINUE
      IRGBFL=0
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  BLACK AND WHITE DEVICE, HOWEVER CAN USE         **
C               **  "GREY SCALE" TO SIMULATE COLOR                  **
C               **  USED FOR REGIONS THAT ARE SOLID FILLED          **
C               **  REFERENCE--POSTSCRIPT LANGUAGE TUTORIAL AND     **
C               **  COOKBOOK FROM ADOBE SYSTEMS                     **
C               **  MODIFIED JANUARY, 1990 TO SUPPORT COLOR         **
C               ******************************************************
C
 8600 CONTINUE
      IRGBFL=1
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC CASE (QMS, TELARIS LASER PRINTERS**
C               **  QUIC DOES NOT SUPPORT COLOR.  HOWEVER, IT DOES  **
C               **  SUPPORT "HALF-TONES" AND "FILL PATTERNS".  THESE**
C               **  ARE DESCRIBED IN CHAPTER 8 OF THE QMS QUIC      **
C               **  PROGRAMMERS MANUAL.  HOWEVER, THESE WILL NOT BE **
C               **  BE USED TO SIMULATE COLOR FOR REGION FILLS (AS  **
C               **  IN POSTSCRIPT AND PCL CASES).  THE REASON IS    **
C               **  POSTSCRIPT SUPPORTS GREYSCALE AS A DIRECTLY     **
C               **  SPECIFIED PROPORTION AND PCL SUPPORTS DOT       **
C               **  DENSITY AS A DIRECTLY SPECIFIED PERCENT.  THE   **
C               **  QMS HALFTONES ARE SPECIFIC PREDFINED PATTERNS,  **
C               **  THERE DID NOT SEEM TO BE A REASONABLE "PROGRESSION"
C               **  IN THE PATTERNS LISTED IN THE MANUAL.           **
C               ******************************************************
C
 9100 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               ******************************************************
C
 9600 CONTINUE
      IRGBFL=0
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 74.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 310.                       **
C               *************************************************
C
10000 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
C     2021/03/11: TURN OFF RGB COLOR FLAG IF GD COLOR SET TO FIXED
C
12000 CONTINUE
      IRGBFL=1
      IF(IGDCO.EQ.'FIXE')IRGBFL=0
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRC2')THEN
        WRITE(ICOUT,12001)IGDCO,IRGBFL
12001   FORMAT('GRTRC2 - GD DEVICE: IGDCO,IRGBFL = ',A4,2X,I5)
        CALL DPWRST('XXX','BUG ')
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      IRGBFL=1
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      IRGBFL=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      IRGBFL=1
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRC2')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRC2--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9017)IRGBFL
 9017   FORMAT('IRGBFL = ',I5)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9019)ARED,ABLUE,AGREEN,AALPHA
 9019   FORMAT('ARED,ABLUE,AGREEN,AALPHA = ',4F12.5)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRDI(ICASE,IDIR,ANGLE,JDIR,ANGLE2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT,
C              TRANSLATE A DIRECTION GIVEN IN CHARACTER REPRESENTATION
C              INTO A NUMERIC REPRESENTATION
C              THAT WILL BE UNDERSTOOD BY A SPECIFIC
C              GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --APRIL    2009. THIS CODE DOES NOT CONTAIN ANY
C                                      DEVICE SPECIFIC CODE, SO REMOVE
C                                      DEVICE DEPENDENT BRANCHES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IDIR
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRDI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRDI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)ICASE,IDIR,ANGLE
   53   FORMAT('ICASE,IDIR,ANGLE = ',2(A4,2X),G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IMANUF,IMODEL,IBUGG4
   54   FORMAT('IMANUF,IMODEL,IBUGG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               *************************************
C               **  STEP 0--                       **
C               **  DEFINE DIRECTION               **
C               **  FOR A GENERAL GRAPHICS DEVICE  **
C               *************************************
C
      JDIR=0
      ANGLE2=ANGLE
C
      IF(IDIR.EQ.'HORI')THEN
        JDIR=0
        ANGLE2=0.0
      ELSEIF(IDIR.EQ.'VERT')THEN
        JDIR=90
        ANGLE2=90.0
      ELSEIF(IDIR.EQ.'GENE')THEN
        JDIR=INT(ANGLE+0.5)
        ANGLE2=ANGLE
      ENDIF
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRDI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRDI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9014)JDIR,ANGLE2,IERRG4
 9014   FORMAT('JDIR,ANGLE2,IERRG4 = ',I8,G15.7,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRFI(ICASE,IFILLT,JFILLT)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A FILL
C              SPECIFICATION (ON/OFF) GIVEN IN CHARACTER REPRESANTATION
C              INTO A NUMERIC REPRESENTATION THAT WILL BE UNDERSTOOD BY
C              A SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --APRIL    2009. THIS CODE DOES NOT CONTAIN ANY
C                                      DEVICE SPECIFIC CODE, SO REMOVE
C                                      DEVICE DEPENDENT BRANCHES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IFILLT
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRFI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRFI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)ICASE,IFILLT
   53   FORMAT('ICASE,IFILLT = ',A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)IMANUF,IMODEL,IBUGG4
   54   FORMAT('IMANUF,IMODEL,IBUGG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               *************************************
C               **  STEP 0--                       **
C               **  DEFINE FILL                    **
C               **  FOR A GENERAL GRAPHICS DEVICE  **
C               *************************************
C
      JFILLT=0
      IF(IFILLT.EQ.'ON')JFILLT=1
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRFI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRFI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IERRG4,ICASE,IFILLT,JFILLT
 9013   FORMAT('IERRG4,ICASE,IFILLT,JFILLT = ',3(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRFO(ICASE,IFONT,JFONT)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A FONT
C              GIVEN IN CHARACTER REPRESENTATION INTO A NUMERIC
C              REPRESENTATION THAT WILL BE UNDERSTOOD BY A SPECIFIC
C              GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --APRIL    2009. THIS CODE DOES NOT CONTAIN ANY
C                                      DEVICE SPECIFIC CODE, SO REMOVE
C                                      DEVICE DEPENDENT BRANCHES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IFONT
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRFO')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRFO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)ICASE,IFONT,IMANUF,IMODEL,IBUGG4
   54   FORMAT('ICASE,IFONT,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               *************************************
C               **  STEP 0--                       **
C               **  DEFINE FONT                    **
C               **  FOR A GENERAL GRAPHICS DEVICE  **
C               *************************************
C
      JFONT=0
      IF(IFONT.EQ.'TEKT')JFONT=0
      IF(IFONT.EQ.'SIMP')JFONT=1
      IF(IFONT.EQ.'DUPL')JFONT=2
      IF(IFONT.EQ.'TRIP')JFONT=3
      IF(IFONT.EQ.'COMP')JFONT=4
      IF(IFONT.EQ.'TRII')JFONT=5
      IF(IFONT.EQ.'SIMS')JFONT=6
      IF(IFONT.EQ.'COMS')JFONT=7
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRFO')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRFO--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)IERRG4,IFONT,JFONT
 9013   FORMAT('IERRG4,IFONT,JFONT = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRJU(ICASE,IJUST,JJUST)
C
C     PURPOSE--FOR A TEXT STRING, MARKER, LINE, OR AREA, TRANSLATE A
C              JUSTIFICATION GIVEN IN CHARACTER REPRESENTATION INTO A
C              NUMERIC REPRESENTATION THAT WILL BE UNDERSTOOD BY A
C              SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --APRIL    2009. THIS CODE DOES NOT CONTAIN ANY
C                                      DEVICE SPECIFIC CODE, SO REMOVE
C                                      DEVICE DEPENDENT BRANCHES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IJUST
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRJU')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRJU--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)ICASE,IJUST,IMANUF,IMODEL,IBUGG4
   54   FORMAT('ICASE,IJUST,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               *************************************
C               **  STEP 0--                       **
C               **  DEFINE JUSTIFICATION           **
C               **  FOR A GENERAL GRAPHICS DEVICE  **
C               *************************************
C
      JJUST=1
      IF(IJUST.EQ.'LEFT')JJUST=1
      IF(IJUST.EQ.'CENT')JJUST=2
      IF(IJUST.EQ.'RIGH')JJUST=3
C
      IF(IJUST.EQ.'LJUS')JJUST=1
      IF(IJUST.EQ.'CJUS')JJUST=2
      IF(IJUST.EQ.'RJUS')JJUST=3
C
      IF(IJUST.EQ.'LEBO')JJUST=1
      IF(IJUST.EQ.'CEBO')JJUST=2
      IF(IJUST.EQ.'RIBO')JJUST=3
      IF(IJUST.EQ.'LECE')JJUST=4
      IF(IJUST.EQ.'CECE')JJUST=5
      IF(IJUST.EQ.'RICE')JJUST=6
      IF(IJUST.EQ.'LETO')JJUST=7
      IF(IJUST.EQ.'CETO')JJUST=8
      IF(IJUST.EQ.'RITO')JJUST=9
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRJU')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRJU--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9019)IERRG4,IJUST,JJUST
 9019   FORMAT('IERRG4,IJUST,JJUST = ',2(A4,2X),I8)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRPA(ICASE,IPATTT,PXSPA,PYSPA,
     1JPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA,PXSPA2,PYSPA2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A PATTERN
C              IN CHARACTER REPRESENTTION.  INTO A NUMERIC REPRESENTATION
C              THAT WILL BE UNDERSTOOD BY THE SPECIFIC GRAPHICS DEVICE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. SET PATTERN TO -1 FOR BLANK LINE
C                                      IF DEVICE DOESN'T ALREADY SET
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C                     --MARCH    2002. CHANGE TO QUARTZ (NEW MAC GRAPHICS
C                                      LIBRARY)
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C                     --MARCH    2002. CHANGE TO GHOSTSCRIPT
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --FEBRUARY 2006. LATEX
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      GRAPHICS DEVICES
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IPATTT
      CHARACTER*4 IHORPA
      CHARACTER*4 IVERPA
      CHARACTER*4 IDUPPA
      CHARACTER*4 IDDOPA
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRPA')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRPA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)ICASE,IPATTT,IMANUF,IMODEL,IBUGG4
   53   FORMAT('ICASE,IPATTT,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,54)PXSPA,PYSPA
   54   FORMAT('PXSPA,PYSPA = ',2G15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4020')GOTO1200
        IF(IMODEL.EQ.'4022')GOTO1200
        IF(IMODEL.EQ.'4025')GOTO1200
        IF(IMODEL.EQ.'4027')GOTO1200
C
        IF(IMODEL.EQ.'4105')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4109')GOTO1300
        IF(IMODEL.EQ.'4115')GOTO1300
        IF(IMODEL.EQ.'4107')GOTO1300
        IF(IMODEL.EQ.'4113')GOTO1300
C
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               *******************************************
C               **  STEP 11--                            **
C               **  TREAT THE TEKTRONIX 4014             **
C               **  REFERENCE--40Z105 MANUAL, PAGE 5-52  **
C               *******************************************
C
 1100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=96
        IF(IPATTT.EQ.'SOLI')JPATTT=96
        IF(IPATTT.EQ.'SO')JPATTT=96
        IF(IPATTT.EQ.'DOTT')JPATTT=97
        IF(IPATTT.EQ.'DOT')JPATTT=97
        IF(IPATTT.EQ.'DO')JPATTT=97
        IF(IPATTT.EQ.'DASH')JPATTT=99
        IF(IPATTT.EQ.'DA')JPATTT=99
        IF(IPATTT.EQ.'DA1')JPATTT=100
        IF(IPATTT.EQ.'DA2')JPATTT=98
        IF(IPATTT.EQ.'DA3')JPATTT=102
        IF(IPATTT.EQ.'DA4')JPATTT=101
        IF(IPATTT.EQ.'DA5')JPATTT=103
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ****************************************************
C               **  STEP 12--                                     **
C               **  TREAT THE TEKTRONIX 4027                      **
C               **  (COLOR RASTER DEVICE).                        **
C               **  TO SET LINE PATTERN,                          **
C               **  XXX                                           **
C               **  REFERENCE--4027 OPERATOR'S MANUAL, PAGE XXX.  **
C               ****************************************************
C
 1200 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=1
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DA1')JPATTT=4
        IF(IPATTT.EQ.'DA2')JPATTT=5
        IF(IPATTT.EQ.'DA3')JPATTT=6
        IF(IPATTT.EQ.'DA4')JPATTT=7
        IF(IPATTT.EQ.'DA5')JPATTT=8
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               *************************************
C               **  STEP 13--                      **
C               **  TREAT THE TEKTRONIX 4105 CASE  **
C               **  (COLOR RASTER DEVICE)          **
C               **  REFERENCE--XXX                 **
C               *************************************
C
 1300 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        CALL GRTRRP(IPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA)
        PXSPA2=PXSPA
        PYSPA2=PYSPA
CCCCC   IF(IPATTT.EQ.'SOLI')PXSPA2=0.1
CCCCC   IF(IPATTT.EQ.'SOLI')PYSPA2=0.1
CCCCC   IF(IPATTT.EQ.'FILL')PXSPA2=0.1
CCCCC   IF(IPATTT.EQ.'FILL')PYSPA2=0.1
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=96
        IF(IPATTT.EQ.'SOLI')JPATTT=96
        IF(IPATTT.EQ.'SO')JPATTT=96
        IF(IPATTT.EQ.'DOTT')JPATTT=97
        IF(IPATTT.EQ.'DOT')JPATTT=97
        IF(IPATTT.EQ.'DO')JPATTT=97
        IF(IPATTT.EQ.'DASH')JPATTT=99
        IF(IPATTT.EQ.'DA')JPATTT=99
        IF(IPATTT.EQ.'DA1')JPATTT=100
        IF(IPATTT.EQ.'DA2')JPATTT=98
        IF(IPATTT.EQ.'DA3')JPATTT=102
        IF(IPATTT.EQ.'DA4')JPATTT=101
        IF(IPATTT.EQ.'DA5')JPATTT=103
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ****************************************************
C               **  STEP 21--                                     **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE           **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER          **
C               **             OPERATING AND PROGRAMMING MANUAL,  **
C               **             PAGE XX.                           **
C               ****************************************************
C
 2100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ****************************************************
C               **  STEP 22--                                     **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASE          **
C               **  (MULTI-COLOR PENPLOTTER)                      **
C               **  REFERENCE--                                   **
C               **                                                **
C               **             PAGE XX.                           **
C               ****************************************************
C
 2200 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=-1
        IF(IPATTT.EQ.'BLAN')JPATTT=0
        IF(IPATTT.EQ.'BL  ')JPATTT=0
        IF(IPATTT.EQ.'NONE')JPATTT=0
        IF(IPATTT.EQ.'NO  ')JPATTT=0
        IF(IPATTT.EQ.'    ')JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=-1
        IF(IPATTT.EQ.'SO  ')JPATTT=-1
        IF(IPATTT.EQ.'DOTT')JPATTT=1
        IF(IPATTT.EQ.'DOT ')JPATTT=1
        IF(IPATTT.EQ.'DO  ')JPATTT=1
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA  ')JPATTT=2
        IF(IPATTT.EQ.'DA1 ')JPATTT=3
        IF(IPATTT.EQ.'DA2 ')JPATTT=4
        IF(IPATTT.EQ.'DA3 ')JPATTT=5
        IF(IPATTT.EQ.'DA4 ')JPATTT=6
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-6, 10-7.                         **
C               **********************************************************
C
 2300 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=1
        IF(IPATTT.EQ.'BLAN')JPATTT=11
        IF(IPATTT.EQ.'BL  ')JPATTT=11
        IF(IPATTT.EQ.'NONE')JPATTT=11
        IF(IPATTT.EQ.'NO  ')JPATTT=11
        IF(IPATTT.EQ.'    ')JPATTT=11
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO  ')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=7
        IF(IPATTT.EQ.'DOT ')JPATTT=7
        IF(IPATTT.EQ.'DO  ')JPATTT=7
        IF(IPATTT.EQ.'DASH')JPATTT=6
        IF(IPATTT.EQ.'DA  ')JPATTT=6
        IF(IPATTT.EQ.'DA1 ')JPATTT=5
        IF(IPATTT.EQ.'DA2 ')JPATTT=4
        IF(IPATTT.EQ.'DA3 ')JPATTT=10
        IF(IPATTT.EQ.'DA4 ')JPATTT=8
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASE              **
C               **********************************************************
C
 2600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATT=0
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO  ')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT ')JPATTT=2
        IF(IPATTT.EQ.'DO  ')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=1
        IF(IPATTT.EQ.'DA  ')JPATTT=1
        IF(IPATTT.EQ.'DA2 ')JPATTT=3
        IF(IPATTT.EQ.'DA3 ')JPATTT=4
        IF(IPATTT.EQ.'DA4 ')JPATTT=5
        IF(IPATTT.EQ.'DA5 ')JPATTT=6
      ENDIF
      GOTO9000
C
C               ***************************************************
C               **  STEP 31--                                    **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE  **
C               ***************************************************
C
 3100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        CALL GRTRRP(IPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA)
        PXSPA2=PXSPA
        PYSPA2=PYSPA
        IF(IPATTT.EQ.'SOLI')PXSPA2=PPENSW
        IF(IPATTT.EQ.'SOLI')PYSPA2=PPENSW
        IF(IPATTT.EQ.'FILL')PXSPA2=PPENSW
        IF(IPATTT.EQ.'FILL')PYSPA2=PPENSW
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE CGM       CASE                        **
C               **  LINE                                            **
C               **    1 - SOLID                                     **
C               **    2 - DASH                                      **
C               **    3 - DOT                                       **
C               **    4 - DASH-DOT                                  **
C               **    5 - DASH-DOT-DOT                              **
C               **  REGION                                          **
C               **    1 - PARALLEL HORIZONTAL LINES                 **
C               **    2 - PARALLEL VERTICAL LINES                   **
C               **    3 - 45 DEGREE LINES                           **
C               **    4 - 135 DEGREE LINES                          **
C               **    5 - CROSS-HATCH WITH 45 AND 135 DEGREE LINES  **
C               **  MARKERS AND TEXT PATTERNS NOT CURRENTLY         **
C               **  UTILIZED BY DATAPLOT                            **
C               ******************************************************
C
 3300 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
C
C       NOTE: PPENSW IS THE WIDTH OF A SINGLE LINE FOR METAFILES.
C             USER SETTABLE VIA "SET GENERAL PEN WIDTH <WIDTH>"
C
        CALL GRTRRP(IPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA)
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'FILL')JPATTT=0
        IF(IPATTT.EQ.'HORI')JPATTT=1
        IF(IPATTT.EQ.'VERT')JPATTT=2
        IF(IPATTT.EQ.'D1')JPATTT=3
        IF(IPATTT.EQ.'D2')JPATTT=4
        IF(IPATTT.EQ.'HV')JPATTT=5
        IF(IPATTT.EQ.'D1D2')JPATTT=6
        IF(IPATTT.EQ.'HD1')JPATTT=6
        IF(IPATTT.EQ.'HD2')JPATTT=6
        IF(IPATTT.EQ.'VD1')JPATTT=6
        IF(IPATTT.EQ.'VD2')JPATTT=6
        IF(IPATTT.EQ.'HVD1')JPATTT=6
        IF(IPATTT.EQ.'HVD2')JPATTT=6
        IF(IPATTT.EQ.'ALL')JPATTT=6
        PXSPA2=PXSPA
        PYSPA2=PYSPA
        IF(IPATTT.EQ.'SOLI')PXSPA2=PPENSW
        IF(IPATTT.EQ.'SOLI')PYSPA2=PPENSW
        IF(IPATTT.EQ.'FILL')PXSPA2=PPENSW
        IF(IPATTT.EQ.'FILL')PYSPA2=PPENSW
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATT=1
        IF(IPATTT.EQ.'BLAN')JPATTT=0
        IF(IPATTT.EQ.'BL  ')JPATTT=0
        IF(IPATTT.EQ.'NONE')JPATTT=0
        IF(IPATTT.EQ.'NO  ')JPATTT=0
        IF(IPATTT.EQ.'    ')JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO  ')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT ')JPATTT=3
        IF(IPATTT.EQ.'DO  ')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA  ')JPATTT=2
        IF(IPATTT.EQ.'DA1 ')JPATTT=4
        IF(IPATTT.EQ.'DA2 ')JPATTT=5
        IF(IPATTT.EQ.'DA3 ')JPATTT=4
        IF(IPATTT.EQ.'DA4 ')JPATTT=5
      ENDIF
      GOTO9000
C
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=1
        IF(IPATTT.EQ.'DA')JPATTT=1
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=1
        IF(IPATTT.EQ.'DA')JPATTT=1
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=3
        IF(IPATTT.EQ.'DA')JPATTT=3
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=3
        IF(IPATTT.EQ.'DA')JPATTT=3
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=1
        IF(IPATTT.EQ.'DOT')JPATTT=1
        IF(IPATTT.EQ.'DO')JPATTT=1
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=3
        IF(IPATTT.EQ.'DA4')JPATTT=4
        IF(IPATTT.EQ.'DA5')JPATTT=3
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  USE ZETA EXTENSION TO STANDARD CALCOMP LIBRARY  **
C               **  ALTHOUGH USER CAN DEFINE THE DASH PATTERN, USE  **
C               **  THE 6 PRE-DEFINED DASH PATTERNS                 **
C               ******************************************************
C
 5100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=1
        IF(IPATTT.EQ.'DA')JPATTT=1
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=1
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN       CASE                        **
C               ******************************************************
C
 6600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO  ')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=1
        IF(IPATTT.EQ.'DOT ')JPATTT=1
        IF(IPATTT.EQ.'DO  ')JPATTT=1
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA  ')JPATTT=2
        IF(IPATTT.EQ.'DA1 ')JPATTT=3
        IF(IPATTT.EQ.'DA2 ')JPATTT=4
        IF(IPATTT.EQ.'DA3 ')JPATTT=5
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS     CASE                        **
C               ******************************************************
C
 8100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=1
        IF(IPATTT.EQ.'BLAN')JPATTT=0
        IF(IPATTT.EQ.'BL  ')JPATTT=0
        IF(IPATTT.EQ.'NONE')JPATTT=0
        IF(IPATTT.EQ.'NO  ')JPATTT=0
        IF(IPATTT.EQ.'    ')JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=4
        IF(IPATTT.EQ.'DOT')JPATTT=4
        IF(IPATTT.EQ.'DO')JPATTT=4
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=5
        IF(IPATTT.EQ.'DA3')JPATTT=6
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=6
      ENDIF
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=1
        IF(IPATTT.EQ.'BLAN')JPATTT=0
        IF(IPATTT.EQ.'BL  ')JPATTT=0
        IF(IPATTT.EQ.'NONE')JPATTT=0
        IF(IPATTT.EQ.'NO  ')JPATTT=0
        IF(IPATTT.EQ.'    ')JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=3
        IF(IPATTT.EQ.'DA')JPATTT=3
        IF(IPATTT.EQ.'DA1')JPATTT=4
        IF(IPATTT.EQ.'DA2')JPATTT=5
        IF(IPATTT.EQ.'DA3')JPATTT=6
        IF(IPATTT.EQ.'DA4')JPATTT=7
        IF(IPATTT.EQ.'DA5')JPATTT=8
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC      CASE                        **
C               **  USE THE PREDEFINED PATTERNS                     **
C               **  REFERENCE--QUIC PROGRAMMING MANUAL FROM QMS     **
C               **  P 14-7                                          **
C               ******************************************************
C
 9100 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        CALL GRTRRP(IPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA)
C
C       LINE WILL BE 3 PIXELS WIDE.  BASE SPACING FOR SOLID FILL ON
C       NUMBER OF HORIZONTAL PICTURE POINTS.
C
        PXSPA2=PXSPA
        PYSPA2=PYSPA
        IF(IPATTT.EQ.'SOLI')PXSPA2=100.*(3./ANUMHP)
        IF(IPATTT.EQ.'SOLI')PYSPA2=100.*(3./ANUMVP)
        IF(IPATTT.EQ.'FILL')PXSPA2=100.*(3./ANUMHP)
        IF(IPATTT.EQ.'FILL')PYSPA2=100.*(3./ANUMVP)
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=1
        IF(IPATTT.EQ.'DA')JPATTT=1
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11       CASE                        **
C               **  NOTE THAT FOR LINE PATTERNS, A SOLID, DASH, DOT,**
C               **  AND DASH-DOT PATTERNS ARE DEFINED IN THE C      **
C               **  LIBRARY.  CURRENTLY, DASH1-DASH5 ALL SET THE SAME*
C               **  DASH-DOT PATTERN.  HOWEVER, THE NUMBER OF DASH  **
C               **  PATTERNS MAY BE INCREASED IN THE FUTURE (THE    **
C               **  CAN DEFINE ARBITRARY DASH PATTERNS).            **
C               **  X11 DOES NOT DEFINE ANY HATCH PATTERNS.  IT DOES**
C               **  ALLOW PRE-BUILT BIT ARRAYS (USUALLY 8X8 OR 16X16**
C               **  PIXELS) TO FILL REGIONS WITH PATTERNS.  HOWEVER,**
C               **  THIS IS NOT CONSISTENT WITH HOW DATAPLOT DEFINES**
C               **  PATTERNS, SO LET DATAPLOT DO REGION FILLS IN    **
C               **  SOFTWARE.                                       **
C               ******************************************************
C
 9600 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=2
        IF(IPATTT.EQ.'DOT')JPATTT=2
        IF(IPATTT.EQ.'DO')JPATTT=2
        IF(IPATTT.EQ.'DASH')JPATTT=1
        IF(IPATTT.EQ.'DA')JPATTT=1
        IF(IPATTT.EQ.'DA1')JPATTT=3
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 83.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 320.                       **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 29.         **
C               *************************************************
C
10000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=0
        IF(IPATTT.EQ.'SO')JPATTT=0
        IF(IPATTT.EQ.'DOTT')JPATTT=1
        IF(IPATTT.EQ.'DOT')JPATTT=1
        IF(IPATTT.EQ.'DO')JPATTT=1
        IF(IPATTT.EQ.'DASH')JPATTT=3
        IF(IPATTT.EQ.'DA')JPATTT=3
        IF(IPATTT.EQ.'DA1')JPATTT=2
        IF(IPATTT.EQ.'DA2')JPATTT=2
        IF(IPATTT.EQ.'DA3')JPATTT=2
        IF(IPATTT.EQ.'DA4')JPATTT=2
        IF(IPATTT.EQ.'DA5')JPATTT=2
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=2
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=2
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=2
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE AQUA                   DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=2
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)            DRIVER **
C               ******************************************************
15000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=2
        IF(IPATTT.EQ.'DA2')JPATTT=4
        IF(IPATTT.EQ.'DA3')JPATTT=5
        IF(IPATTT.EQ.'DA4')JPATTT=6
        IF(IPATTT.EQ.'DA5')JPATTT=7
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=4
        IF(IPATTT.EQ.'DA2')JPATTT=5
        IF(IPATTT.EQ.'DA3')JPATTT=6
        IF(IPATTT.EQ.'DA4')JPATTT=7
        IF(IPATTT.EQ.'DA5')JPATTT=8
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        JPATTT=0
        IF(IPATTT.EQ.'SOLI')JPATTT=1
        IF(IPATTT.EQ.'SO')JPATTT=1
        IF(IPATTT.EQ.'DOTT')JPATTT=3
        IF(IPATTT.EQ.'DOT')JPATTT=3
        IF(IPATTT.EQ.'DO')JPATTT=3
        IF(IPATTT.EQ.'DASH')JPATTT=2
        IF(IPATTT.EQ.'DA')JPATTT=2
        IF(IPATTT.EQ.'DA1')JPATTT=4
        IF(IPATTT.EQ.'DA2')JPATTT=5
        IF(IPATTT.EQ.'DA3')JPATTT=6
        IF(IPATTT.EQ.'DA4')JPATTT=7
        IF(IPATTT.EQ.'DA5')JPATTT=8
        IF(IPATTT.EQ.'BLAN')JPATTT=-1
        IF(IPATTT.EQ.'BL  ')JPATTT=-1
        IF(IPATTT.EQ.'NONE')JPATTT=-1
        IF(IPATTT.EQ.'NO  ')JPATTT=-1
        IF(IPATTT.EQ.'    ')JPATTT=-1
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      IF(ICASE.EQ.'REGI')THEN
        GOTO8000
      ELSEIF(ICASE.EQ.'MARK')THEN
        GOTO9000
      ELSEIF(ICASE.EQ.'TEXT')THEN
        GOTO9000
      ELSE
        GOTO9000
      ENDIF
      GOTO9000
C
 8000 CONTINUE
      CALL GRTRRP(IPATTT,IHORPA,IVERPA,IDUPPA,IDDOPA)
      PXSPA2=PXSPA
      PYSPA2=PYSPA
      IF(IPATTT.EQ.'SOLI')PXSPA2=0.1
      IF(IPATTT.EQ.'SOLI')PYSPA2=0.1
      IF(IPATTT.EQ.'FILL')PXSPA2=0.1
      IF(IPATTT.EQ.'FILL')PYSPA2=0.1
      GOTO9000
C
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRPA')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRPA--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9014)PXSPA,PYSPA,PXSPA2,PYSPA2
 9014   FORMAT('PXSPA,PYSPA,PXSPA2,PYSPA2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9015)IHORPA,IVERPA,IDUPPA,IDDOPA
 9015   FORMAT('IHORPA,IVERPA,IDUPPA,IDDOPA = ',3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9019)IERRG4
 9019   FORMAT('IERRG4 = ',A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRSI(ICASE,IFONT,PHEIGH,PWIDTH,PVEGAP,PHOGAP,
     1                  JSIZE,JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A DESIRED
C              SIZE (E.G., A CHARACTER SIZE) (HEIGHT, WIDTH, VERTICAL
C              GAP, HORIZONTAL GAP9 GIVEN IN (0.0 TO 100.0)
C              REPRESENTATION INTO AN INTEGER NUMERIC REPRESENTATION (IN
C              JSIZE) THAT WILL BE UNDERSTOOD BY THE TEKTRONIX GRAPHICS
C              DEVICE BEING USED.  ALSO, CREATE OTHER VARIABLES WHICH
C              CONTAIN THE CLOSEST ALLOWABLE SIZES (IN 0.0 TO 100.0
C              UNITS) THAT IS PERMITTED ON THE TEKTRONIX GRAPHICS DEVICE
C              BEING USED.
C
C     NOTE--PHEIGH IS IN RAW 0 TO 100 UNITS.
C           PHEIG2 IS ALSO IN 0 TO 100 UNITS BUT IS SCALED DOWN
C           TO REFLECT A SMALLER WINDOW (IF ONE EXISTS).
C           EXAMPLE--IF PHEIGH=3.0 AND WINDOW IS FROM Y = 0 TO Y = 50,
C                    THEN PHEIG2=1.5
C
C     NOTE--THE ONLY VARIABLES IN THE    PLOT CONTROL COMMON
C           THAT ARE USED HEREIN ARE THE ONES IN /RWIND/
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PVONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MARCH    1991. REGIS FIX (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD, CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --SEPTEMBER1998. MULTIPLOT SCALE FACTOR
C     UPDATED         --AUGUST   1999. BUG FIX FOR MULTIPLOT SCALE
C                                      FACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT LATEX DRIVER
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      GRAPHICS DEVICES
C     UPDATED         --DECEMBER 2018. SUPPORT  DEVICE <1/2/3> SCALE
C     UPDATED         --NOVEMBER 2023. SUPPORT FOR SCALABLE X11 FONTS
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
      CHARACTER*4 IFONT
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOPC.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      PHEIPP=(-999.0)
      PWIDPP=(-999.0)
      PVEGPP=(-999.0)
      PHOGPP=(-999.0)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRSI')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRSI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)ICASE,IFONT,IMANUF,IMODEL,IBUGG4
   52   FORMAT('ICASE,IFONT,IMANUF,IMODEL,IBUGG4 = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)PHEIGH,PWIDTH,PVEGAP,PHOGAP
   53   FORMAT('PHEIGH,PWIDTH,PVEGAP,PHOGAP = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
CCCCC AUGMENT FOLLOWING LINES TO SUPPORT MULTIPLOT SCALE FACTOR
      AFACTH=1.0
      AFACTW=1.0
      IF(IMPSW2.EQ.'ON'.AND.IFONT.EQ.'TEKT')THEN
        AFACTH=AMPSCH
        AFACTW=AMPSCW
      ELSEIF(IEMBSW.EQ.'ON'.AND.IEMCNT.GT.1.AND.
     1       IFONT.EQ.'TEKT')THEN
        AFACTH=AMPSCH
        AFACTW=AMPSCW
      ENDIF
C
CCCCC ADD ADJUSTMENT FACTOR FROM "DEVICE ... SCALE" COMMAND
C
      AFACTH=AFACTH*PCHSCA
      AFACTW=AFACTW*PCHSCA
C
CCCCC DON'T ADJUST PHEIGH, ETC., ADJUST PHEIG2, ETC.   AUGUST 1999
C
      PHEIG2=(AFACTH*PHEIGH)*(PWYMAX-PWYMIN)/100.0
      PVEGA2=(AFACTH*PVEGAP)*(PWYMAX-PWYMIN)/100.0
      PWIDT2=(AFACTW*PWIDTH)*(PWXMAX-PWXMIN)/100.0
      PHOGA2=(AFACTW*PHOGAP)*(PWXMAX-PWXMIN)/100.0
C
      RATIVH=ANUMVP/ANUMHP
      RATIV1=ANUMVP/100.0
      IF(IFONT.NE.'TEKT')GOTO9000
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        IF(IMODEL.EQ.'4006')GOTO1100
        IF(IMODEL.EQ.'4010')GOTO1100
        IF(IMODEL.EQ.'4050')GOTO1100
        IF(IMODEL.EQ.'4052')GOTO1100
C
        IF(IMODEL.EQ.'4012')GOTO1200
        IF(IMODEL.EQ.'4013')GOTO1200
        IF(IMODEL.EQ.'4014')GOTO1200
        IF(IMODEL.EQ.'4016')GOTO1200
        IF(IMODEL.EQ.'4054')GOTO1200
C
        IF(IMODEL.EQ.'4020')GOTO1300
        IF(IMODEL.EQ.'4022')GOTO1300
        IF(IMODEL.EQ.'4025')GOTO1300
        IF(IMODEL.EQ.'4027')GOTO1300
C
        IF(IMODEL.EQ.'4105')GOTO1100
        IF(IMODEL.EQ.'4107')GOTO1100
        IF(IMODEL.EQ.'4109')GOTO1100
        IF(IMODEL.EQ.'4115')GOTO1100
        IF(IMODEL.EQ.'4107')GOTO1100
        IF(IMODEL.EQ.'4109')GOTO1100
C
        IF(IMODEL.EQ.'4113')GOTO1200
        IF(IMODEL.EQ.'4114')GOTO1200
C
        IF(IMODEL.EQ.'4662')GOTO1200
C
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               *******************************************************
C               **  STEP 11--                                        **
C               **  TREAT THE TEKTRONIX 4006, 4010, 4050, AND 4052   **
C               **  (THESE ARE ALL NON-COLOR (= MONOCHROME) DEVICES  **
C               **  WHICH ARE SMALL SCREEN AND SO HAVE ONLY          **
C               **  1 CHARCTER SIZE).                                **
C               **  REFERENCE--IGL MANUAL, PAGE 6-22                 **
C               *******************************************************
C
 1100 CONTINUE
      JSIZE=1
      PWIDPP=1.410*RATIV1
      PHOGPP=0.385*RATIV1
      PHEIPP=1.795*RATIV1
      PVEGPP=1.026*RATIV1
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PWIDT2=1.410*RATIVH
      PHOGA2=0.385*RATIVH
      PHEIG2=1.795
      PVEGA2=1.026
      GOTO9000
C
C               ********************************************************
C               **  STEP 12--                                         **
C               **  TREAT THE TEKTRONIX 4012, 4013, 4014, 4016, 4054, **
C               **  AND 4114 (THESE ARE ALL NON-COLOR (= MONOCHROME)  **
C               **  DEVICES WHICH ARE LARGE SCREEN AND SO HAVE        **
C               **  4 CHARCTER SIZES.)                                **
C               **  REFERENCE--IGL MANUAL, PAGE 6-22                  **
C               ********************************************************
C
 1200 CONTINUE
      IF(PHEIG2.LT.0.75)THEN
        JSIZE=1
        PWIDPP=0.776*RATIV1
        PHOGPP=0.212*RATIV1
        PHEIPP=0.987*RATIV1
        PVEGPP=0.564*RATIV1
        JWIDT2=INT(PWIDPP+0.5)
        JHOGA2=INT(PHOGPP+0.5)
        JHEIG2=INT(PHEIPP+0.5)
        JVEGA2=INT(PVEGPP+0.5)
        PWIDT2=0.776*RATIVH
        PHOGA2=0.212*RATIVH
        PHEIG2=0.987
        PVEGA2=0.564
      ELSEIF(0.75.LT.PHEIG2.AND.PHEIG2.LE.1.25)THEN
        JSIZE=2
        PWIDPP=0.856*RATIV1
        PHOGPP=0.233*RATIV1
        PHEIPP=1.089*RATIV1
        PVEGPP=0.623*RATIV1
        JWIDT2=INT(PWIDPP+0.5)
        JHOGA2=INT(PHOGPP+0.5)
        JHEIG2=INT(PHEIPP+0.5)
        JVEGA2=INT(PVEGPP+0.5)
        PWIDT2=0.856*RATIVH
        PHOGA2=0.233*RATIVH
        PHEIG2=1.089
        PVEGA2=0.623
      ELSEIF(1.25.LT.PHEIG2.AND.PHEIG2.LE.1.75)THEN
        JSIZE=3
        PWIDPP=1.283*RATIV1
        PHOGPP=0.350*RATIV1
        PHEIPP=1.633*RATIV1
        PVEGPP=0.933*RATIV1
        JWIDT2=INT(PWIDPP+0.5)
        JHOGA2=INT(PHOGPP+0.5)
        JHEIG2=INT(PHEIPP+0.5)
        JVEGA2=INT(PVEGPP+0.5)
        PWIDT2=1.283*RATIVH
        PHOGA2=0.350*RATIVH
        PHEIG2=1.633
        PVEGA2=0.933
      ELSE
        JSIZE=4
        PWIDPP=1.410*RATIV1
        PHOGPP=0.385*RATIV1
        PHEIPP=1.795*RATIV1
        PVEGPP=1.026*RATIV1
        JWIDT2=INT(PWIDPP+0.5)
        JHOGA2=INT(PHOGPP+0.5)
        JHEIG2=INT(PHEIPP+0.5)
        JVEGA2=INT(PVEGPP+0.5)
        PWIDT2=1.410*RATIVH
        PHOGA2=0.385*RATIVH
        PHEIG2=1.795
        PVEGA2=1.026
      ENDIF
      GOTO9000
C
C               **************************************************************
C               **  STEP 13--                                               **
C               **  TREAT THE TEKTRONIX 402X CASES                          **
C               **  REFERENCE--IGL MANUAL, PAGE 6-22
C               **************************************************************
C
 1300 CONTINUE
      JSIZE=1
      PWIDPP=1.667*RATIV1
      PHOGPP=0.238*RATIV1
      PHEIPP=2.143*RATIV1
      PVEGPP=1.190*RATIV1
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PWIDT2=1.667*RATIVH
      PHOGA2=0.238*RATIVH
      PHEIG2=2.143
      PVEGA2=1.190
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               ******************************************************
C
 2200 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 23--                                       **
C               **  TREAT THE HEWLETT-PACKARD 2622  CASES           **
C               ******************************************************
C
 2300 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT          CASE            **
C               **  WE CREATE A 0 TO 100 COORDINATE SCALE FOR       **
C               **  LIBPLOT, SO NO NEED TO ADJUST SIZE VALUES       **
C               ******************************************************
C
 2600 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      GOTO9000
C
C               *********************************************************
C               **  STEP 32--                                          **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE  **
C               *********************************************************
C
 3200 CONTINUE
      GOTO9000
C
C               *******************************************************
C               **  STEP 33--                                        **
C               **  TREAT THE CGM CASE                               **
C               *******************************************************
C
 3300 CONTINUE
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               **  THE DEFAULT WIDTH OF A CALCOMP CHARACTER IS THE **
C               **  SAME AS THE HEIGHT (BUT WIDTH = CHARACTER PLUS  **
C               **  SPACING WHILE HEIGHT = CHARACTER ONLY).  THERE IS*
C               **  "SETCHR" CALL FOR SOME CALCOMP PLOTTERS THAT    **
C               **  ALLOWS THE ASPECT RATIO TO BE SET, BUT NOT      **
C               **  IMPLEMENTED HERE SINCE NOT SUPPORTED BY ALL     **
C               **  CALCOMP PLOTTERS (PARTICULARLY EMULATION PACKAGES*
C               ******************************************************
C
 4100 CONTINUE
      PWIDPP=RATIV1*PWIDT2
      PWIDT2=PHEIG2*RATIVH
      PHOGPP=0.
      PHEIPP=RATIV1*PHEIG2
      PVEGPP=0.0
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PHOGA2=0.0
      PVEGA2=0.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
      PWIDPP=RATIV1*PWIDT2
      PWIDT2=PHEIG2*RATIVH
      PHOGPP=0.
      PHEIPP=RATIV1*PHEIG2
      PVEGPP=0.0
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PHOGA2=0.0
      PVEGA2=0.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
      PHEIPP=ANUMVP*PHEIG2/100.
      PVEGPP=ANUMVP*PVEGA2/100.
      PWIDPP=PHEIPP*0.6
      PHOGPP=PVEGPP*0.6
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PHEIG2=REAL(JHEIG2)*100./ANUMVP
      PVEGA2=REAL(JVEGA2)*100./ANUMVP
      PWIDT2=REAL(JWIDT2)*100./ANUMVP
      PHOGA2=REAL(JHOGA2)*100./ANUMVP
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      PWIDPP=0.0
      PHOGPP=0.0
      PHEIPP=0.0
      PVEGPP=0.0
      JWIDT2=0
      JHOGA2=0
      JHEIG2=0
      JVEGA2=0
      PHEIG2=(25.0/100.0)*PHEIG2
      PWIDT2=(75.0/100.0)*PWIDT2
      PHOGA2=0.0
      PVEGA2=0.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
      PWIDPP=0.0
      PHOGPP=0.0
      PHEIPP=0.0
      PVEGPP=0.0
      JWIDT2=0
      JHOGA2=0
      JHEIG2=0
      JVEGA2=0
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               **  NOTE: ZETA LIBRARY HAS ASPECT RATIO TO CONTROL  **
C               **             WIDTH/HEIGHT RATIO.  THE WIDTH       **
C               **             INCLUDES BOTH THE CHARACTER WIDTH AND**
C               **             THE INTERCHARACTER SPACING WHILE THE **
C               **             HEIGHT ONLY INCLUDES THE CHARACTER.  **
C               **             ALSO, BASE THE WIDTH ON THE VERTICAL **
C               **             AXIS (FOR CONSISTENCY) AND THEN      **
C               **             RECALCULATE PWIDT2 (BASED ON         **
C               **             HORIZONTAL SIZE)                     **
C               ******************************************************
C
 5100 CONTINUE
      PTEMP=PWIDT2+PHOGA2
      PRATIO=PTEMP/PHEIG2
      PWIDPP=PTEMP*RATIV1
      PHOGPP=0.
      PHEIPP=RATIV1*PHEIG2
      PVEGPP=0.0
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PWIDT2=PTEMP*RATIVH
      PHOGA2=0.
      PVEGA2=0.
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE                              **
C               ******************************************************
C
 6600 CONTINUE
      PWIDPP=0.50*RATIV1*PHEIG2
      PHOGPP=0.214*RATIV1*PHEIG2
      PHEIPP=1.000*RATIV1*PHEIG2
      PVEGPP=0.750*RATIV1*PHEIG2
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PWIDT2=0.50*RATIVH*PHEIG2
      PHOGA2=0.214*RATIVH*PHEIG2
      PVEGA2=0.750*PHEIG2
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS          CASE                   **
C               ******************************************************
C
C     MARCH, 1991.  HANDLE VARIOUS CHARACTER SIZES CORRECTLY.
C
C     THE SIZE OF THE DEFAULT FONT IN TURBO-C IS 8 BY 8
C     PIXELS.  THIS STANDARD SIZE MAY BE SCALED UP BY
C     FACTORS OF 1, 2, ..., UP TO 10.  THE DISPLAY CELL
C     SIZE IS THE SIZE OF THE CHARACTER CELL (CHARACTER
C     + MARGIN), WHILE THE UNIT CELL SIZE IS THE SIZE OF
C     THE CHARACTER ONLY.  THE DIFFERENCE BETWEEN THEM
C     DEFINES THE HORIZONTAL GAP.  NOTE THAT THE
C     VERTICAL GAP IS BUILT INTO THE CHARACTER ITSELF
C     (I.E., PVEGA2=0.).  THE FOLLOWING TABLE GIVES THE
C     AVAILABLE CHARACTER SIZES:
C
C     SET NUMBER         CELL SIZE          CHARACTER SIZE
C       (JSIZE)       WIDTH BY HEIGHT       WIDTH BY HEIGHT
C 
C     0      GET FROM ALAN
C     1                      [  9, 20]                [  8, 20]
C     2                      [ 18, 30]                [ 16, 30]
C     3                      [ 27, 45]                [ 24, 45]
C     4                      [ 36, 60]                [ 32, 60]
C     5                      [ 45, 75]                [ 40, 75]
C     6                      [ 54, 90]                [ 48, 90]
C     7                      [ 63,105]                [ 56,105]
C     8                      [ 72,120]                [ 64,120]
C     9                      [ 81,135]                [ 72,135]
C    10                      [ 90,150]                [ 90,150]
C    11                      [ 99,165]                [ 88,165]
C    12                      [108,180]                [ 96,180]
C    13                      [117,195]                [104,195]
C    14                      [126,210]                [112,210]
C    15                      [135,225]                [120,225]
C    16                      [144,240]                [128,240]
C
C     RATIV1*PHEIG2 IS THE HEIGHT (IN PIXELS
C     REQUESTED).  THIS SIZE WILL BE ROUNDED TO THE
C     CLOSEST PIXEL HEIGHT IN THE ABOVE TABLE.
C
 8100 CONTINUE
      ATEMP=PHEIG2*RATIV1
      IF(ATEMP.LE.15.0)THEN
        JSIZE=0
        PWIDPP=8.0
        PHOGPP=1.0
        PHEIPP=10.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.25.0)THEN
        JSIZE=1
        PWIDPP=8.0
        PHOGPP=1.0
        PHEIPP=20.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.37.5)THEN
        JSIZE=2
        PWIDPP=16.0
        PHOGPP=2.0
        PHEIPP=30.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.52.5)THEN
        JSIZE=3
        PWIDPP=24.0
        PHOGPP=3.0
        PHEIPP=45.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.67.5)THEN
        JSIZE=4
        PWIDPP=32.0
        PHOGPP=4.0
        PHEIPP=60.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.82.5)THEN
        JSIZE=5
        PWIDPP=40.0
        PHOGPP=5.0
        PHEIPP=75.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.97.5)THEN
        JSIZE=6
        PWIDPP=48.0
        PHOGPP=6.0
        PHEIPP=90.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.112.5)THEN
        JSIZE=7
        PWIDPP=56.0
        PHOGPP=7.0
        PHEIPP=105.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.127.5)THEN
        JSIZE=8
        PWIDPP=64.0
        PHOGPP=8.0
        PHEIPP=120.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.142.5)THEN
        JSIZE=9
        PWIDPP=72.0
        PHOGPP=9.0
        PHEIPP=135.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.157.5)THEN
        JSIZE=10
        PWIDPP=80.0
        PHOGPP=10.0
        PHEIPP=150.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.172.5)THEN
        JSIZE=11
        PWIDPP=88.0
        PHOGPP=11.0
        PHEIPP=165.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.187.5)THEN
        JSIZE=12
        PWIDPP=96.0
        PHOGPP=12.0
        PHEIPP=180.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.202.5)THEN
        JSIZE=13
        PWIDPP=104.0
        PHOGPP=13.0
        PHEIPP=195.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.217.5)THEN
        JSIZE=14
        PWIDPP=112.0
        PHOGPP=14.0
        PHEIPP=210.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.232.5)THEN
        JSIZE=15
        PWIDPP=120.0
        PHOGPP=15.0
        PHEIPP=225.0
        PVEGPP=0.0
      ELSE
        JSIZE=16
        PWIDPP=128.0
        PHOGPP=16.0
        PHEIPP=240.0
        PVEGPP=0.0
      END IF
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PWIDT2=(PWIDPP/ANUMHP)*100.0
      PHOGA2=(PHOGPP/ANUMHP)*100.0
      PHEIG2=(PHEIPP/ANUMVP)*100.0
      PVEGA2=0.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT            CASES           **
C               **  SIZE IS IN POSTSCRIPT UNITS (1/72 = 1 POINT BY  **
C               **  DEFAULT).  DATAPLOT SCALES UNITS BY POINTS PER  **
C               **  INCH, SO 1 UNIT IS (1/POINTS PER INCH) = 1 PIXEL**
C               **  FOR DATAPLOT.                                   **
C               **  NOTE THAT POSTSCRIPT FONTS ARE PROPORTIONALLY   **
C               **  SPACED, SO USE 0.6 OF HEIGHT AS DUMMY VALUE.    **
C               ******************************************************
C
 8600 CONTINUE
      PPI=PSTPPI
      PHEIPP=ANUMVP*PHEIG2/100.
      PVEGPP=ANUMVP*PVEGA2/100.
      PWIDPP=PHEIPP*0.6
      PHOGPP=PVEGPP*0.6
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PHEIG2=REAL(JHEIG2)*100./ANUMVP
      PVEGA2=REAL(JVEGA2)*100./ANUMVP
      PWIDT2=REAL(JWIDT2)*100./ANUMVP
      PHOGA2=REAL(JHOGA2)*100./ANUMVP
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC                  CASES           **
C               **  QMS AND TALARIS LASER PRINTERS                  **
C               **  SIZE DETERMINED BY THE FONT BEING USED          **
C               **  QUIC FONTS USE POINT SIZE.  (POINT=1/72IN)      **
C               **  10   - EDP FONT, 8 POINT, 14 CPI (21 DOT/CHAR)  **
C               **         LANDSCAPE, PORTRAIT                      **
C               **  104  - STANDARD ROMAN MEDIUM, 10 POINT, PROPORT.**
C               **         LANDSCAPE, PORTRAIT                      **
C               **  124  - STANDARD ROMAN BOLD, 10 POINT, PROPORT.  **
C               **                    PORTRAIT                      **
C               **  144  - STANDARD ROMAN ITALIC, 10 POINT, PROPORT.**
C               **                    PORTRAIT                      **
C               **  16   - SIMPLEX ROMAN, 5 POINT PROPORTIONAL      **
C               **                    PORTRAIT                      **
C               **  204  - APOLLO MEDIUM, 10 POINT, PROPORTIONAL    **
C               **         LANDSCAPE, PORTRAIT                      **
C               **  328  - COMPLEX ROMAN BOLD, PROPORTIONAL 15 POINT**
C               **                    PORTRAIT                      **
C               **  404  - Q-TYPEWRITER, 10 POINT, (30 DOT/CHAR)    **
C               **                    PORTRAIT                      **
C               **  444  - Q-TYPEWRITER ITALIC, 30 DOTS WIDE        **
C               **                    PORTRAIT                      **
C               **  NOTE: THE ABOVE ARE "HARDWARE" FONTS.  THE      **
C               **        FOLLOWING ARE "DOWNLOADABLE" FONTS THAT   **
C               **        MAY NOT BE AVAILABLE ON A GIVEN MACHINE   **
C               **                                                  **
C               **  521  - TEKTRONIX SMALL, 12 CPI (25 DOT/CHAR) 8.0 POINT
C               **         LANDSCAPE                                **
C               **  522  - TEKTRONIX MEDIU, 10 CPI (30 DOT/CHAR)10.3 POINT
C               **         LANDSCAPE                                **
C               **  523  - TEKTRONIX BIG,  7.9 CPI (38 DOT/CHAR)12.3 POINT
C               **         LANDSCAPE                                **
C               **  524  - TEKTRONIX XBIG, 7.3 CPI (41 DOT/CHAR)13.7 POINT
C               **         LANDSCAPE                                **
C               **  532  - UNION 10 POINT, 12 CPI (25 DOTS/CHAR)    **
C               **                    PORTRAIT                      **
C               **  517  - Q-GREEK 10 POINT, 10 CPI (30 DOTS/CHAR)  **
C               **         LANDSCAPE, PORTRAIT                      **
C               **  536  - Q-GREEK 10 POINT, 12 CPI (25 DOTS/CHAR)  **
C               **         LANDSCAPE, PORTRAIT                      **
C               **  904  - Q-GOTHIC 10 POINT, 12 CPI (25 DOTS/CHAR) **
C               **         LANDSCAPE, PORTRAIT                      **
C               **  924  - Q-GOTHIC ITALIC, 10 POINT, 12 CPI (25 DOTS)
C               **         LANDSCAPE, PORTRAIT                      **
C               **  IF THE REQUESTED FONT IS NOT AVAILABLE IN THE   **
C               **  GIVEN ORIENTATION (LANDSCAPE OR PORTRAIT), THE  **
C               **  EDP FONT WILL BE USED (BUT VALUE OF IQUIFN NOT  **
C               **  MODIFIED).                                      **
C               **  THE CPI GIVEN FOR THE PROPORTIONAL FONTSIS JUST **
C               **  A GUIDE, TABLES ARE USED TO FIND LENGTH OF STRING*
C               **  REFERENCE--QUIC PROGRAMMERS MANUAL,             **
C               **             APPENDIX B                           **
C               ******************************************************
C
 9100 CONTINUE
      PPI=QUIPPI
      IFONTT=IQUIFN
      IF(IORNSW.EQ.'PORT' .AND.(
     1   IFONTT.EQ.521 .OR. IFONTT.EQ.522 .OR.
     1   IFONTT.EQ.523 .OR. IFONTT.EQ.524))IFONTT=10
      IF(IORNSW.NE.'PORT'.AND.(
     1   IFONTT.EQ.124 .OR. IFONTT.EQ.144 .OR.
     1   IFONTT.EQ.16  .OR. IFONTT.EQ.328 .OR.
     1   IFONTT.EQ.998 .OR. IFONTT.EQ.404 .OR.
     1   IFONTT.EQ.444 .OR. IFONTT.EQ.532))IFONTT=10
      IF(IFONTT.EQ.16) THEN
        APOINT=5.0
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.10) THEN
        APOINT=8.
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.104)THEN
        APOINT=10.
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.124)THEN
        APOINT=10.
         AWIDTH=21.
      ELSE IF(IFONTT.EQ.144)THEN
        APOINT=10.
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.204)THEN
        APOINT=10.
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.404)THEN
        APOINT=10.
         AWIDTH=30.
      ELSE IF(IFONTT.EQ.444)THEN
        APOINT=10.
        AWIDTH=30.
      ELSE IF(IFONTT.EQ.328)THEN
        APOINT=15.
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.998)THEN
        APOINT=15.
        AWIDTH=21.
      ELSE IF(IFONTT.EQ.521)THEN
        APOINT=8.
        AWIDTH=25.
      ELSE IF(IFONTT.EQ.522)THEN
        APOINT=10.3
        AWIDTH=30.
      ELSE IF(IFONTT.EQ.523)THEN
        APOINT=12.3
        AWIDTH=38.
      ELSE IF(IFONTT.EQ.524)THEN
        APOINT=13.7
        AWIDTH=41.
      ELSE IF(IFONTT.EQ.532)THEN
        APOINT=10.
        AWIDTH=25.
      ELSE IF(IFONTT.EQ.517)THEN
        APOINT=10.
        AWIDTH=30.
      ELSE IF(IFONTT.EQ.536)THEN
        APOINT=10.
        AWIDTH=25.
      ELSE IF(IFONTT.EQ.664)THEN
        APOINT=10.
        AWIDTH=25.
      ELSE IF(IFONTT.EQ.904)THEN
        APOINT=10.
        AWIDTH=25.
      ELSE IF(IFONTT.EQ.924)THEN
        APOINT=10.
        AWIDTH=25.
      ELSE
        APOINT=8.
        AWIDTH=21.
        IFONTT=10
      END IF
      PHEIPP=(APOINT/72.)*PPI
      PVEGPP=0.
      PWIDPP=AWIDTH
      PHOGPP=0.
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=0
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=0
      PHEIG2=PHEIPP*100./ANUMVP
      PVEGA2=0.
      PWIDT2=PWIDPP*100./ANUMHP
      PHOGA2=0.
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11            CASE                   **
C               **  THE UNDERLYING C LIBRARY WILL HANDLE CHARACTER  **
C               **  SIZE, JUSTIFICATION, AND POSITIONING VIA XLIB   **
C               **  CALLS.  THEREFORE, THIS IS A NULL ROUTINE.      **
C               ******************************************************
C
C     2023/11: SUPPORT FOR SCALABLE FONTS ADDED.  TEXT SIZES ARE GIVEN
C              AS POINT SIZES.   ASSUME A 72DPI RESOLUTION FOR X11.
C              NOTE THAT ONLY INTEGER POINT SIZES SUPPORTED.
C
 9600 CONTINUE
      PHEIPP=ANUMVP*PHEIG2/100.
      JSIZE=INT(PHEIPP+0.5)
      APNT=REAL(INT(JSIZE))
      PHEIPP=APNT
      PVEGPP=0.0
      PWIDPP=PHEIPP*0.6
      PHOGPP=0.0
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PWIDT2=(PWIDPP/ANUMHP)*100.0
      PHOGA2=0.0
      PHEIG2=0.75*(PHEIPP/ANUMVP)*100.0
      PVEGA2=0.25*(PHEIPP/ANUMVP)*100.0
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 93.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 327.                       **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS
C               **             USING TURBO C, PAGE 52.         **
C               *************************************************
C
C     THE CELL SIZE OF THE DEFAULT FONT IN TURBO-C IS 8 BY 8
C     PIXELS.  THIS STANDARD SIZE MAY BE SCALED UP BY
C     FACTORS OF 1, 2, ..., UP TO 10.  THE CELL SIZE IS
C     THE SIZE OF THE CHARACTER + MARGIN.  THE CHARACTER
C     SIZE IS THE SIZE OF THE CHARACTER ONLY.  NOTE THAT
C     THE VERTICAL GAP AND HORIZONTAL GAP IS BUILT INTO   ?????
C     THE CHARACTER ONLY (I.E., PVEGA2 = PHOGA2 = 0).
C     THE FOLLOWING TABLE GIVES THE AVAILABLE CHARACTER SIZES:
C
C     SET NUMBER         CELL SIZE          CHARACTER SIZE
C       (JSIZE)       HEIGHT BY WIDTH       HEIGHT BY WIDTH
C      1                   8,8                    7,7
C      2                  16,16                  14,14
C      3                  24,24                  21,21
C      4                  32,32                  28,28
C      5                  40,40                  35,35
C      6                  48,48                  42,42
C      7                  56,56                  49,49
C      8                  64,64                  56,56
C      9                  72,72                  63,63
C     10                  80,80                  70,70
C
C     RATIV1*PHEIG2 IS THE HEIGHT (IN PIXELS
C     REQUESTED).  THIS SIZE WILL BE ROUNDED TO THE
C     CLOSEST PIXEL HEIGHT IN THE ABOVE TABLE.
C
10000 CONTINUE
      ATEMP=PHEIG2*RATIV1
      IF(ATEMP.LE.12.0)THEN
        JSIZE=1
        PWIDPP=8.0
        PHOGPP=0.0
        PHEIPP=8.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.20.0)THEN
        JSIZE=2
        PWIDPP=16.0
        PHOGPP=0.0
        PHEIPP=16.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.28.0)THEN
        JSIZE=3
        PWIDPP=24.0
        PHOGPP=0.0
        PHEIPP=24.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.36.0)THEN
        JSIZE=4
        PWIDPP=32.0
        PHOGPP=0.0
        PHEIPP=32.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.44.0)THEN
        JSIZE=5
        PWIDPP=40.0
        PHOGPP=0.0
        PHEIPP=40.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.52.0)THEN
        JSIZE=6
        PWIDPP=48.0
        PHOGPP=0.0
        PHEIPP=48.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.60.0)THEN
        JSIZE=7
        PWIDPP=56.0
        PHOGPP=0.0
        PHEIPP=56.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.68.0)THEN
        JSIZE=8
        PWIDPP=64.0
        PHOGPP=0.0
        PHEIPP=64.0
        PVEGPP=0.0
      ELSE IF(ATEMP.LE.76.0)THEN
        JSIZE=9
        PWIDPP=72.0
        PHOGPP=0.0
        PHEIPP=72.0
        PVEGPP=0.0
      ELSE
        JSIZE=10
        PWIDPP=80.0
        PHOGPP=0.0
        PHEIPP=80.0
        PVEGPP=0.0
      END IF
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PWIDT2=(PWIDPP/ANUMHP)*100.0
      PHOGA2=0.0
      PHEIG2=(PHEIPP/ANUMVP)*100.0
      PVEGA2=0.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               ******************************************************
C
12000 CONTINUE
      PHEIPP=ANUMVP*PHEIG2/100.
      PVEGPP=ANUMVP*PVEGA2/100.
      PWIDPP=PHEIPP*0.6
      PHOGPP=PVEGPP*0.6
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PHEIG2=REAL(JHEIG2)
      PVEGA2=REAL(JVEGA2)
      PWIDT2=REAL(JWIDT2)
      PHOGA2=REAL(JHOGA2)
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
      PHEIPP=ANUMVP*PHEIG2/100.
      PVEGPP=ANUMVP*PVEGA2/100.
      PWIDPP=PHEIPP*0.6
      PHOGPP=PVEGPP*0.6
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PHEIG2=REAL(JHEIG2)
      PVEGA2=REAL(JVEGA2)
      PWIDT2=REAL(JWIDT2)
      PHOGA2=REAL(JHOGA2)
      GOTO9000
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
C     LATEX SUPPORTS 10 SIZES.  NOTE THAT THE SPECIFIC SIZE USED WILL
C     DEPEND ON THE FONT SELECTED AND THE DEFAULT DOCUMENT POINT SIZE.
C     THE FOLLOWING POINT SIZES ARE BASED ON THE DEFAULT CMR FONT AND
C     A DEFAULT DOCUMENT SIZE OF 12PT.
C
C     WE ARE USING A 300DPI COORDINATE SCALE AND THERE ARE 72 POINTS PER
C     INCH.  THIS IMPLIES 4.16 PIXELS PER POINT (APPROXIMATELY).
C
C       1. \tiny          =  6 POINT  = 25 PIXELS
C       2. \scriptsize    =  8 POINT  = 33 PIXELS
C       3. \footnotesize  = 10 POINT  = 42 PIXELS
C       4. \small         = 10 POINT  = 42 PIXELS
C       5. \normalsize    = 12 POINT  = 50 PIXELS
C       6. \large         = 12 POINT  = 50 PIXELS
C       7. \Large         = 17 POINT  = 71 PIXELS
C       8. \LARGE         = 17 POINT  = 71 PIXELS
C       9. \huge          = 17 POINT  = 71 PIXELS
C      10. \Huge          = 17 POINT  = 71 PIXELS
C
15000 CONTINUE
      PHEIPP=ANUMVP*PHEIG2/100.
      IF(PHEIPP.LE.29.0)THEN
        JSIZE=1
        APNT=6.0
      ELSEIF(PHEIPP.LE.37.0)THEN
        JSIZE=2
        APNT=8.0
      ELSEIF(PHEIPP.LE.42.0)THEN
        JSIZE=3
        APNT=10.0
      ELSEIF(PHEIPP.LE.46.0)THEN
        JSIZE=4
        APNT=10.0
      ELSEIF(PHEIPP.LE.58.0)THEN
        JSIZE=5
        APNT=12.0
      ELSEIF(PHEIPP.LE.70.0)THEN
        JSIZE=6
        APNT=12.0
      ELSEIF(PHEIPP.LE.75.0)THEN
        JSIZE=7
        APNT=17.0
      ELSEIF(PHEIPP.LE.80.0)THEN
        JSIZE=8
        APNT=17.0
      ELSEIF(PHEIPP.LE.85.0)THEN
        JSIZE=9
        APNT=17.0
      ELSE
        JSIZE=10
        APNT=17.0
      ENDIF
      PHEIPP=APNT*4.16
      PVEGPP=0.0
      PWIDPP=PHEIPP*0.6
      PHOGPP=0.0
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PWIDT2=(PWIDPP/ANUMHP)*100.0
      PHOGA2=0.0
      PHEIG2=0.75*(PHEIPP/ANUMVP)*100.0
      PVEGA2=0.25*(PHEIPP/ANUMVP)*100.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      PWIDPP=RATIV1*PWIDT2
      PWIDT2=PHEIG2*RATIVH
      PHOGPP=0.
      PHEIPP=RATIV1*PHEIG2
      PVEGPP=0.0
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      PHOGA2=0.0
      PVEGA2=0.0
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
      PHEIPP=ANUMVP*PHEIG2/100.
      PVEGPP=ANUMVP*PVEGA2/100.
      PWIDPP=PHEIPP*0.6
      PHOGPP=PVEGPP*0.6
      JHEIG2=INT(PHEIPP+0.5)
      JVEGA2=INT(PVEGPP+0.5)
      JWIDT2=INT(PWIDPP+0.5)
      JHOGA2=INT(PHOGPP+0.5)
      PHEIG2=REAL(JHEIG2)*100./ANUMVP
      PVEGA2=REAL(JVEGA2)*100./ANUMVP
      PWIDT2=REAL(JWIDT2)*100./ANUMVP
      PHOGA2=REAL(JHOGA2)*100./ANUMVP
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRSI')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRSI--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9014)JSIZE
 9014   FORMAT('JSIZE = ',I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9015)JHEIG2,JWIDT2,JVEGA2,JHOGA2
 9015   FORMAT('JHEIG2,JWIDT2,JVEGA2,JHOGA2 = ',4I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9016)PHEIG2,PWIDT2,PVEGA2,PHOGA2
 9016   FORMAT('PHEIG2,PWIDT2,PVEGA2,PHOGA2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9017)PHEIPP,PWIDPP,PVEGPP,PHOGPP
 9017   FORMAT('PHEIPP,PWIDPP,PVEGPP,PHOGPP = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRTRTH(ICASE,PTHICK,JTHICK,PTHIC2)
C
C     PURPOSE--FOR A LINE, REGION, MARKER, OR TEXT, TRANSLATE A DESIRED
C              LINE THICKNESS (IN PTHICK) GIVEN IN (0.0 TO 100.0)
C              REPRESENTATION INTO AN INTEGER NUMERIC REPRESENTATION (IN
C              JTHICK) THAT WILL BE UNDERSTOOD BY THE SPECIFIC GRAPHICS
C              DEVICE BEING USED.  ALSO, CREATE A SECOND VARIABLE
C              (PTHIC2) WHICH CONTAINS THE CLOSEST ALLOWABLE LINE
C              THICKNESS VALUE (IN 0.0 TO 100.0 UNITS) THAT IS PERMITTED
C              ON THE TEKTRONIX GRAPHICS DEVICE BEING USED.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989. SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989. POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989. ZETA (BY ALAN HECKERT)
C     UPDATED         --MARCH    1990. X11 (BY ALAN HECKERT)
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD, CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT LATEX
C     UPDATED         --OCTOBER  2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER  2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                      GRAPHICS DEVICES
C     UPDATED         --OCTOBER  2020. IF LINE THICKNESS SET BY DEVICE,
C                                      SET JTHICK = -1
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
      CHARACTER*4 ICASE
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERRG4='NO'
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRTH')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRTRTH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,52)PTHICK,ICASE,IMANUF,IMODEL,IBUGG4
   52   FORMAT('PTHICK,ICASE,IMANUF,IMODEL,IBUGG4 = ',G15.7,3(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ************************************************
C               **  STEP 0--                                  **
C               **  DEFINE THICKNESS                          **
C               **  FOR A GENERAL GRAPHICS DEVICE             **
C               **  THICKNESS WILL BE SET IN                  **
C               **  HARDWARE IF THE DEVICE SUPPORTS           **
C               **  THIS CAPABILITY.  OTHERWISE THE           **
C               **  FOLLOWING ALGORITHIM IS USED.             **
C               **  1)  DRAW A LINE WITH THE REQUESETED COORD.**
C               **  2)  PDELTA=(PTHICK/PDEVTH)/2.             **
C               **  3)  AINC  = PDELTA/PDEVTH                 **
C               **  4)  NINC  = AINC+0.9                      **
C               **  5)  JTHICK=NINC                           **
C               **      PTHIC2=PDELTA/REAL(NINC)              **
C               **  WHERE                                     **
C               **      PTHICK IS THE USER REQUESTED THICKNESS**
C               **      PDEVTH IS ONE LINE THICKNESS FOR A    **
C               **             SPECIFIC DEVICE.               **
C               **      "DPDRPL" WILL DRAW THE MIDDLE LINE.   **
C               **      IT THEN SPLITS THE REMAINING THICKNESS**
C               **      INTO AN "ABOVE" AND "BELOW" PART.     **
C               **      NINC IS THE NUMBER OF ADDITIONAL LINES**
C               **      REQUIRED (BOTH ABOVE AND BELOW THE    **
C               **      INITIAL LINE).  THE DISTANCE IS THEN  **
C               **      DIVIDED BY NINC TO GET THE "DELTA"    **
C               **      USED BY "DPDRPL", I.E., THE AMOUNT    **
C               **      ADDED TO THE COORDINATES TO DRAW THE  **
C               **      NEXT LINE.  THE 0.9 IS "FUDGE FACTOR".**
C               **      FOR EXAMPLE, ON A TEKTRONIX WITH A    **
C               **      LINE THICKNESS OF 0.1, A USER REQUESTED*
C               **      THICKNESS OF 0.12 IS REQUIRED BEFORE  **
C               **      ADDITIONAL LINES WILL BE DRAWN.       **
C               ************************************************
C
C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX CASE                        **
C               ******************************************************
C
 1100 CONTINUE
CCCCC PPENTH=PTEKTH
      PTHIC2=PTEKTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX.                             **
C               ******************************************************
C
 2100 CONTINUE
CCCCC PPENTH=P722TH
      PTHIC2=P722TH
      GOTO8000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE XX, XXX.                        **
C               ******************************************************
C
 2200 CONTINUE
CCCCC PPENTH=PHPGTH
      PTHIC2=PHPGTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 23--                                       **
C               **  TREAT THE HEWLETT-PACKARD 2622  CASES           **
C               ******************************************************
C
 2300 CONTINUE
CCCCC PPENTH=P262TH
      PTHIC2=P262TH
      GOTO8000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE UNIX LIBPLOT  CASE                    **
C               ******************************************************
C
 2600 CONTINUE
      PTHIC2=PTHICK
      JTHICK=-1
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               **  2 CASES: LET THE POST-PROCESSOR DO THE LINE     **
C               **           THICKNESS (IPTHSW='OFF') OR HAVE       **
C               **           DATAPLOT DO BY DRAWING MULTIPLE LINES  **
C               **           IF DATAPLOT DOES IT, THE LINE THICKNESS**
C               **           IS TAKEN FROM (PPENSW).                **
C               ******************************************************
C
 3100 CONTINUE
      IF(IPTHSW.EQ.'ON')THEN
CCCCC   PPENTH=PPENSW
        PTHIC2=PPENSW
        GOTO8000
      ELSE
        PTHIC2=PTHICK
        JTHICK=0
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  (NOT DONE)                                      **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
CCCCC PPENTH=PCALTH
      PTHIC2=PCALTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
CCCCC PPENTH=PLAHTH
      PTHIC2=PLAHTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
C
C     2020/11: FOR BETTER CONSISTENCY, USE A VALUE OF 1,000 PIXELS.
C              THE NUMBER OF VERTICAL PIXEL POINTS IS VARIABLE.
C
CCCCC PTHIC2=100.*(1./ANUMVP)
      PTHIC2=100.*(1./1000.)
      GOTO8000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
      JTHICK=-1
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
CCCCC PPENTH=100.*(1./ANUMVP)
      PTHIC2=100.*(1./ANUMVP)
      GOTO8000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
CCCCC PPENTH=100.*(1./ANUMVP)
      PTHIC2=100.*(1./ANUMVP)
      GOTO8000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 AND B-1                    **
C               ******************************************************
C
 5100 CONTINUE
CCCCC PPENTH=PZETTH
      PTHIC2=PZETTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN       CASE                        **
C               ******************************************************
C
 6600 CONTINUE
CCCCC PPENTH=PSUNTH
      PTHIC2=PSUNTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE REGIS     CASE                        **
C               ******************************************************
C
 8100 CONTINUE
CCCCC PPENTH=PREGTH
      PTHIC2=PREGTH
      GOTO8000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               ******************************************************
C
 8600 CONTINUE
C
C     THE POSTSCRIPT PROTOCOL LETS THE HARDWARE LINE THICKNESS BE SET
C     IN USER COORDINATES.  BASE THE THICKNESS ON THE VERTICAL SIZE.
C     TYPICALLY, 8.5*300.  UNLIKE THE QUIC PROTOCOL, POSTSCRIPT SUPPORTS
C     RESOLUTIONS OTHER THAN 300 DPI, SO DO NOT "HARD CODE" AS IN THE
C     QUIC CASE.
C     PTHIC2 WILL BE SET TO THE NUMBER OF PIXELS WIDE THE LINE WILL BE.
C     (PTHICK/100.)=(PIXELS/(ANUMVP)) IMPLIES PIXELS=PTHICK*ANUMVP/100.
C
      ATEMP=PTHICK*ANUMVP/100.
      ITEMP=INT(ATEMP+0.5)
      IF(ITEMP.LT.1)ITEMP=1
      IF(ITEMP.GT.50)ITEMP=50
      PTHIC2=REAL(ITEMP)
      JTHICK=-1
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC      CASE                        **
C               ******************************************************
C
 9100 CONTINUE
C
C     THE QUIC PROTOCOL LETS THE HARDWARE LINE THICKNESS BE SET FROM
C     1 TO 31 PIXELS WIDE.  BASE THE THICKNESS ON 8.5 INCHES HEIGHT
C     (X300=2,550 PIXELS).  THIS WAY, LINE THICKNESS WILL NOT DEPEND
C     ON WHETHER LANDSCAPE OR PORTRAIT MODE IN EFFECT.
C     JTHICK IS THE NUMBER OF LOOPS TO DRAW THICKER LINES, SO SET TO 0.
C     PTHIC2 WILL BE SET TO THE NUMBER OF PIXELS WIDE THE LINE WILL BE.
C     (PTHICK/100.)=(PIXELS/(8.5*300)) IMPLIES PIXELS=PTHICK*(8.5*300)/100.
C                                                    =PTHICK*25.5
C     NOTE: PIXELS GO IN ODD INCREMENTS ONLY, I.E., 1,3,5,7, .. ,31.
C
      ATEMP=PTHICK*25.5
      ITEMP=INT(ATEMP+0.5)
      IF(ITEMP.LT.1)ITEMP=1
      IF(ITEMP.GT.31)ITEMP=31
      PTHIC2=REAL(ITEMP)
      IJUNK=MOD(INT(PTHIC2),2)
      IF(IJUNK.EQ.0)PTHIC2=PTHIC2+1.
      JTHICK=0
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  BASE THICKNESS ON "1000" POINTS SO THAT NUMBER  **
C               **  OF PIXELS FOR LINE WIDTH DOES NOT DEPEND ON THE **
C               **  PARTICULAR WINDOW OR THE PARTICULAR WORKSTATION **
C               **  PTHIC2 IS THE NUMBER OF PIXELS WIDE TO MAKE THE **
C               **  LINE.                                           **
C               ******************************************************
C
 9600 CONTINUE
      ATEMP=PTHICK*(1000.)/100.
      ITEMP=INT(ATEMP+0.5)
      IF(ITEMP.LT.1)ITEMP=1
      IF(ITEMP.GT.15)ITEMP=15
      PTHIC2=REAL(ITEMP)
      IJUNK=MOD(ITEMP,2)
      IF(IJUNK.EQ.0)PTHIC2=PTHIC2+1.
      JTHICK=-1
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 83.          **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 321.                       **
C               *************************************************
C
10000 CONTINUE
C
      ATEMP=PTHICK*ANUMVP/100.
      ITEMP=INT(ATEMP+0.5)
      IF(ITEMP.LT.1)ITEMP=1
      IF(ITEMP.GT.3)ITEMP=3
      PTHIC2=REAL(ITEMP)
      IJUNK=MOD(ITEMP,2)
      IF(IJUNK.EQ.0)PTHIC2=PTHIC2+1.
      JTHICK=-1
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
CCCCC PPENTH=0.1
      PTHIC2=0.1
      GOTO8000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               **  BASE THICKNESS ON "1000" POINTS SO THAT NUMBER  **
C               **  OF PIXELS FOR LINE WIDTH DOES NOT DEPEND ON THE **
C               **  PARTICULAR WINDOW OR THE PARTICULAR WORKSTATION **
C               **  PTHIC2 IS THE NUMBER OF PIXELS WIDE TO MAKE THE **
C               **  LINE.                                           **
C               ******************************************************
C
12000 CONTINUE
CCCCC PPENTH=100.*(1./ANUMVP)
      PTHIC2=100.*(1./ANUMVP)
      GOTO8000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
CCCCC PPENTH=100.*(1./ANUMVP)
      PTHIC2=100.*(1./ANUMVP)
      GOTO8000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
C     NOTE: AQUA LINE THICKNESS SET IN TERMS OF POINT SIZE.  AQUA
C           SCREEN SET IN POINT SIZE AS WELL.
C
C           PUT A CHECK IN FOR ANUMVP IN CASE IT HAS NOT BEEN DEFINED.
C
13500 CONTINUE
      IF(ANUMVP.LT.100 .OR. ANUMVP.GT.10000)THEN
        ATEMP=PTHICK*450/100.
        IF(ATEMP.LT.0.1)ATEMP=0.1
        IF(ATEMP.GT.50.0)ATEMP=50.0
      ELSE
        ATEMP=PTHICK*ANUMVP/100.
        IF(ATEMP.LT.0.1)ATEMP=0.1
        IF(ATEMP.GT.50.0)ATEMP=50.0
      ENDIF
      PTHIC2=ATEMP
      JTHICK=-1
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      IF(ILATLT.EQ.'HARD')THEN
        JTHICK=-1
        IF(PTHICK.GE.0.25)THEN
          PTHIC2=0.3
        ELSEIF(PTHICK.GE.0.15)THEN
          PTHIC2=0.2
        ELSE
          PTHIC2=0.1
        ENDIF
      ELSE
C
C       FOR LATEX, ASSUME SINGLE LINE WIDTH IS 1 POINT WIDE.
C       SINCE OUR COORDINATE SYSTEM IS SET TO 300 DPI (ONE
C       POINT IS 1/72 OF AN INCH), THIS TRANSLATES TO
C       ABOUT 4 PIXEL UNITS.
C
        APIX=2.0
        PTHIC2=100.*(APIX/ANUMVP)
        GOTO8000
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
      ATEMP=PTHICK*ANUMVP/100.
      ITEMP=INT(ATEMP+0.5)
      IF(ITEMP.LT.1)ITEMP=1
      IF(ITEMP.GT.50)ITEMP=50
      PTHIC2=REAL(ITEMP)
      JTHICK=-1
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
CCCCC PTHIC2=PTHICK*ANUMVP/100.
      IF(PTHICK.LT.0.1)THEN
        AVAL=0.1
      ELSEIF(PTHICK.GT.10.0)THEN
        AVAL=10.0
      ELSE
        AVAL=PTHICK
      ENDIF
      PTHIC2=AVAL*ANUMVP/100.0
      JTHICK=-1
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
 8000 CONTINUE
C
C     IF PTHICK <= 0.1, THEN RESTRICT TO A SINGLE LINE WIDTH.
C
      IF(PTHICK.LE.0.1)THEN
        JTHICK=1
      ELSE
        AVAL=PTHICK/PTHIC2
        JTHICK=INT(AVAL+0.9)
        IF(JTHICK.LT.1)JTHICK=1
        IF(MOD(JTHICK,2).EQ.0)JTHICK=JTHICK+1
      ENDIF
CCCCC PDELTA=(PTHICK-PPENTH)/2.
CCCCC IF(PDELTA.GT.0.0.AND.PPENTH.GT.0.0)THEN
CCCCC   AINC=PDELTA/PPENTH
CCCCC   NINC=INT(AINC+0.9)
CCCCC   JTHICK=NINC
CCCCC   PTHIC2=PTHICK
CCCCC   IF(NINC.GE.1)PTHIC2=PDELTA/REAL(NINC)
CCCCC ELSE
CCCCC   JTHICK=0
CCCCC   PTHIC2=PTHICK
CCCCC ENDIF
      GOTO9000
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'TRTH')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRTRTH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)PTHICK,JTHICK,PTHIC2,IERRG4
 9013   FORMAT('PTHICK,JTHICK,PTHIC2,IERRG4 = ',G15.7,I8,G15.7,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRWRTH(PX1,PY1,ICTEXT,NCTEXT,
     1                  IPATT,IFONT,ICASE,IJUST,IDIR,ANGLE,IFILL,
     1                  ICOL,ICOLR,ICOLG,ICOLB,IRGBFL,
     1                  JPATT,JFONT,JCASE,JJUST,JDIR,ANGLE2,JFILL,JCOL,
     1                  PHEIGH,PWIDTH,PVEGAP,PHOGAP,PTHICK,JSIZE,
     1                  JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2,
     1                  JTHICK,PTHIC2,PXLEC,PXLECG,PYLEC,PYLECG,
     1                  ISYMBL,ISPAC,PX99,PY99)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, AND FOR THE STANDARD
C              (HARDWARE-GENERATED) FONT, GO TO THE POINT (PX1,PY1) AND
C              WRITE OUT THE TEXT STRING (IN A HORIZONTAL DIRECTION)
C              CONTAINED IN THE CHARACTER VECTOR ICTEXT(.), WHICH
C              CONSISTS OF NCTEXT CHARACTERS.
C     NOTE--PX1 AND PY1 ARE IN STANDARDIZED COORDINATES
C           THAT IS, EACH IS 0.0 TO 100.0.
C     NOTE--THE SUBSECTION    RWIND    HAS BEEN EXTRACTED OUT OF PLOT
C           CONTROL COMMON.  THIS (AND GRWRTV) ARE THE ONLY SUBROUTINES
C           WHERE THIS SUB-EXTRACTION HAS BEEN DONE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --MARCH     1986
C     UPDATED         --JANUARY   1989 SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY   1989 POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989 CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989 QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989 CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY   1989 ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL     1989 SOFT-CODE BACKSLASH FOR UNIX
C     UPDATED         --OCTOBER   1989 RWIND CORRECTION (NELSON HSU)
C     UPDATED         --MARCH     1990 X11 (BY ALAN HECKERT)
C     UPDATED         --JULY      1990 PACK HP 2622 OUTPUT
C     UPDATED         --MARCH     1991 PACK REGIS OUTPUT.  ALSO, REGIS
C                                      POSITIONS CHARACTER BELOW RATHER
C                                      THAN ABOVE CURRENT POSITION.
C     UPDATED         --MAY       1991 RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY       1991 VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --MAY       1991 FIX POSTSCRIPT CHAR. INDICES.
C     UPDATED         --OCTOBER   1991 POSTSCRIPT FONTS (ALAN)
C     UPDATED         --SEPTEMBER 1994 FIX TURBO-C SECTION
C                                      BAD C-SIDE MULTIPLOTTING (SCALING)
C     UPDATED         --JANUARY   1995 FIX FRONT END TIC LABEL JUST.
C     UPDATED         --SEPTEMBER 1995 RETROACTIVE JIM/ALAN MERGE
C     UPDATED         --SEPTEMBER 1995 FIX TURBO-C SECTION
C                                      BAD C-SIDE MULTIPLOTTING (SCALING)
C                                      (AGAIN)
C     UPDATED         --SEPTEMBER 1995 REFIX TURBO-C SECTION
C     UPDATED         --JULY      1996 LAHEY DRIVER (ALAN HECKERT)
C                                      OLD, CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER   1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER   1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER   1996 GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER   1996 BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1996 DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER   1997 LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER  1997 GENERAL CODED FOR GUI
C     UPDATED         --JULY      1998 LAHEY WINTERACTOR
C     UPDATED         --JUNE      2000 GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE      2000 MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE      2000 PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH     2002 LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH     2002 SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH     2005 SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY  2006 IMPLEMENT LATEX DRIVER
C     UPDATED         --MARCH     2008 SUPPORT FOR HARDWARE
C                                      CHARACTERS FOR GD DEVICE
C     UPDATED         --FEBRUARY  2009 SUBSCRIPT, SUPERSCRIPTS, GREEK
C                                      CHARACTERS FOR POSTSCRIPT DEVICE
C     UPDATED         --APRIL     2009 IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL     2009 REMOVE PCL, RAMTEK, PRIN, XXXX
C                                      DRIVERS (THESE WERE NEVER ACTUALLY
C                                      IMPLEMENTED)
C     UPDATED         --SEPTEMBER 2009 UPDATE SVG DRIVER
C     UPDATED         --FEBRUARY  2012 "<" AND ">" IN STRINGS FOR SVG
C     UPDATED         --JULY      2015 ISSUE WITH TEXT FOR SVG DRIVER
C                                      WHEN USING THE CHROME BROWSER
C     UPDATED         --SEPTEMBER 2015 FIX GREYSCALE COLOR FOR SVG
C     UPDATED         --NOVEMBER  2015 FOR SVG, CHECK FOR "&" IN TEXT
C     UPDATED         --OCTOBER   2016. ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER   2016. ADD TEMPLATES FOR SEVERL FUTURE
C                                       GRAPHICS DEVICES
C     UPDATED         --DECEMBER  2020. CHECK FOR > 130 FOR SVG DEVICE
C     UPDATED         --OCTOBER   2023. SCALABLE FONTS FOR X11
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
      TYPE (XYCOORD) XY
CCCCC TYPE (FONTINFO) MSFONT
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*4 ICTEXT
#ifdef HAVE_LIBPLOT
      CHARACTER*4 ICTEX2(255)
#endif
      CHARACTER*4 IPATT
      CHARACTER*4 IFONT
      CHARACTER*4 ICASE
      CHARACTER*4 IJUST
      CHARACTER*4 IDIR
      CHARACTER*4 IFILL
      CHARACTER*4 ICOL
      CHARACTER*4 IJUSTH
      CHARACTER*4 IJUSTV
      CHARACTER*24 ISYMBL
      CHARACTER*4 ISPAC
      CHARACTER*4 IC4
      CHARACTER*1 IC
      CHARACTER*1 IC1
      CHARACTER*1 IC2
      CHARACTER*1 ICARAT
      CHARACTER*1 IQUOTE
      CHARACTER*2 ICJUNK
      CHARACTER*130 ICSTR
      CHARACTER*130 ICSTR2
      CHARACTER*130 ICSTR3
      CHARACTER*4 ISUBN0
      CHARACTER*4 IERROR
      CHARACTER*4 ISUBRO
      CHARACTER*4 ICTEMP
C
      DIMENSION ICTEXT(*)
      INTEGER STRING(130)
      INTEGER IADE(80)
#ifdef HAVE_LAHEY_CALCOMP
      DIMENSION IHOLL(33)
      CHARACTER*40 CLAHEY
      REAL RLAHEY(7)
      INTEGER ILAHEY(9)
#endif
#ifdef HAVE_CALCOMP
      DIMENSION IHOLL2(33)
#endif
#ifdef HAVE_ZETA
      DIMENSION IHOLL3(33)
#endif
C
      PARAMETER (MAXSYM=25)
      INTEGER ISTARV(MAXSYM)
      INTEGER ISTOPV(MAXSYM)
      INTEGER IFONTP(MAXSYM)
      REAL SIZEV(MAXSYM)
      REAL OFFSEV(MAXSYM)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      COMMON /RWIND/
     1PWXMIN,PWXMAX,PWYMIN,PWYMAX,PWZMIN,PYZMAX,
     1WWXMIN,WWXMAX,WWYMIN,WWYMAX,WWZMIN,WWZMAX
C
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERROR='OFF '
      ISUBN0='WRTH'
      ISUBRO=ISUBG4
      IC4='-999'
      IC='-'
      IC1='-'
      IC2='-'
C
      NCSTR=(-999)
      K=(-999)
      K=(-999)
      NCTEP2=(-999)
      PXDEL=(-999.0)
      PYDEL=(-999.0)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'WRTH')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRWRTH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)PX1,PY1,NCTEXT
   53   FORMAT('PX1,PY1,NCTEXT = ',2G15.7,I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)(ICTEXT(I),I=1,MIN(25,NCTEXT))
   55   FORMAT('(ICTEXT(I),I=1,NCTEXT) = ',25A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)IGUNIT,JSIZE,IPATT,JPATT
   56   FORMAT('IGUNIT,JSIZE,IPATT,JPATT = ',I8,2(2X,A4),I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,60)IFONT,JFONT,ICASE,JCASE,ISPAC
   60   FORMAT('IFONT,JFONT,ICASE,JCASE,ISPAC = ',2(2X,A4,I8),2X,A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,62)IJUST,JJUST,IDIR,JDIR
   62   FORMAT('IJUST,JJUST,IDIR,JDIR= ',2(2X,A4,I8))
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,64)ANGLE,ANGLE2
   64   FORMAT('ANGLE,ANGLE2= ',2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,65)IFILL,JFILL,ICOL,JCOL
   65   FORMAT('IFILL,JFILL,ICOL,JCOL= ',2(2X,A4,I8))
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,67)PHEIGH,JHEIG2,PHEIG2
   67   FORMAT('PHEIGH,JHEIG2,PHEIG2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,68)PWIDTH,JWIDT2,PWIDT2
   68   FORMAT('PWIDTH,JWIDT2,PWIDT2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)PVEGAP,JVEGA2,PVEGA2
   69   FORMAT('PVEGAP,JVEGA2,PVEGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,70)PHOGAP,JHOGA2,PHOGA2
   70   FORMAT('PHOGAP,JHOGA2,PHOGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,71)PTHICK,JTHICK,PTHIC2
   71   FORMAT('PTHICK,JTHICK,PTHIC2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,73)PXLEC,PXLECG,PYLEC,PYLECG
   73   FORMAT('PXLEC,PXLECG,PYLEC,PYLECG = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,74)ISYMBL
   74   FORMAT('ISYMBL = ',A24)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,79)IBUGG4,ISUBG4,IERRG4
   79   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',2(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ******************************************
C               **  STEP XX--                           **
C               **  COMPUTE NEW START POINTS DEPENDING  **
C               **  ON THE JUSTIFICATION                **
C               ******************************************
C
      IJUSTH='LEFT'
      IJUSTV='BOTT'
C
      IF(IJUST.EQ.'LEFT')GOTO910
      IF(IJUST.EQ.'CENT')GOTO920
      IF(IJUST.EQ.'RIGH')GOTO930
C
      IF(IJUST.EQ.'LJUS')GOTO910
      IF(IJUST.EQ.'CJUS')GOTO920
      IF(IJUST.EQ.'RJUS')GOTO930
C
      IF(IJUST.EQ.'LEBO')GOTO910
      IF(IJUST.EQ.'CEBO')GOTO920
      IF(IJUST.EQ.'RIBO')GOTO930
C
      IF(IJUST.EQ.'LECE')GOTO940
      IF(IJUST.EQ.'CECE')GOTO950
      IF(IJUST.EQ.'RICE')GOTO960
C
      IF(IJUST.EQ.'LETO')GOTO970
      IF(IJUST.EQ.'CETO')GOTO980
      IF(IJUST.EQ.'RITO')GOTO990
C
      GOTO910
C
  910 CONTINUE
      PXINC=0.0
      PYINC=0.0
      IJUSTH='LEFT'
      IJUSTV='BOTT'
      GOTO995
C
  920 CONTINUE
      PXINC=PXLEC/2.0
      PYINC=0.0
      IJUSTH='CENT'
      IJUSTV='BOTT'
      GOTO995
C
  930 CONTINUE
      PXINC=PXLEC
      PYINC=0.0
      IJUSTH='RIGH'
      IJUSTV='BOTT'
      GOTO995
C
  940 CONTINUE
      PXINC=0.0
      PYINC=PYLEC/2.0
      IJUSTH='LEFT'
      IJUSTV='CENT'
      GOTO995
C
  950 CONTINUE
      PXINC=PXLEC/2.0
      PYINC=PYLEC/2.0
      IJUSTH='CENT'
      IJUSTV='CENT'
      GOTO995
C
  960 CONTINUE
      PXINC=PXLEC
      PYINC=PYLEC/2.0
      IJUSTH='RIGH'
      IJUSTV='CENT'
      GOTO995
C
  970 CONTINUE
      PXINC=0.0
      PYINC=PYLEC
      IJUSTH='LEFT'
      IJUSTV='TOP '
      GOTO995
C
  980 CONTINUE
      PXINC=PXLEC/2.0
      PYINC=PYLEC
      IJUSTH='CENT'
      IJUSTV='TOP '
      GOTO995
C
  990 CONTINUE
      PXINC=PXLEC
      PYINC=PYLEC
      IJUSTH='RIGH'
      IJUSTV='TOP '
      GOTO995
C
  995 CONTINUE
      PXINC2=PXINC*(100.0/(PWXMAX-PWXMIN))
      PYINC2=PYINC*(100.0/(PWYMAX-PWYMIN))
      PX1P=PX1-PXINC2
      PY1P=PY1-PYINC2
C
C               *************************
C               **  STEP XX--          **
C               **  COMPUTE END POINT  **
C               *************************
C
      ANCTEX=NCTEXT
      PX99=PX1P+ANCTEX*(PWIDT2+PHOGA2)
      PY99=PY1P
C
C               ******************************************************
C               **  STEP 1--                                        **
C               **  BRANCH ACCORDING TO THE MANUFACTURER            **
C               **  AND THE MODEL                                   **
C               ******************************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4014 (ETC.) CASE            **
C               ******************************************************
C
 1100 CONTINUE
      IFACTO=4
      IF(NUMVPP.GE.3000)IFACTO=1
      ICSTR(1:1)=IGSC
      NCSTR=1
      CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
      CALL TKTRPT(IX1P,IY1P,IFACTO,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IUSC
      DO1110I=1,NCTEXT
        NCSTR=NCSTR+1
        ICTEMP=ICTEXT(I)
        ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
 1110 CONTINUE
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  USE THE LOWER CASE P (= MOVE) INSTRUCTION       **
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  AND THE TILDA SINGLE (RT-LEFT) QUOTE (= INVOKE  **
C               **   LABEL MODE) I AND THE DESIRED TEXT STRING,     **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH IS THE **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 80-85, 253-254.                 **
C               **             PAGE 111 AND 112.                    **
C               ******************************************************
C
 2100 CONTINUE
      ICSTR(1:1)='p'
      NCSTR=1
      CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
      CALL HPTRPT(IX,IY,ICSTR,NCSTR,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:2)='~'''
      NCSTR=2
      DO2112J=1,NCTEXT
        K=J+NCSTR
        ICTEMP=ICTEXT(J)
        ICSTR(K:K)=ICTEMP(1:1)
 2112 CONTINUE
      NCSTR=K
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IETXC
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='}'
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  USE THE PU (= PEN UP) INSTRUCTION               **
C               **  AND THE PA (= PLOT ABSOLUTE) INSTRUCTION        **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  AND THE LB (= LABEL) INSTRUCTION                **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH   TRAILING SEMI-COLONS WHICH ARE THE      **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 62, 143.                        **
C               **             PAGE 65-67, 143.                     **
C               **             PAGE 75, 141.                        **
C               ******************************************************
C
 2200 CONTINUE
      CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
      ICSTR(1:5)='PU;PA'
      NCSTR=5
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(11:11)=','
      NCSTR=11
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(17:17)=';'
      NCSTR=17
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      NCTEP1=NCTEXT+1
      NCTEP2=NCTEXT+2
      ICTEXT(NCTEP1)=IETXC
      ICTEXT(NCTEP2)=';'
      ICSTR(1:2)='LB'
      NCSTR=2
      DO2212J=1,NCTEP2
      K=J+NCSTR
      ICSTR(K:K)=ICTEXT(J)
 2212 CONTINUE
      NCSTR=K
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-12, 10-13, 10-21.                **
C               **********************************************************
C
C  JULY, 1990.  PACK OUTPUT ONTO 1 LINE.
C
 2300 CONTINUE
      CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
      ICSTR(1:1)=IESCC
      ICSTR(2:4)='*pa'
      NCSTR=4
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(10:10)=','
      NCSTR=10
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(16:16)='Z'
      NCSTR=16
C
      NCTEP1=NCTEXT+1
      ICTEXT(NCTEP1)=ICRC
      ICSTR(17:17)=IESCC
      ICSTR(18:19)='*l'
      NCSTR=19
      DO2312J=1,NCTEP1
        K=J+NCSTR
        ICSTR(K:K)=ICTEXT(J)
 2312 CONTINUE
      NCSTR=K
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               **********************************************************
C               **  STEP 26--                                           **
C               **  TREAT THE UNIX LIBPLOT            CASE              **
C               **********************************************************
C
 2600 CONTINUE
C
#ifdef HAVE_LIBPLOT
      CALL LIBPTR(ICTEXT,NCTEXT,ICTEX2,NCTEX2,ICASE,ISUBRO,IBUGG4)
      DO2605I=1,NCTEX2
        IC1=ICTEX2(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
 2605 CONTINUE
#endif
      STRING(NCTEX2+1)=0
C
      ILAST=80
      DO2610I=80,1,-1
        ILAST=I
        IF(ILPLFN(I:I).NE.' ')GOTO2619
 2610 CONTINUE
 2619 CONTINUE
      DO2620I=1,ILAST
        CALL DPCOAN(ILPLFN(I:I),IJUNK)
        IADE(I)=IJUNK
 2620 CONTINUE
      IADE(ILAST+1)=0
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IERR=0
C
#ifdef HAVE_LIBPLOT
      CALL PLTXTH(IADE,STRING,DBLE(PX1),DBLE(PY1),IFONTH,IFONTV,
     1            DBLE(PHEIG2),IERR)
#endif
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
C     JANUARY, 1988: SWITCH TO LET DATAPLOT DO THE JUSTIFICATION OR
C                    LET THE POST PROCESOR DO IT
CCCCC THE FOLLOWING 2 LINES WAS CHANGED     JANUARY 1995
CCCCC TO FIX THE TIC JUSTIFICATION PROBLEM  JANUARY 1995
CCCCC IF(IJUSSW.EQ.'ON')PX1P=PX1
CCCCC IF(IJUSSW.EQ.'ON')PY1P=PY1
      PX1P=PX1
      PY1P=PY1
      ICSTR(1:8)='MOVE TO '
      NCSTR=8
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
      PX1P=AX
      PY1P=AY
      CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(19:20)='  '
      NCSTR=20
      CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      IF(NCTEXT.GT.0)THEN
        ICSTR(1:11)='WRITE TEXT '
        NCSTR=11
        K=0
        DO3112J=1,NCTEXT
          K=J+NCSTR
          ICSTR(K:K)=ICTEXT(J)
 3112   CONTINUE
        NCSTR=K
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
 3200 CONTINUE
C     JANUARY, 1988: SWITCH TO LET DATAPLOT DO THE JUSTIFICATION OR
C     LET THE POST PROCESOR DO IT
C     DECEMBER 1997.  SLIGHTLY DIFFERENT CODING FOR GUI.
CCCCC THE FOLLOWING 2 LINES WAS CHANGED     JANUARY 1995
CCCCC TO FIX THE TIC JUSTIFICATION PROBLEM  JANUARY 1995
CCCCC IF(IJUSSW.EQ.'ON')PX1P=PX1
CCCCC IF(IJUSSW.EQ.'ON')PY1P=PY1
      IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
        CALL GRTRSA(PX1,PY1,AX,AY,ISUBN0)
        IPXTMP=INT(AX*10.**IGENFA+0.5)
        IPYTMP=INT(AY*10.**IGENFA+0.5)
        ICSTR(1:2)='M '
        NCSTR=2
        NCHTOT=IGENFA+3
        CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        PX1P=PX1
        PY1P=PY1
        ICSTR(1:5)='MOTO '
        NCSTR=5
        NCHTOT=10
        NCHDEC=5
        CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
        PX1P=AX
        PY1P=AY
        CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(16:17)='  '
        NCSTR=17
        CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      IF(NCTEXT.GT.0)THEN
        ICSTR(1:5)='WRTE '
        NCSTR=5
        K=0
        DO3212J=1,NCTEXT
          K=J+NCSTR
          ICSTR(K:K)=ICTEXT(J)
 3212   CONTINUE
        NCSTR=K
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ***************************************************************
C               **  STEP 33--                                                **
C               **  TREAT THE CGM                                CASE        **
C               ***************************************************************
C
 3300 CONTINUE
C     JANUARY, 1988: SWITCH TO LET DATAPLOT DO THE JUSTIFICATION OR
C                    LET THE POST PROCESOR DO IT
      IF(NCTEXT.LE.0)GOTO9000
C
CCCCC THE FOLLOWING 2 LINES WAS CHANGED     JANUARY 1995
CCCCC TO FIX THE TIC JUSTIFICATION PROBLEM  JANUARY 1995
CCCCC IF(IJUSSW.EQ.'ON')PX1P=PX1
CCCCC IF(IJUSSW.EQ.'ON')PY1P=PY1
      PX1P=PX1
      PY1P=PY1
      CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
      PX1P=AX
      PY1P=AY
      ICSTR(1:6)='TEXT ('
      NCSTR=6
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(17:17)=','
      NCSTR=17
      CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(28:34)=') FINAL'
      NCSTR=34
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)='"'
      NCSTR=1
      K=0
      DO3312J=1,NCTEXT
        K=J+NCSTR
        ICSTR(K:K)=ICTEXT(J)
 3312 CONTINUE
      K=K+1
      ICSTR(K:K)='"'
      K=K+1
      ICSTR(K:K)=';'
      NCSTR=K
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  USE CALCOMP LIBRARY ROUTINE SYMBOL              **
C               **  REFERENCE--FUNDAMENTAL PLOTTING ROUTINES        **
C               **             FORTRAN REFERENCE MANUAL - NICOLET   **
C               **             PAGES 2-7 (1984 EDITION)             **
C               ******************************************************
C
 4100 CONTINUE
#ifdef HAVE_CALCOMP
      CALL CALCPT(PX1P,PY1P,AX1,AY1,ISUBN0)
      DO4112J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 4112 CONTINUE
      ANGLE=0.
      AXTEMP=0.
      CALL CALCPT(AXTEMP,PHEIG2,AYTMP2,HEIGHT,ISUBN0)
      CALL CALCTR(ICSTR,IHOLL2,NCTEXT)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
#ifdef HAVE_LAHEY_CALCOMP
      ICSTR=' '
      CALL CALCPT(PX1,PY1,AX1,AY1,ISUBN0)
      DO4612J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 4612 CONTINUE
      CALL GRINFO(ILAHEY,RLAHEY,CLAHEY)
      ICOLMN=INT(REAL(ILAHEY(8))*(AX1*RLAHEY(1)/11.0)+0.5)
      IF(IJUSTH.EQ.'RIGH')THEN
        NSHIFT=NCTEXT
      ELSEIF(IJUSTH.EQ.'CENT')THEN
        NSHIFT=NCTEXT/2
      ELSE
        NSHIFT=0
      ENDIF
      ICOLMN=ICOLMN-NSHIFT
      IF(ICOLMN.LT.1)ICOLMN=1
      IF(ICOLMN.GT.ILAHEY(8))ICOLMN=ILAHEY(8)
      ILINE=INT(REAL(ILAHEY(9))*(RLAHEY(1)*(8.5-AY1)/8.5)+0.5)
      IF(IJUSTV.EQ.'TOP')THEN
        NSHIFT=1
      ELSEIF(IJUSTV.EQ.'CENT')THEN
        NSHIFT=1
      ELSE
        NSHIFT=0
      ENDIF
      ILINE=ILINE-NSHIFT
      IF(ILINE.LT.1)ILINE=1
      IF(ILINE.GT.ILAHEY(9))ILINE=ILAHEY(9)
      CALL GTEXT(ILINE,ICOLMN,ICSTR(1:NCTEXT))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
#ifdef HAVE_QWIN
      ICSTR=' '
      DO4712J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 4712 CONTINUE
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      IF(IJUSTH.EQ.'LEFT')THEN
        IXINC=0
      ELSEIF(IJUSTH.EQ.'CENT')THEN
        IXINC=GETGTEXTEXTENT(ICSTR(1:NCTEXT))/2
      ELSEIF(IJUSTH.EQ.'RIGH')THEN
        IXINC=GETGTEXTEXTENT(ICSTR(1:NCTEXT))
      ELSE
        IXINC=0
      ENDIF
      IF(IJUSTV.EQ.'TOP ')THEN
        IYINC=0
      ELSEIF(IJUSTV.EQ.'CENT')THEN
        IYINC=JHEIG2/2
      ELSEIF(IJUSTV.EQ.'BOTT')THEN
        IYINC=JHEIG2
      ELSE
        IYINC=0
      ENDIF
      CALL MOVETO(INT2(IX1-IXINC),INT2(IY1-IYINC),XY)
      CALL OUTGTEXT(ICSTR(1:NCTEXT))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
#ifdef HAVE_OPEN_GL
      IF(IOPGOF.EQ.'OFF')GOTO9000
C
      DO4805I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
 4805 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=80
      DO4810I=80,1,-1
        ILAST=I
        IF(IX11FN(I:I).NE.' ')GOTO4819
 4810 CONTINUE
 4819 CONTINUE
      DO4820I=1,ILAST
        CALL DPCOAN(IX11FN(I:I),IJUNK)
        IADE(I)=IJUNK
 4820 CONTINUE
      IADE(ILAST+1)=0
C
      CALL GLTATT(IADE,IXERR)
      IF(IXERR.EQ.1) THEN
        WRITE(ICOUT,4821)
 4821   FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE CURRENT FONT')
        CALL DPWRST('XXX','BUG ')
      ELSEIF(IXERR.EQ.2)THEN
        WRITE(ICOUT,4822)
 4822   FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE DEFAULT FONT')
        CALL DPWRST('XXX','BUG ')
      END IF
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IXERR=0
      IX1=INT(PX1+0.5)
      IY1=INT(PY1+0.5)
      CALL GLTEXH(STRING,IX1,IY1,IFONTH,IFONTV,IXERR)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      ICSTR=' '
      DO4952J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 4952 CONTINUE
      IF(IJUSTH.EQ.'LEFT')THEN
        CALL IGrCharJustify('L')
      ELSEIF(IJUSTH.EQ.'CENT')THEN
        CALL IGrCharJustify('C')
      ELSEIF(IJUSTH.EQ.'RIGH')THEN
        CALL IGrCharJustify('R')
      ELSE
        CALL IGrCharJustify('C')
      ENDIF
      PYINC=0.0
      IF(IJUSTV.EQ.'TOP')THEN
        PYINC=InfoGraphics(4)
      ELSEIF(IJUSTV.EQ.'CENT')THEN
        PYINC=InfoGraphics(4)/2.0
      ELSEIF(IJUSTV.EQ.'BOTT')THEN
        PYINC=0.0
      ELSE
        PYINC=InfoGraphics(4)/2.0
      ENDIF
      CALL IGrCharOut(PX1,PY1+PYINC,ICSTR(1:NCTEXT))
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  USE THE 1 OP CODE (= MOVE)                      **
C               **  ALONG WITH COORDINATES,                         **
C               **  USE THE 3 OP CODE (= CHARACTER STRING)          **
C               **  ALONG WITH RELATIVE COOR                        **
C               **  ALONG WITH NUMBER OF CHAR (= 1)                 **
C               **  ALONG WITH CONVERTED CHAR STRING                **
C               **  (2 CONVERTED CHAR FOR EVERY SINGLE CHAR).       **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 , B-1, AND E-1             **
C               **  REFERENCE--ZETA FORTRAN REFERENCE MANUAL        **
C               **             PAGE A-2                             **
C               **  USE CALCOMP LIBRARY (MARCH,1988)                **
C               ******************************************************
C
 5100 CONTINUE
#ifdef HAVE_ZETA
      CALL CALCPT(PX1P,PY1P,AX1,AY1,ISUBN0)
      DO5112J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 5112 CONTINUE
      ANGLE=0.
      AXTEMP=0.
      CALL CALCPT(AXTEMP,PHEIG2,AYTMP2,HEIGHT,ISUBN0)
      CALL CALCTR(ICSTR,IHOLL3,NCTEXT)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               ******************************************************
C
 6600 CONTINUE
      NCSTR=0
C
      DO6610I=1,NCTEXT
        NCSTR=NCSTR+1
        ICTEMP=ICTEXT(I)
        ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
 6610 CONTINUE
C
      CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
      NCSTR=NCSTR+1
      ITEMP=0
      CALL DPCONA(ITEMP,ICSTR(NCSTR:NCSTR))
#ifdef HAVE_SUN
      CALL cftext(IX1P,IY1P,ICSTR(1:NCSTR))
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  USE THE P[ (= POSITION ) INSTRUCTION            **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  WITH A TRAILING ]                               **
C               **  AND THE T' (= TEXT) INSTRUCTION                 **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ' TO DENOTE THE END OF TEXT STRING,         **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 118 AND 120                    **
C               ******************************************************
C
C
C     MARCH, 1991.  PACK OUTPUT.  ALSO, REGIS DRAWS CHARACTER BELOW THE
C                   CURSUR POSITION RATHER THAN ABOVE IT (AS DATAPLOT
C                   ASSUMES), SO HAVE TO ADJUST VERTICAL POSITION ONE
C                   CHARACTER HEIGHT.
C
 8100 CONTINUE
      PY1P=PY1P+PHEIG2
      CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
      ICSTR(1:2)='P['
      NCSTR=2
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(8:8)=','
      NCSTR=8
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      ICSTR(14:14)=']'
      NCSTR=14
      NCTEP1=NCTEXT+1
      IF(NCTEP1.GT.110)THEN
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=0
      END IF
C
      ICTEXT(NCTEP1)=''''
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='T'
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=''''
      DO8112J=1,NCTEP1
        K=J+NCSTR
        ICSTR(K:K)=ICTEXT(J)
 8112 CONTINUE
      NCSTR=K
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT CASE                       **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  XCOOR YCOOR MOVETO   (NOTE: USE UNADJUSTED COOR)**
C               **  (STRING) SHOW                                   **
C               **  NOTE:  RIGHTSHOW AND CENTSHOW ARE DATAPLOT      **
C               **         DEFINED PROCEDURES TO RIGHT AND CENTER   **
C               **         JUSTIFY STRINGS RESPECTIVELY             **
C               **  REFERENCE--POSTSCRIPT TUTORIAL AND COOKBOOK     **
C               **             FROM ADOBE SYSTEMS                   **
C               **  FIRST SET FONT IF REQUIRED                      **
C               **  CHECK FOR FOLLOWING CHARACTERS AND IF FOUND     **
C               **  PRECEDE WITH A BACKSLASH                        **
C               **  "(", ")", AND BACKSLASH                         **
C               ******************************************************
C
C     NOTE 2/2009: FOR BEST QUALITY GRAPHS, WE TYPICALLY WANT TO
C                  USE THE TYPESET QUALITY POSTSCRIPT FONTS.  HOWEVER,
C                  WE CANNOT CURRENTLY USE THEM WITH "SPECIAL
C                  CHARACTERS" (THE SP() AND CR() ARE HANDLED, BUT
C                  NO OTHERS).  TO ADDRESS THIS, WE WOULD LIKE TO
C                  HANDLE THE FOLLOWING 2 CASES:
C
C                  1) SUBSCRIPTS/SUPERSCRIPTS
C
C                  2) GREEK CHARACTERS
C
C                  ALTHOUGH THIS DOES NOT COVER ALL SPECIAL CHARACTERS,
C                  IT DOES COVER A HIGH PERCENTAGE OF CASES.
C
C                  IN THE FIRST PHASE, WE WILL ADDRESS SUBSCRIPTS AND
C                  SUPERSCRIPTS.  IN THE NEXT PHASE, WE WILL ADD
C                  GREEK CHARACTERS.  FIRST CALL "POSTTR" TO SEE
C                  IF THERE ARE ANY SUBSCRIPTS/SUPERSCRIPTS.  IF
C                  SO, POSTTR WILL DEFINE ARRAYS THAT SPLIT ICTEXT
C                  INTO MULTIPLE STRINGS AND THAT SPECIFY THE FONT
C                  (DEFAULT OR SYMBOL), SIZE, AND OFFSET OF EACH OF
C                  THESE SUBSTRINGS.  THE PRIMARY COMPLICATION IS
C                  THAT WE NEED TO DETERMINE THE LENGTH OF THE
C                  FULL STRING WHEN WE HAVE CENTER OR RIGHT
C                  JUSTIFICATION.
C
 8600 CONTINUE
C
      IFLAGG=0
      CALL POSTTR(ICTEXT,NCTEXT,ICASE,MAXSYM,
     1            ISTARV,ISTOPV,IFONTP,SIZEV,OFFSEV,NSTRIN,NSPEC,
     1            IFLAGG,
     1            ISUBRO,IBUGG4)
C
      IF(NSPEC.LT.1)THEN
        IPSTPS=INT(JHEIG2+0.5)
        IF(IPSTFN.NE.IPSTFC.OR.IPSTPC.NE.IPSTPS)THEN
          IJUNK=7
          DO8695I=1,IPSTMF
            IF(IPSTFN.NE.IPSTT1(I))GOTO8695
            IJUNK=I
            GOTO8697
 8695     CONTINUE
 8697     CONTINUE
          ICSTR(1:1)='/'
          ICSTR(2:41)=IPSTT2(IJUNK)(1:40)
          ICSTR(42:51)=' findfont '
          NCHTOT=5
          NCSTR=51
          CALL GRTRIN(IPSTPS,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+17
          ICSTR(NCSTR:NCSTR2)=' scalefont setfont'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          IPSTFC=IPSTFN
          IPSTPC=IPSTPS
        ENDIF
        ICSTR(1:4)='/IX '
        NCSTR=4
        CALL GRTRSD(PX1,PY1P,IX,IY,ISUBN0)
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        ICSTR(10:18)=' def /IY '
        NCSTR=18
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        ICSTR(24:27)=' def'
        NCSTR=27
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)='('
        NCSTR=1
        DO8612J=1,NCTEXT
          IF(ICTEXT(J).NE.'('.AND.ICTEXT(J).NE.')'.AND.
     1       ICTEXT(J).NE.IBASLC)GOTO8613
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IBASLC
 8613     CONTINUE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8612   CONTINUE
C
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=')'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(IJUST(1:1).EQ.'L')ICSTR(1:9)='leftshow '
        IF(IJUST(1:1).EQ.'C')ICSTR(1:9)='centshow '
        IF(IJUST(1:1).EQ.'R')ICSTR(1:9)='rightshow'
        NCSTR=9
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
C
C         DEFINE THE INITIAL POSITION.
C
        NCSTR=8
        ICSTR(1:NCSTR)='newpath '
        CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=14
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        ICSTR(20:26)=' moveto'
        NCSTR=26
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       CASE WHERE WE SPLIT THE STRING INTO A SERIES OF
C       SUBSTRINGS.
C
C         FOR LEFT JUSTIFIED STRING:
C             1) MOVE TO SPECIFIED START POSITION
C             2) LOOP THROUGH EACH SUBSTRING
C                A) SET FONT AND CHARACTER SIZE IF NEEDED
C                B) USE rmoveto TO DEFINE VERTICAL OFFSET
C                   (IF NEEDED)
C                C) USE leftshow2 TO PRINT CURRENT SUBSTRING
C
C         FOR CENTER AND RIGHT JUSTIFIED STRINGS, WE NEED TO
C         MAKE AN INITIAL PASS THAT SUMS UP THE LENGTH OF THE
C         INDIVIDUAL STRINGS TO A SINGLE TOTAL LENGTH.  HOWEVER,
C         WE CAN THEN DEFINE THE INITIAL STARTING POINT AND THEN
C         JUST USE THE LEFT JUSTIFIED ALGORITHM.
C
        IF(IJUST(1:1).EQ.'C' .OR. IJUST(1:1).EQ.'R')THEN
C
C         FOR CENTER AND RIGHT JUSTIFIED STRINGS, MAKE A PASS
C         TO DETERMINE THE LENGTH OF THE STRING.  FOR THIS CASE,
C         WE CAN IGNORE THE VERTICAL OFFSET.  HOWEVER, WE DO
C         NEED TO KEEP TRACK OF THE FONT AND SIZE OF EACH SUBSTRING.
C
          IPSTSV=INT(JHEIG2+0.5)
          IPSTCR=IPSTSV
          PY1PC=PY1P
          DO8820I=1,NSTRIN
            IF(ISTARV(I).GT.ISTOPV(I))GOTO8820
            ASIZE=SIZEV(I)
            IFONTT=IFONTP(I)
C
C           SET FONT AND FONT SIZE
C
            IF(ASIZE.LT.0.0)THEN
              IPSTCR=IPSTCR/2
            ELSEIF(ASIZE.GT.0.0)THEN
              IPSTCR=2*IPSTCR
            ELSE
              IPSTCR=IPSTSV
            ENDIF
            ICSTR(1:9)='/PSFONT /'
            IF(IFONTT.EQ.1)THEN
              ICSTR(10:15)='Symbol'
              ICSTR(16:49)=' '
            ELSE
              IJUNK=7
              DO8825II=1,IPSTMF
                IF(IPSTFN.NE.IPSTT1(II))GOTO8825
                IJUNK=II
                GOTO8827
 8825         CONTINUE
 8827         CONTINUE
              ICSTR(10:49)=IPSTT2(IJUNK)(1:40)
            ENDIF
            ICSTR(50:62)=' def /PSSIZE '
            NCHTOT=5
            NCSTR=62
            CALL GRTRIN(IPSTCR,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            NCSTR2=NCSTR+13
            ICSTR(NCSTR:NCSTR2)=' def setpsfont'
            NCSTR=NCSTR2
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C           DETERMINE LENGTH OF CURRENT STRING AND ADD IT TO
C           THE TOTAL.
C
            ICSTR(1:1)='('
            NCSTR=1
            DO8832J=ISTARV(I),ISTOPV(I)
              IF(ICTEXT(J).NE.'('.AND.ICTEXT(J).NE.')'.AND.
     1          ICTEXT(J).NE.IBASLC)GOTO8833
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=IBASLC
 8833         CONTINUE
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8832       CONTINUE
C
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=')'
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            IF(IJUST(1:1).EQ.'C')THEN
              NCSTR=14
              ICSTR(1:NCSTR)='psstringwidthc'
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ELSEIF(IJUST(1:1).EQ.'R')THEN
              NCSTR=14
              ICSTR(1:NCSTR)='psstringwidthr'
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ENDIF
C
 8820     CONTINUE
        ENDIF
C
C       NOW DRAW EACH OF THE SUBSTRINGS
C
        IPSTSV=INT(JHEIG2+0.5)
        IPSTCR=IPSTSV
        PY1PC=PY1P
        DO8720I=1,NSTRIN
          IF(ISTARV(I).GT.ISTOPV(I))GOTO8720
          ASIZE=SIZEV(I)
          AOFFS=OFFSEV(I)
          IFONTT=IFONTP(I)
C
C         STEP 2A: SET FONT AND FONT SIZE
C
          IF(ASIZE.LT.0.0)THEN
            IPSTCR=IPSTCR/2
          ELSEIF(ASIZE.GT.0.0)THEN
            IPSTCR=2*IPSTCR
          ELSE
            IPSTCR=IPSTSV
          ENDIF
          ICSTR(1:9)='/PSFONT /'
          IF(IFONTT.EQ.1)THEN
            ICSTR(10:15)='Symbol'
            ICSTR(16:49)=' '
          ELSE
            IJUNK=7
            DO8725II=1,IPSTMF
              IF(IPSTFN.NE.IPSTT1(II))GOTO8725
              IJUNK=II
              GOTO8727
 8725       CONTINUE
 8727       CONTINUE
            ICSTR(10:49)=IPSTT2(IJUNK)(1:40)
          ENDIF
          ICSTR(50:62)=' def /PSSIZE '
          NCHTOT=5
          NCSTR=62
          CALL GRTRIN(IPSTCR,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+13
          ICSTR(NCSTR:NCSTR2)=' def setpsfont'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C         STEP 2B: SET RELATIVE VERTICAL OFFSET IF NEEDED
C
          IF(AOFFS.GT.0.0)THEN
            PXTEMP=0.0
            POFFST=PYLEC/2.0
            CALL GRTRSD(PXTEMP,POFFST,IX,IY,ISUBN0)
            NCHTOT=5
            NCSTR=0
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=' '
            CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            NCSTR2=NCSTR+7
            ICSTR(NCSTR:NCSTR2)=' rmoveto'
            NCSTR=NCSTR2
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ELSEIF(AOFFS.LT.0.0)THEN
            PXTEMP=0.0
            POFFST=PYLEC/2.0
            CALL GRTRSD(PXTEMP,POFFST,IX,IY,ISUBN0)
            IY=-IY
            NCHTOT=5
            NCSTR=0
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=' '
            CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            NCSTR2=NCSTR+7
            ICSTR(NCSTR:NCSTR2)=' rmoveto'
            NCSTR=NCSTR2
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ENDIF
C
C         STEP 2C: PRINT CURRENT SUBSTRING
C
          ICSTR(1:1)='('
          NCSTR=1
          DO8732J=ISTARV(I),ISTOPV(I)
            IF(ICTEXT(J).NE.'('.AND.ICTEXT(J).NE.')'.AND.
     1        ICTEXT(J).NE.IBASLC)GOTO8733
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=IBASLC
 8733       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8732     CONTINUE
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=')'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:10)='leftshow2 '
          NCSTR=10
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 8720   CONTINUE
C
C       RESET DEFAULT FONT AND POINT SIZE
C
        ICSTR(1:9)='/PSFONT /'
        IJUNK=7
        DO8925II=1,IPSTMF
          IF(IPSTFN.NE.IPSTT1(II))GOTO8925
          IJUNK=II
          GOTO8927
 8925   CONTINUE
 8927   CONTINUE
        ICSTR(10:49)=IPSTT2(IJUNK)(1:40)
        ICSTR(50:62)=' def /PSSIZE '
        NCHTOT=5
        NCSTR=62
        CALL GRTRIN(IPSTCR,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+13
        ICSTR(NCSTR:NCSTR2)=' def setpsfont'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC       CASE                       **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  MOVE: ^IHXXXXX^IVXXXXX                          **
C               **  SET DEFAULT FONT:^ISXXXXX                       **
C               **  SET FONT FOR CURRENT LINE: ^SMXXXXX             **
C               **  ENTER TEXT                                      **
C               **  REFERENCE--QUIC PROGRAMMING MANUAL FOR QMS      **
C               **             CHAPTER 7 DISCUSSES FONTS            **
C               ******************************************************
C
C
 9100 CONTINUE
      IFONTT=IQUIFN
      IF(IORNSW.EQ.'PORT'.AND.(
     1   IFONTT.EQ.521 .OR. IFONTT.EQ.522 .OR.
     1   IFONTT.EQ.523 .OR. IFONTT.EQ.524))IFONTT=10
      IF(IORNSW.NE.'PORT'.AND.(
     1   IFONTT.EQ.124 .OR. IFONTT.EQ.144 .OR.
     1   IFONTT.EQ.16  .OR. IFONTT.EQ.328 .OR.
     1   IFONTT.EQ.998 .OR. IFONTT.EQ.404 .OR.
     1   IFONTT.EQ.444 .OR. IFONTT.EQ.532))IFONTT=10
      CALL DPCONA(94,ICARAT)
      IF(IFONTT.EQ.IQUIFC)GOTO9105
      ICSTR(1:1)=ICARAT
      ICSTR(2:3)='IS'
      IQUIFC=IFONTT
      KFONT=IFONTT
      NCHTOT=-5
      NCSTR=3
      CALL GRTRIN(KFONT,NCHTOT,ICSTR,NCSTR)
      NCSTR=8
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 9105 CONTINUE
      PYTEMP=100.-PY1P
      CALL QUICPT(PX1P,PYTEMP,IX,IY,ISUBN0)
      ICSTR(1:1)=ICARAT
      ICSTR(2:3)='IH'
      NCSTR=3
      NCHTOT=-5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      ICSTR(9:9)=ICARAT
      ICSTR(10:11)='IV'
      NCSTR=11
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCSTR=16
C
      DO9112J=1,NCTEXT
        K=J+NCSTR
        ICSTR(K:K)=ICTEXT(J)
 9112 CONTINUE
      NCSTR=K
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  NOTE THAT JUSTIFICATION, POSITIONING, ETC. IS   **
C               **  HANDLED BY THE C ROUTINE.  ALSO, THE CHARACTER  **
C               **  STRING IS PASSED TO C AS AN INTEGER ARRAY       **
C               **  CONTAINING THE ASCII DECIMAL EQUIVALENTS        **
C               ******************************************************
C
C
C     2023/11: SUPPORT FOR SCALABLE FONTS
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      DO9605I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
 9605 CONTINUE
      STRING(NCTEXT+1)=0
C
C     CHECK IF SCALABLE FONTS REQUESTED
C
      IF(IX11FT.EQ.'FIXE')THEN
        IFTYPE=0
      ELSE
        IFTYPE=1
        IF(IX11SF(1:4).EQ.'NULL')IFTYPE=0
      ENDIF
C
      ILAST=80
      IF(IFTYPE.EQ.0)THEN
        DO9610I=80,1,-1
          ILAST=I
          IF(IX11FN(I:I).NE.' ')GOTO9619
 9610   CONTINUE
 9619   CONTINUE
        DO9620I=1,ILAST
          CALL DPCOAN(IX11FN(I:I),IJUNK)
          IADE(I)=IJUNK
 9620   CONTINUE
        IADE(ILAST+1)=0
C
        CALL XTATTR(IADE,IXERR)
        IF(IXERR.EQ.1) THEN
          WRITE(ICOUT,9621)
 9621     FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE CURRENT ',
     1           'FONT')
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IXERR.EQ.2)THEN
          WRITE(ICOUT,9622)
 9622     FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE DEFAULT ',
     1           'FONT')
          CALL DPWRST('XXX','BUG ')
        END IF
      ELSE
        DO9630I=80,1,-1
          ILAST=I
          IF(IX11SF(I:I).NE.' ')GOTO9639
 9630   CONTINUE
 9639   CONTINUE
C
C       ADD SIZE TO FONT STRING
C
        ICSTR=' '
        JSIZET=JSIZE
        IF(JSIZET.LE.6)JSIZET=6
        IF(JSIZET.GE.24)JSIZET=24
        ICSTR(1:ILAST)=IX11SF(1:ILAST)
        ICSTR(ILAST+1:ILAST+6)=':size='
        ILAST=ILAST+6
CCCCC   ILAST=ILAST+1
CCCCC   ICSTR(ILAST:ILAST)='-'
        IF(JSIZET.LE.9)THEN
          NCHTOT=1
        ELSEIF(JSIZET.LE.99)THEN
          NCHTOT=2
        ELSE
          NCHTOT=3
        ENDIF
        CALL GRTRIN(JSIZET,NCHTOT,ICSTR,ILAST)
C
        DO9640I=1,ILAST
          CALL DPCOAN(ICSTR(I:I),IJUNK)
          IADE(I)=IJUNK
 9640   CONTINUE
        IADE(ILAST+1)=0
      ENDIF
C
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IXERR=0
      IF(IFTYPE.EQ.0)THEN
        CALL XTEXTH(STRING,IX,IY,IFONTH,IFONTV,IXERR)
      ELSE
C
        IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'WRTH')THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9651)ILAST,ICSTR(1:ILAST)
 9651     FORMAT('X11 SCALABLE FONT: ILAST = ',I5,'ICSTR = ',A130)
          CALL DPWRST('XXX','BUG ')
        ENDIF
C
        CALL XTEXTH2(IADE,STRING,IX,IY,IFONTH,IFONTV,IXERR)
        IF(IXERR.EQ.1)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9661)
 9661     FORMAT('IN GRWRTH: UNABLE TO LOAD SCALABLE X11 FONT')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9663)ICSTR(1:ILAST)
 9663     FORMAT('FONT NAME: ',A130)
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IXERR.EQ.2)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9671)
 9671     FORMAT('IN GRWRTH: UNABLE TO ALLOCTE Xft COLOR')
          CALL DPWRST('XXX','BUG ')
        ENDIF
      ENDIF
#endif
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
CCCCC AND REFIXED                       SEPTEMBER 1995
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 124, 113.    **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 324-325, 256.              **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 59-60, 54-55**
C               *************************************************
C
10000 CONTINUE
      IF(ITCST.EQ.'CLOS')GOTO9000
C
CCCCC THE FOLLOWING 2 LINES OF CODE WERE REPLACED  SEPTEMBER 1994
CCCCC BY THE SUBSEQUENT 7 LINES OF CODE            SEPTEMBER 1994
CCCCC TO FIX C-SIDE MULTIPLOTTING NOT WORKING      SEPTEMBER 1994
C
CCCCC CALL TCMOTO(PX1,PY1)
CCCCC CALL TCWRTE(ICTEXT,NCTEXT)
C
      IF(NCTEXT.GT.0)THEN
c
CCCCC   SEE COMMENTS FOR GENERAL CODED (STEP 32) FOR NEXT 2 LINES
C
CCCCC   THE FOLLOWING 2 LINES WAS CHANGED     JANUARY 1995
CCCCC   TO FIX THE TIC JUSTIFICATION PROBLEM  JANUARY 1995
CCCCC   IF(IJUSSW.EQ.'ON')PX1P=PX1
CCCCC   IF(IJUSSW.EQ.'ON')PY1P=PY1
        PX1P=PX1
        PY1P=PY1
        CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
        PX1P=AX
        PY1P=AY
CTURB   CALL TCMOTO(PX1P,PY1P)
CTURB   CALL TCWRTE(ICTEXT,NCTEXT)
C
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) GIF                                          **
C               ******************************************************
C
12000 CONTINUE
#ifdef HAVE_GD
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      IFONTZ=0
      IF(IGDFN(1:5).EQ.'SMALL')IFONTZ=1
      IF(IGDFN(1:5).EQ.'LARGE')IFONTZ=2
      IF(IGDFN(1:10).EQ.'MEDIUMBOLD')IFONTZ=3
      IF(IGDFN(1:5).EQ.'GIANT')IFONTZ=4
      IF(IGDFN(1:4).EQ.'TINY')IFONTZ=5
C
      DO12605I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
12605 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=80
      DO12610I=80,1,-1
        ILAST=I
        IF(IGDFN(I:I).NE.' ')GOTO12619
12610 CONTINUE
12619 CONTINUE
      DO12620I=1,ILAST
        CALL DPCOAN(IGDFN(I:I),IJUNK)
        IADE(I)=IJUNK
12620 CONTINUE
      IADE(ILAST+1)=0
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IERR=0
C
      CALL GDTXTH(IADE,STRING,IFONTZ,IX,IY,IFONTH,IFONTV,
     1            JCOL,JHEIG2,IERR)
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE ABSOFT                 DRIVER         **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      DO13505I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
13505 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=80
      DO13510I=80,1,-1
        ILAST=I
        IF(IAQUFN(I:I).NE.' ')GOTO13519
13510 CONTINUE
13519 CONTINUE
      DO13520I=1,ILAST
        CALL DPCOAN(IAQUFN(I:I),IJUNK)
        IADE(I)=IJUNK
13520 CONTINUE
      IADE(ILAST+1)=0
C
COLD  aqtAddLabel(ICTEXT(1:NCTEXT),PX1,PY1,AROT,IAQJUS)
      IFONTH=0
      IFONTV=0
      IF(IJUSTH.EQ.'LEFT')IFONTH=0
      IF(IJUSTH.EQ.'CENT')IFONTH=1
      IF(IJUSTH.EQ.'RIGH')IFONTH=2
      IF(IJUSTV.EQ.'BOTT')IFONTV=0
      IF(IJUSTV.EQ.'MIDD')IFONTV=1
      IF(IJUSTV.EQ.'TOP ')IFONTV=2
#ifdef HAVE_AQUA
      CALL aqtxth(STRING,IX,IY,IFONTH,IFONTV,IADE,IERR)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
      CALL GRTRSD(PX1,PY1P,IX,IY,ISUBN0)
      ICSTR(1:1)=IBASLC
      ICSTR(2:5)='put('
      NCSTR=5
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+15)='){ makebox(0,0)['
      ICSTR(NCSTR+2:NCSTR+2)=IBASLC
      NCSTR=NCSTR+15
C
      IF(IJUSTV.EQ.'CENT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='c'
      ELSEIF(IJUSTV.EQ.'BOTT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='b'
      ELSEIF(IJUSTV.EQ.'TOP ')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='t'
      ENDIF
C
      IF(IJUSTH.EQ.'CENT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='c'
      ELSEIF(IJUSTH.EQ.'LEFT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='l'
      ELSEIF(IJUSTH.EQ.'RIGH')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='r'
      ENDIF
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=']'
C
      DO15110J=1,NCTEXT
        ICSTR2(J:J)=ICTEXT(J)(1:1)
15110 CONTINUE
      MAXWID=130
      CALL LATCON(ICSTR2,NCTEXT,ICSTR3,NCTEX2,MAXWID,ISUBRO,IERROR)
C
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='{'
      ICNT=NCSTR
      DO15120J=1,NCTEX2
        ICNT=ICNT+1
        ICSTR(ICNT:ICNT)=ICSTR3(J:J)
15120 CONTINUE
      NCSTR=ICNT
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+1)='}}'
      NCSTR=NCSTR+1
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
C     JULY 2015.  FOR THE CHROME BROWSER, NEED TO HAVE
C
C                   X="95" Y="233"
C
C                 RATHER THAN
C
C                   X="   95" Y="   233"
C
16000 CONTINUE
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      IF(IJUSTV.EQ.'TOP')THEN
        IY=IY+JHEIG2
      ELSEIF(IJUSTV.EQ.'CENT')THEN
        IY=IY+(JHEIG2/2)
      ELSE
        CONTINUE
      ENDIF
C
      CALL DPCONA(34,IQUOTE)
C
      ISVGLN=ISVGLN+1
      ICSTR(1:9)='   <g id='
      ICSTR(10:10)=IQUOTE
      NCSTR=10
      IF(ISVGLN.LE.9)THEN
        NCHTOT=1
      ELSEIF(ISVGLN.LE.99)THEN
        NCHTOT=2
      ELSEIF(ISVGLN.LE.999)THEN
        NCHTOT=3
      ELSEIF(ISVGLN.LE.9999)THEN
        NCHTOT=4
      ELSEIF(ISVGLN.LE.99999)THEN
        NCHTOT=5
      ELSE
        NCHTOT=6
      ENDIF
      CALL GRTRIN(ISVGLN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(ISVGSS(1:3).EQ.'EXT')THEN
        NCSTR=12
        ICSTR(1:NCSTR)='      class='
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
C
        IF(IJUSTH.EQ.'CENT')THEN
          ICSTR(NCSTR:NCSTR+16)='center-horizontal'
          NCSTR=NCSTR+17
        ELSEIF(IJUSTH.EQ.'LEFT')THEN
          ICSTR(NCSTR:NCSTR+14)='left-horizontal'
          NCSTR=NCSTR+15
        ELSEIF(IJUSTH.EQ.'RIGH')THEN
          ICSTR(NCSTR:NCSTR+15)='right-horizontal'
          NCSTR=NCSTR+16
        ENDIF
C
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        CALL GRTRCO('FORE',ISVGFC,JCOL2)
        IFLAG=1
        ICSTR(1:12)='      style='
        ICSTR(13:13)=IQUOTE
        NCSTR=-13
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=19
        ICSTR(1:NCSTR)='             fill:#'
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          IF(IRGBFL.EQ.0)THEN
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          IF(IRGBFL.EQ.0)THEN
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=22
        ICSTR(1:NCSTR)='            font-size:'
        NCHTOT=3
        CALL GRTRIN(JHEIG2,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+2)='pt;'
        NCSTR=NCSTR+2
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=13
        ICSTR(1:NCSTR)='             '
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='>'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
        NCSTR=14
        ICSTR(1:NCSTR)='        style='
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=21
        ICSTR(1:NCSTR)='         font-family:'
        DO16010I=32,1,-1
          NCTEMP=I
          IF(ISVGFN(I:I).NE.' ')GOTO16011
16010   CONTINUE
16011   CONTINUE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+NCTEMP-1)=ISVGFN(1:NCTEMP)
        NCSTR=NCSTR+NCTEMP
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(ISVGFW.EQ.'NORM')THEN
          NCSTR=28
          ICSTR(1:NCSTR)='         font-weight:normal;'
          NCSTR=-NCSTR
        ELSE
          NCSTR=26
          ICSTR(1:NCSTR)='         font-weight:bold;'
          NCSTR=-NCSTR
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(ISVGST.EQ.'ITAL')THEN
          NCSTR=27
          ICSTR(1:NCSTR)='         font-style:italic;'
          NCSTR=-NCSTR
        ELSE
          NCSTR=27
          ICSTR(1:NCSTR)='         font-style:normal;'
          NCSTR=-NCSTR
        ENDIF
        NCSTR=19
        ICSTR(1:NCSTR)='         font-size:'
        NCHTOT=3
        CALL GRTRIN(JHEIG2,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+2)='pt;'
        NCSTR=NCSTR+2
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=28
        ICSTR(1:NCSTR)='         stroke:none; fill:#'
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          IF(IRGBFL.EQ.0)THEN
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          IF(IRGBFL.EQ.0)THEN
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
C
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='>'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ENDIF
C
      IF(IX.LE.9)THEN
        NCHTOT=1
      ELSEIF(IX.LE.99)THEN
        NCHTOT=2
      ELSEIF(IX.LE.999)THEN
        NCHTOT=3
      ELSEIF(IX.LE.9999)THEN
        NCHTOT=4
      ELSE
        NCHTOT=5
      ENDIF
C
      ICSTR(1:11)='   <text x='
      NCSTR=12
      ICSTR(NCSTR:NCSTR)=IQUOTE
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+2)=' y='
      NCSTR=NCSTR+3
      ICSTR(NCSTR:NCSTR)=IQUOTE
C
      IF(IY.LE.9)THEN
        NCHTOT=1
      ELSEIF(IY.LE.99)THEN
        NCHTOT=2
      ELSEIF(IY.LE.999)THEN
        NCHTOT=3
      ELSEIF(IY.LE.9999)THEN
        NCHTOT=4
      ELSE
        NCHTOT=5
      ENDIF
C
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCHTOT=5
C
      ICSTR(NCSTR+1:NCSTR+7)=' style='
      NCSTR=NCSTR+8
      ICSTR(NCSTR:NCSTR)=IQUOTE
      IF(IJUSTH.EQ.'CENT')THEN
        ICSTR(NCSTR+1:NCSTR+19)='text-anchor:middle;'
        NCSTR=NCSTR+19
      ELSEIF(IJUSTH.EQ.'RIGH')THEN
        ICSTR(NCSTR+1:NCSTR+16)='text-anchor:end;'
        NCSTR=NCSTR+16
      ELSE
        ICSTR(NCSTR+1:NCSTR+18)='text-anchor:start;'
        NCSTR=NCSTR+18
      ENDIF
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='>'
C
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=0
C
C     2012/03: CHECK FOR "<" OR ">".  NEED TO CONVERT THESE TO &lt; AND
C              &gt; TO DISTINGUISH THEM FROM TAG IDENTIFIERS.
C     2015/11: CHECK FOR "&".  NEED TO CONVERT THESE TO &amp; .
C
      DO16112J=1,NCTEXT
        IF(ICTEXT(J).EQ.'<')THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+3)='&lt;'
          NCSTR=NCSTR+3
        ELSEIF(ICTEXT(J).EQ.'>')THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+3)='&gt;'
          NCSTR=NCSTR+3
        ELSEIF(ICTEXT(J).EQ.'&')THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+4)='&amp;'
          NCSTR=NCSTR+4
        ELSE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICTEXT(J)
        ENDIF
        IF(NCSTR.GE.120)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
16112 CONTINUE
C
      ICSTR(NCSTR+1:NCSTR+7)='</text>'
      NCSTR=NCSTR+7
      NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:7)='   </g>'
      NCSTR=-7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
C     CHECK FOR X11 DEVICE, HARDWARE TEXT NOT SUPPORTED
C
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
CCCCC IF(IVAL2.EQ.1 .AND. IVAL1.EQ.1)THEN
CCCCC   WRITE(ICOUT,999)
CCCCC   CALL DPWRST('XXX','BUG ')
CCCCC   WRITE(ICOUT,17006)
C17006   FORMAT('***** WARNING: HARDWARE TEXT NOT SUPPORTED ON ',
CCCCC1         'CAIRO X11 DEVICE.')
CCCCC   CALL DPWRST('XXX','BUG ')
CCCCC   GOTO9000
CCCCC ENDIF
C
      AX=PX1
      AY=PY1
      CALL GRTRSD(AX,AY,IX,IY,ISUBN0)
C
      DO17605I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
17605 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=32
      DO17611I=1,80
        IADE(I)=-1
17611 CONTINUE
      DO17610I=32,1,-1
        ILAST=I
        IF(ICAIFN(I:I).NE.' ')GOTO17619
17610 CONTINUE
17619 CONTINUE
      DO17620I=1,ILAST
        CALL DPCOAN(ICAIFN(I:I),IJUNK)
        IADE(I)=IJUNK
17620 CONTINUE
      IADE(ILAST+1)=0
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IERR=0
C
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
      AHEIG2=REAL(JHEIG2)
      IVAL3=1
      IF(ICAISL.EQ.'ITAL')IVAL3=2
      IVAL4=2
      IF(ICAIFW.EQ.'BOLD')IVAL4=2
      CALL CATXTH(IVAL2,STRING,AX,AY,IFONTH,IFONTV,AHEIG2,
     1            IADE,IVAL3,IVAL4,IERR)
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'WRTH')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRWRTH--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9013)PX1,PY1,PXDEL,PYDEL
 9013   FORMAT('PX1,PY1,PXDEL,PYDEL = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9033)PXLEC,PXLECG,PYLEC,PYLECG
 9033   FORMAT('PXLEC,PXLECG,PYLEC,PYLECG= ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9036)IC4,IC,IC1,IC2
 9036   FORMAT('IC4,IC,IC1,IC2 = ',A4,3(2X,A1))
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9037)PXINC,PYINC,PXINC2,PYINC2
 9037   FORMAT('PXINC,PYINC,PXINC2,PYINC2, = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9043)NCSTR
 9043   FORMAT('NCSTR = ',I8)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.LE.0)GOTO9047
          DO9045I=1,NCSTR
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9046)I,ICSTR(I:I),IASCNE
 9046       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9045     CONTINUE
 9047   CONTINUE
        WRITE(ICOUT,9049)IBUGG4,ISUBG4,IERRG4
 9049   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
      SUBROUTINE GRWRTV(PX1,PY1,ICTEXT,NCTEXT,
     1                  IPATT,IFONT,ICASE,IJUST,IDIR,ANGLE,IFILL,
     1                  ICOL,ICOLR,ICOLG,ICOLB,IRGBFL,
     1                  JPATT,JFONT,JCASE,JJUST,JDIR,ANGLE2,JFILL,JCOL,
     1                  PHEIGH,PWIDTH,PVEGAP,PHOGAP,PTHICK,JSIZE,
     1                  JHEIG2,JWIDT2,JVEGA2,JHOGA2,
     1                  PHEIG2,PWIDT2,PVEGA2,PHOGA2,
     1                  JTHICK,PTHIC2,PXLEC,PXLECG,PYLEC,PYLECG,
     1                  ISYMBL,ISPAC,PX99,PY99)
C
C     PURPOSE--FOR A SPECIFIC GRAPHICS DEVICE, AND FOR THE STANDARD
C              (HARDWARE-GENERATED) FONT, GO TO THE POINT (PX1,PY1) AND
C              WRITE OUT THE TEXT STRING (IN A VERTICAL (DOWN) DIRECTION)
C              CONTAINED IN THE CHARACTER VECTOR ICTEXT(.), WHICH
C              CONSISTS OF NCTEXT CHARACTERS.
C     NOTE--THE STRING WILL BE WRITTEN DOWN BUT EACH CHARACTER WILL BE
C            HORIZONTAL.  THIS IS A REFLECTION OF THE FACT THAT TEKTRONIX
C            HARDWARE-GENERATED SYMBOLS SOULD NOT (ON 4014, ETC.) BE
C            ROTATED.  THE CODE IN THIS SUBROUTINE COULD BE UPDATED TO
C            TAKE ADVANTAGE OF THE FACT THAT SOME DEVICES (E.G., HP AND
C            ZETA) CAN ROTATE CHARACTERS.
C     NOTE--PX1 AND PY1 ARE IN STANDARDIZED COORDINATES
C           THAT IS, EACH IS 0.0 TO 100.0.
C     NOTE--THE SUBSECTION    RWIND    HAS BEEN EXTRACTED
C           OUT OF     PLOT CONTROL COMMON   .
C           THIS (AND GRWRTH) ARE THE ONLY SUBROUTINES WHERE
C           THIS SUB-EXTRACTION HAS BEEN DONE.
C
C     WRITTEN BY--JAMES J. FILLIBEN
C                 STATISTICAL ENGINEERING DIVISION
C                 INFORMATION TECHNOLOGY LABORATORY
C                 NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY
C                 GAITHERSBURG, MD 20899-8980
C                 PHONE--301-975-2855
C     NOTE--DATAPLOT IS A REGISTERED TRADEMARK
C           OF THE NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
C     LANGUAGE--ANSI FORTRAN (1977)
C     VERSION NUMBER--83.6
C     ORIGINAL VERSION (AS A SEPARATE SUBROUTINE)--MAY       1983.
C     UPDATED         --JANUARY  1989.  SUN (BY BILL ANDERSON)
C                                      DRIVER OBSOLETE
C     UPDATED         --JANUARY  1989.  POSTSCRIPT (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  CGM (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  QMS QUIC (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  CALCOMP (BY ALAN HECKERT)
C     UPDATED         --JANUARY  1989.  ZETA (BY ALAN HECKERT)
C     UPDATED         --APRIL    1989.  SOFT-CODE BACKSLASH FOR UNIX
C     UPDATED         --OCTOBER  1989.  RWIND CORRECTION (NELSON HSU)
C     UPDATED         --MARCH    1990.  X11 (BY ALAN HECKERT)
C     UPDATED         --JULY     1990.  PACK HP2622 OUTPUT
C     UPDATED         --MARCH    1991.  PACK REGIS OUTPUT
C     UPDATED         --MAY      1991. RENUMBER TOP BRANCHES (JJF)
C     UPDATED         --MAY      1991. VGA/TURBOC DRIVER (JJF)
C                                      DRIVER OBSOLETE
C     UPDATED         --MAY      1991. FIX POSTSCRIPT CHAR. INDICES
C     UPDATED         --OCTOBER  1991.  POSTSCRIPT FONTS (ALAN)
C     UPDATED         --JUNE     1994. MAJOR MODIFICATIONS: (ALAN)
C                                      1) FIX JUSTIFICATION LOGIC
C                                      2) POSTSCRIPT AND X11 DO JUST IN
C                                         DEVICE DRIVER, SOME SPECIAL
C                                         HANDLING REQUIRED.
C                                      3) DISTINGUISH ROTATABLE AND
C                                         NON-ROTATABLE CHARACTERS
C                                      4) SCALE FACTOR (FOR MULTIPLOT
C                                         CASE) FOR UNROTATED DEVICES
C     UPDATED         --SEPTEMBER 1994. FIX TURBO-C SECTION
C                                       BAD C-SIDE MULTIPLOTTING (SCALING)
C     UPDATED         --JANUARY   1995. FIX FRONT END Y1LABEL
C     UPDATED         --SEPTEMBER 1995. RETROACTIVE JIM/ALAN MERGE
C     UPDATED         --SEPTEMBER 1995. FIX TURBO-C SECTION
C                            BAD C-SIDE MULTIPLOTTING (SCALING) (AGAIN)
C     UPDATED         --SEPTEMBER 1995. REFIX TURBO-C SECTION
C     UPDATED         --JULY     1996. LAHEY DRIVER (ALAN HECKERT)
C                                      OLD, CALCOMP STYLE
C                                      DRIVER OBSOLETE
C     UPDATED         --OCTOBER  1996. QUICKWIN DRIVER (ALAN)
C     UPDATED         --OCTOBER  1996. OPENGL DRIVER (ALAN)
C                                      USE BILL MITCHELLS OPENGL
C                                      BINDING FOR FORTRAN
C     UPDATED         --OCTOBER  1996. GKS (ALAN)
C                                      CODED, NOT TESTED
C     UPDATED         --OCTOBER  1996. BINARY CGM (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1996. DISPLAY POSTSCRIPT (ALAN)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --OCTOBER  1997. LAHEY INTERACTOR (ALAN)
C     UPDATED         --DECEMBER 1997. GENERAL CODED FOR GUI
C     UPDATED         --JULY     1998. LAHEY WINTERACTOR
C     UPDATED         --JUNE     2000. GD (FOR JPEG, PNG, WINDOWS BMP)
C     UPDATED         --JUNE     2000. MACINTOSH
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --JUNE     2000. PC PRINTER
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. LATEX (USING EEPIC)
C                                      PLACEHOLDER FOR NOW
C     UPDATED         --MARCH    2002. SVG (SCALABLE VECTOR GRAPHICS)
C     UPDATED         --MARCH    2005. SUPPORT FOR AQUATERM
C     UPDATED         --FEBRUARY 2006. IMPLEMENT LATEX DRIVER
C     UPDATED         --FEBRUARY 2009. SUBSCRIPT, SUPERSCRIPTS, GREEK
C                                      CHARACTERS FOR POSTSCRIPT DEVICE
C     UPDATED         --APRIL    2009. IMPLEMENT LIBPLOT DRIVER
C     UPDATED         --APRIL    2009. REMOVE PCL, RAMTEK, PRIN, XXXX DRIVERS
C                                      (THESE WERE NEVER ACTUALLY IMPLEMENTED)
C     UPDATED         --FEBRUARY  2012 "<" AND ">" IN STRINGS FOR SVG
C     UPDATED         --JULY      2015 ISSUE WITH TEXT FOR SVG DRIVER
C                                      WHEN USING THE CHROME BROWSER
C     UPDATED         --SEPTEMBER 2015 FIX GREYSCALE COLOR FOR SVG
C     UPDATED         --NOVEMBER  2015 FOR SVG, CHECK FOR "&" IN TEXT
C     UPDATED         --OCTOBER   2016 ADD PRE-PROCESSOR DIRECTIVES
C     UPDATED         --OCTOBER   2016 ADD TEMPLATES FOR SEVERL FUTURE
C                                      GRAPHICS DEVICES
C     UPDATED         --DECEMBER  2020 CHECK FOR > 130 CHARACTERS FOR
C                                      SVG DEVICE
C     UPDATED         --OCTOBER   2023 SCALABLE FONTS FOR X11
C
C-----NON-COMMON VARIABLES (GRAPHICS)-------------------------------------------
C
#ifdef HAVE_WININTERACTER
      USE WINTERACTER
#endif
#ifdef HAVE_INTERACTER
      USE INTERACTER
#endif
#ifdef HAVE_QWIN
CQWIN USE DFLIB
      USE IFQWIN
      TYPE (XYCOORD) XY
CCCCC TYPE (FONTINFO) MSFONT
      TYPE (windowconfig)   DPSCREEN
      CHARACTER*4 QWSCRN
      COMMON/QUICKWN/DPSCREEN,QWSCRN,IQWNFT,IQWNFN
#endif
C
      INTEGER IGKSID
      INTEGER IGKSWK
      INTEGER IGKSTY
      COMMON/IGKS/IGKSID,IGKSWK,IGKSTY
C
      CHARACTER*4 ICTEXT
#ifdef HAVE_LIBPLOT
      CHARACTER*4 ICTEX2(255)
#endif
      CHARACTER*4 IPATT
      CHARACTER*4 IFONT
      CHARACTER*4 ICASE
      CHARACTER*4 IJUST
      CHARACTER*4 IDIR
      CHARACTER*4 IFILL
      CHARACTER*4 ICOL
      CHARACTER*24 ISYMBL
      CHARACTER*4 ISPAC
      CHARACTER*4 IC4
      CHARACTER*1 IC
      CHARACTER*1 IC1
      CHARACTER*1 IC2
      CHARACTER*130 ICSTR
      CHARACTER*130 ICSTR2
      CHARACTER*130 ICSTR3
      CHARACTER*4 ISUBRO
      CHARACTER*4 ISUBN0
      CHARACTER*4 IERROR
      CHARACTER*4 ICTEMP
      CHARACTER*1 ICARAT
      CHARACTER*1 IQUOTE
      CHARACTER*2 ICJUNK
C
      DIMENSION ICTEXT(*)
      INTEGER STRING(130)
      INTEGER IADE(80)
      CHARACTER*4 IJUSTH
      CHARACTER*4 IJUSTV
#ifdef HAVE_LAHEY_CALCOMP
      CHARACTER*40 CLAHEY
      REAL RLAHEY(7)
      INTEGER ILAHEY(9)
      DIMENSION IHOLL(33)
#endif
#ifdef HAVE_CALCOMP
      DIMENSION IHOLL2(33)
#endif
#ifdef HAVE_ZETA
      DIMENSION IHOLL3(33)
#endif
C
      PARAMETER (MAXSYM=25)
      INTEGER ISTARV(MAXSYM)
      INTEGER ISTOPV(MAXSYM)
      INTEGER IFONTP(MAXSYM)
      REAL SIZEV(MAXSYM)
      REAL OFFSEV(MAXSYM)
C
C-----COMMON----------------------------------------------------------
C
      INCLUDE 'DPCOPA.INC'
      INCLUDE 'DPCOGR.INC'
      INCLUDE 'DPCONP.INC'
      INCLUDE 'DPCOBE.INC'
      INCLUDE 'DPCOST.INC'
      INCLUDE 'DPCODV.INC'
      INCLUDE 'DPCOF2.INC'
      COMMON /RWIND/
     1PWXMIN,PWXMAX,PWYMIN,PWYMAX,PWZMIN,PYZMAX,
     1WWXMIN,WWXMAX,WWYMIN,WWYMAX,WWZMIN,WWZMAX
C
      PARAMETER(MAXCLR=163)
      INTEGER IRED(MAXCLR), IBLUE(MAXCLR), IGREEN(MAXCLR)
C
      INCLUDE 'DPCOCT.INC'
      INCLUDE 'DPCOP2.INC'
C
C-----START POINT-----------------------------------------------------
C
      IERROR='OFF'
      ISUBN0='WRTV'
      ISUBRO=ISUBG4
      IC4='-999'
      IC='-'
      IC1='-'
      IC2='-'
C
      NCSTR=(-999)
C
      PXDEL=(-999.0)
      PYDEL=(-999.0)
      AFACT=(-999.0)
C
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'WRTV')THEN
        WRITE(ICOUT,999)
  999   FORMAT(1X)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,51)
   51   FORMAT('***** AT THE BEGINNING OF GRWRTV--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,53)PX1,PY1,PX99,PY99
   53   FORMAT('PX1,PY1,PX99,PY99 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,55)NCTEXT,JSIZE,JPATT,JFONT,JCASE,JJUST,JDIR
   55   FORMAT('NCTEXT,JSIZE,JPATT,JFONT,JCASE,JJUST,JDIR = ',7I5)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,59)IPATT,IFONT,ICASE,IJUST,IDIR
   59   FORMAT('IPATT,IFONT,ICASE,IJUST,IDIR = ',4(A4,2X),A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,56)(ICTEXT(I),I=1,MIN(25,NCTEXT))
   56   FORMAT('(ICTEXT(I),I=1,NCTEXT) = ',25A4)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,64)ANGLE,ANGLE2
   64   FORMAT('ANGLE,ANGLE2= ',2G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,65)IFILL,ICOL,JFILL,JCOL
   65   FORMAT('IFILL,ICOL,JFILL,JCOL = ',2(A4,2X),2I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,67)PHEIGH,JHEIG2,PHEIG2
   67   FORMAT('PHEIGH,JHEIG2,PHEIG2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,68)PWIDTH,JWIDT2,PWIDT2
   68   FORMAT('PWIDTH,JWIDT2,PWIDT2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,69)PVEGAP,JVEGA2,PVEGA2
   69   FORMAT('PVEGAP,JVEGA2,PVEGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,70)PHOGAP,JHOGA2,PHOGA2
   70   FORMAT('PHOGAP,JHOGA2,PHOGA2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,71)PTHICK,JTHICK,PTHIC2
   71   FORMAT('PTHICK,JTHICK,PTHIC2= ',G15.7,I8,G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,73)PXLEC,PXLECG,PYLEC,PYLECG
   73   FORMAT('PXLEC,PXLECG,PYLEC,PYLECG = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,75)ISPAC,ISYMBL
   75   FORMAT('ISPAC,ISYMBL = ',A4,2X,A24)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,79)IBUGG4,ISUBG4,IERRG4
   79   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
C               ******************************************************
C               **  STEP XX--                                       **
C               **  COMPUTE NEW START POINTS DEPENDING              **
C               **  ON THE JUSTIFICATION                            **
C               **  NOTE THAT TEKTRONIX CHARACTERS CANNOT BE ROTATED**
C               **  AND SO THE SETTINGS ARE SOMEWHAT STRANGE        **
C               **  (HEIGHT FOR WIDTH AND WIDTH FOR HEIGHT)         **
C               ******************************************************
CCCCC JUNE 1994.  FIX JUSTIFICATION IN FOLLOWING 2 WAYS:
CCCCC             1) DISTINGUISH BETWEEN THOSE DEVICES THAT ROTATE
CCCCC                CHARACTERS AND THOSE THAT DO NOT.
CCCCC             2) RETHINK LOGIC SO THAT HORIZONTAL IS STILL
CCCCC                LEFT TO RIGHT AND VERTICAL IS STILL TOP TO 
CCCCC                BOTTOM.
C
      IF(IMANUF.EQ.'POST')GOTO801
      IF(IMANUF.EQ.'CALC')GOTO801
      IF(IMANUF.EQ.'ZETA')GOTO801
      IF(IMANUF.EQ.'SVG ')GOTO801
      IF(IMANUF.EQ.'LATE')GOTO998
      GOTO901
C
C      ***************************************
C      **  ROTATED DEVICES                  **
C      ***************************************
C
  801 CONTINUE
      IF(IJUST.EQ.'LEFT')GOTO820
      IF(IJUST.EQ.'CENT')GOTO850
      IF(IJUST.EQ.'RIGH')GOTO880
C
      IF(IJUST.EQ.'LJUS')GOTO820
      IF(IJUST.EQ.'CJUS')GOTO850
      IF(IJUST.EQ.'RJUS')GOTO880
C
      IF(IJUST.EQ.'LEBO')GOTO810
      IF(IJUST.EQ.'CEBO')GOTO820
      IF(IJUST.EQ.'RIBO')GOTO830
C
      IF(IJUST.EQ.'LECE')GOTO840
      IF(IJUST.EQ.'CECE')GOTO850
      IF(IJUST.EQ.'RICE')GOTO860
C
      IF(IJUST.EQ.'LETO')GOTO870
      IF(IJUST.EQ.'CETO')GOTO880
      IF(IJUST.EQ.'RITO')GOTO890
C
      GOTO810
C
  810 CONTINUE
      PXINC=-PHEIG2
      PYINC=0.0
      GOTO995
C
  820 CONTINUE
      PXINC=-PHEIG2/2.0
      PYINC=0.0
      GOTO995
C
  830 CONTINUE
      PXINC=0.0
      PYINC=0.0
      GOTO995
C
  840 CONTINUE
      PXINC=-PHEIG2
      PYINC=PXLECG/2.0
      GOTO995
C
  850 CONTINUE
      PXINC=-PHEIG2/2.0
      PYINC=PXLECG/2.0
      GOTO995
C
  860 CONTINUE
      PXINC=0.0
      PYINC=PXLECG/2.0
      GOTO995
C
  870 CONTINUE
      PXINC=-PHEIG2
      PYINC=PXLECG
      GOTO995
C
  880 CONTINUE
      PXINC=-PHEIG2/2.0
      PYINC=PXLECG
      GOTO995
C
  890 CONTINUE
      PXINC=0.0
      PYINC=PXLECG
      GOTO995
C
C
C      ***************************************
C      **  UNROTATED DEVICES                **
C      ***************************************
CCCCC JUNE 1994.  FOLLOWING SECTION REWRITTEN.
C
  901 CONTINUE
CCCCC JULY, 1996.  ADD SETTINGS FOR IJUSTH, IJUSTV IN FOLLOWING BLOCK
      IJUSTH='LEFT'
      IJUSTV='BOTT'
C
CCCCC IF(IJUST.EQ.'LEFT')GOTO910
CCCCC IF(IJUST.EQ.'CENT')GOTO920
CCCCC IF(IJUST.EQ.'RIGH')GOTO930
      IF(IJUST.EQ.'LEFT')GOTO920
      IF(IJUST.EQ.'CENT')GOTO950
      IF(IJUST.EQ.'RIGH')GOTO980
C
CCCCC IF(IJUST.EQ.'LJUS')GOTO910
CCCCC IF(IJUST.EQ.'CJUS')GOTO920
CCCCC IF(IJUST.EQ.'RJUS')GOTO930
      IF(IJUST.EQ.'LJUS')GOTO920
      IF(IJUST.EQ.'CJUS')GOTO950
      IF(IJUST.EQ.'RJUS')GOTO980
C
      IF(IJUST.EQ.'LEBO')GOTO910
      IF(IJUST.EQ.'CEBO')GOTO920
      IF(IJUST.EQ.'RIBO')GOTO930
C
      IF(IJUST.EQ.'LECE')GOTO940
      IF(IJUST.EQ.'CECE')GOTO950
      IF(IJUST.EQ.'RICE')GOTO960
C
      IF(IJUST.EQ.'LETO')GOTO970
      IF(IJUST.EQ.'CETO')GOTO980
      IF(IJUST.EQ.'RITO')GOTO990
C
      GOTO910
C
  910 CONTINUE
      PXINC=0.0
      PYINC=-PYLEC+PHEIG2
      IJUSTH='LEFT'
      IJUSTV='TOP '
      GOTO995
C
  920 CONTINUE
CCCCC PXINC=0.0
CCCCC PYINC=-(PYLEC/2.0)+PHEIG2
      PXINC=PWIDT2/2.0
      PYINC=-PYLEC+PHEIG2
      IJUSTH='CENT'
      IJUSTV='TOP '
      GOTO995
C
  930 CONTINUE
CCCCC PXINC=0.0
CCCCC PYINC=PHEIG2
      PXINC=PWIDT2
      PYINC=-PYLEC+PHEIG2
      IJUSTH='RIGH'
      IJUSTV='TOP '
      GOTO995
C
  940 CONTINUE
CCCCC PXINC=PWIDT2/2.0
CCCCC PYINC=-PYLEC+PHEIG2
      PXINC=0.0
      PYINC=-(PYLEC/2.0)+PHEIG2
      IJUSTH='LEFT'
      IJUSTV='CENT'
      GOTO995
C
  950 CONTINUE
CCCCC PXINC=PWIDT2/2.0
      PXINC=PWIDT2/2.0
      PYINC=-(PYLEC/2.0)+PHEIG2
      IJUSTH='CENT'
      IJUSTV='CENT'
      GOTO995
C
  960 CONTINUE
CCCCC PXINC=PWIDT2/2.0
CCCCC PYINC=PHEIG2
      PXINC=PWIDT2
      PYINC=-(PYLEC/2.0)+PHEIG2
      IJUSTH='RIGH'
      IJUSTV='CENT'
      GOTO995
C
  970 CONTINUE
CCCCC PXINC=PWIDT2
CCCCC PYINC=-PYLEC+PHEIG2
      PXINC=0.0
      PYINC=PHEIG2
      IJUSTH='LEFT'
      IJUSTV='BOTT'
      GOTO995
C
  980 CONTINUE
CCCCC PXINC=PWIDT2
CCCCC PYINC=-(PYLEC/2.0)+PHEIG2
      PXINC=PWIDT2/2.0
      PYINC=PHEIG2
      IJUSTH='CENT'
      IJUSTV='BOTT'
      GOTO995
C
  990 CONTINUE
      PXINC=PWIDT2
      PYINC=PHEIG2
      IJUSTH='RIGH'
      IJUSTV='BOTT'
      GOTO995
C
  995 CONTINUE
CCCCC PX1P=PX1-PXINC
CCCCC PY1P=PY1-PYINC
CCCCC JUNE 1994.  DEFINE SCALE FACTOR
      AFACT=100.0/(PWXMAX-PWXMIN)
CCCCC PXINC2=PXINC*(100.0/(PWXMAX-PWXMIN))
CCCCC PYINC2=PYINC*(100.0/(PWYMAX-PWYMIN))
      PXINC2=PXINC*AFACT
      PYINC2=PYINC*AFACT
      PX1P=PX1-PXINC2
      PY1P=PY1-PYINC2
CCCCC JUNE 1994.  FOR POSTSCRIPT, Y JUSTIFICATION DONE IN DRIVER.
CCCCC             X COORDINATE CONTAINS BOTH CHARACTER AND GAP, USE A
CCCCC             FUDGE FACTOR TO COMPENSATE (PROBABLY NOT TOTALLY
CCCCC             ACCURATE, BUT BETTER THAN NO ADJUSTMENT).
      IF(IMANUF.EQ.'POST')THEN
        PY1P=PY1
        PX1P=PX1-0.75*PXINC2
      ENDIF
C
C
C               *************************
C               **  STEP XX--          **
C               **  COMPUTE END POINT  **
C               *************************
C
      ANCTEX=NCTEXT
      PX99=PX1P
      PY99=PY1P-ANCTEX*AFACT*(PHEIG2+PVEGA2)
C
  998 CONTINUE

C               ********************************************
C               **  STEP 1--                              **
C               **  BRANCH ACCORDING TO THE MANUFACTURER  **
C               **  AND THE MODEL                         **
C               ********************************************
C
      IF(IMANUF.EQ.'QWIN')THEN
        GOTO4700
      ELSEIF(IMANUF.EQ.'POST')THEN
        GOTO8600
      ELSEIF(IMANUF.EQ.'X11 ')THEN
        GOTO9600
      ELSEIF(IMANUF.EQ.'AQUA')THEN
        GOTO13500
      ELSEIF(IMANUF.EQ.'GENE')THEN
        IF(IMODEL.EQ.'CODE')GOTO3200
        IF(IMODEL.EQ.'CGM')GOTO3300
        IF(IMODEL.EQ.'CGMB')GOTO3400
        GOTO3100
      ELSEIF(IMANUF.EQ.'SVG ')THEN
        GOTO16000
      ELSEIF(IMANUF.EQ.'GD  ')THEN
        GOTO12000
      ELSEIF(IMANUF.EQ.'LATE')THEN
        GOTO15000
      ELSEIF(IMANUF.EQ.'CAIR')THEN
        GOTO17000
      ELSEIF(IMANUF.EQ.'D3  ')THEN
        GOTO19000
      ELSEIF(IMANUF.EQ.'WMF ')THEN
        GOTO18000
      ELSEIF(IMANUF.EQ.'OPGL')THEN
        GOTO4800
      ELSEIF(IMANUF.EQ.'TEKT')THEN
        GOTO1100
      ELSEIF(IMANUF.EQ.'HP')THEN
        IF(IMODEL.EQ.'7221')GOTO2100
        IF(IMODEL.EQ.'2622')GOTO2300
        IF(IMODEL.EQ.'2623')GOTO2300
        IF(IMODEL.EQ.'2627')GOTO2300
        IF(IMODEL.EQ.'2647')GOTO2300
        GOTO2200
      ELSEIF(IMANUF.EQ.'LIBP')THEN
        GOTO2600
      ELSEIF(IMANUF.EQ.'REGI')THEN
        GOTO8100
      ELSEIF(IMANUF.EQ.'GKS ')THEN
        GOTO11000
      ELSEIF(IMANUF.EQ.'LAHE')THEN
        IF(IMODEL.EQ.'INTE')GOTO4900
        IF(IMODEL.EQ.'WINT')GOTO4950
        GOTO4600
      ELSEIF(IMANUF.EQ.'ABSO' .OR. IMANUF.EQ.'PLPL')THEN
        GOTO13000
      ELSEIF(IMANUF.EQ.'QUIC')THEN
        GOTO9100
      ELSEIF(IMANUF.EQ.'CALC')THEN
        GOTO4100
      ELSEIF(IMANUF.EQ.'ZETA')THEN
        GOTO5100
      ELSEIF(IMANUF.EQ.'TURB')THEN
        GOTO10000
      ELSEIF(IMANUF.EQ.'SUN ')THEN
        GOTO6600
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 11--                                       **
C               **  TREAT THE TEKTRONIX 4014 (ETC.) CASE            **
C               ******************************************************
C
 1100 CONTINUE
      IF(NUMHPP.GE.4000)IFACTO=1
      IF(NCTEXT.GT.0)THEN
        DO1110I=1,NCTEXT
          ICSTR(1:1)=IGSC
          NCSTR=1
          IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
          CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
          CALL TKTRPT(IX1P,IY1P,IFACTO,ICSTR,NCSTR,ISUBN0)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IUSC
          NCSTR=NCSTR+1
          ICTEMP=ICTEXT(I)
          ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 1110   CONTINUE
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 21--                                       **
C               **  TREAT THE HEWLETT-PACKARD 7221 CASE             **
C               **  (MULTI-COLOR PENPLOTTER)                        **
C               **  TO WRITE A "VERTICAL" TEXT STRING--             **
C               **  USE THE LOWER CASE P (= MOVE) INSTRUCTION       **
C               **  AND PACKED BINARY COORDINATES,                  **
C               **  AND THE TILDA SINGLE (RT-LEFT) QUOTE (= INVOKE  **
C               **  LABEL MODE) I AND THE DESIRED TEXT STRING,      **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH TRAILING RIGHT CURLY BRACKET WHICH IS THE **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 7221A GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 80-85, 253-254.                 **
C               **             PAGE 111 AND 112.                    **
C               **  NOTE--THE STRING IS "VERTICAL" ONLY IN SENSE    **
C               **        THAT THE STRING WILL STEP DOWN VERTICALLY **
C               **        BUT EACH CHARACTER WILL BE HORIZONTAL.    **
C               **        THIS CODE COULD BE IMPROVED TO TAKE       **
C               **        ADVANTAGE OF THE FACT THAT                **
C               **        THAT HP CAN ROTATE ITS CHARACTERS.        **
C               ******************************************************
C
 2100 CONTINUE
C
      IF(NCTEXT.GT.0)THEN
        DO2110I=1,NCTEXT
          ICSTR(1:1)='p'
          NCSTR=1
          IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          CALL HPTRPT(IX,IY,ICSTR,NCSTR,ISUBN0)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='}'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:2)='~'''
          ICTEMP=ICTEXT(I)
          ICSTR(3:3)=ICTEMP(1:1)
          ICSTR(4:4)=IETXC
          NCSTR=4
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 2110   CONTINUE
      ENDIf
      GOTO9000
C
C               ******************************************************
C               **  STEP 22--                                       **
C               **  TREAT THE HEWLETT-PACKARD HP-GL CASES           **
C               **  (ALL PLOTTERS THAT TAKE HP-GL INSTRUCTIONS)     **
C               **  (MULTI-COLOR PENPLOTTERS)                       **
C               **  TO WRITE A VERTICAL TEXT STRING--               **
C               **  USE THE PU (= PEN UP) INSTRUCTION               **
C               **  AND THE PA (= PLOT ABSOLUTE) INSTRUCTION        **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  AND THE LB (= LABEL) INSTRUCTION                **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ETX TO DENOTE THE END OF TEXT STRING,       **
C               **  (WITH   TRAILING SEMI-COLONS WHICH ARE THE      **
C               **  DEFAULT NO-OP END-OF-INSTRUCTION TERMINATOR).   **
C               **  REFERENCE--HP 9872C GRAPHICS PLOTTER            **
C               **             OPERATING AND PROGRAMMING MANUAL,    **
C               **             PAGE 62, 143.                        **
C               **             PAGE 65-67, 143.                     **
C               **             PAGE 75, 141.                        **
C               **  NOTE--THE STRING IS "VERTICAL" ONLY IN SENSE    **
C               **        THAT THE STRING WILL STEP DOWN VERTICALLY **
C               **        BUT EACH CHARACTER WILL BE HORIZONTAL.    **
C               **        THIS CODE COULD BE IMPROVED TO TAKE       **
C               **        ADVANTAGE OF THE FACT THAT                **
C               **        THAT HP CAN ROTATE ITS CHARACTERS.        **
C               ******************************************************
C
 2200 CONTINUE
C
      IF(NCTEXT.GT.0)THEN
        DO2210I=1,NCTEXT
          IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          ICSTR(1:5)='PU;PA'
          NCSTR=5
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          ICSTR(11:11)=','
          NCSTR=11
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          ICSTR(17:17)=';'
          NCSTR=17
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ICSTR(1:2)='LB'
          NCSTR=2
          ICTEMP=ICTEXT(I)
          ICSTR(3:3)=ICTEMP(1:1)
          ICSTR(4:4)=IETXC
          ICSTR(5:5)=';'
          NCSTR=5
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 2210   CONTINUE
      ENDIF
      GOTO9000
C
C               **********************************************************
C               **  STEP 23--                                           **
C               **  TREAT THE HEWLETT-PACKARD HP-2622 CASES             **
C               **  (ALL PLOTTERS THAT TAKE HP-2622-LIKE INSTRUCTIONS)  **
C               **  (MONOCHROME DISPLAY TERMINALS)                      **
C               **  REFERENCE--HP 2322C GRAPHICS PLOTTER                **
C               **             REFERENCE MANUAL,                        **
C               **             PAGE 10-12, 10-13, 10-21.
C               **********************************************************
C
C     JULY, 1990.  PACK OUTPUT (REQUESTED BY MIKE KELLY FOR BETTER
C                  PERFORMANCE ON THE HP EMULATOR PACKAGE).  NOTE THAT
C                  THE TEXT STRING TERMINATES WITH A  , SO ONLY PUT 1
C                  LINE AT A TIME.  HOWEVER, THIS STILL REDUCES NUMBER
C                  OF LINES BY HALF.
C
 2300 CONTINUE
      IF(NCTEXT.GT.0)THEN
        NCSTR=0
        DO2310I=1,NCTEXT
          IF(I.GE.2)PY1P=PY1P-AFACT*2.0*(PHEIG2+PVEGA2)
          CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
          IF(NCSTR.GT.84)THEN
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            NCSTR=0
          ENDIF
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IESCC
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+2
          ICSTR(NCSTR:NCSTR2)='*pa'
          NCSTR=NCSTR2
          NCHTOT=5
          CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=','
          CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)='Z'
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IESCC
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+1
          ICSTR(NCSTR:NCSTR2)='*l'
          NCSTR=NCSTR2+1
          ICTEMP=ICTEXT(I)
          ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICRC
C
 2310   CONTINUE
        IF(NCSTR.GT.0)CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 26--                                       **
C               **  TREAT THE UNIX LIBPLOT          CASE            **
C               ******************************************************
C
 2600 CONTINUE
#ifdef HAVE_LIBPLOT
C
      CALL LIBPTR(ICTEXT,NCTEXT,ICTEX2,NCTEX2,ICASE,ISUBRO,IBUGG4)
      DO2605I=1,NCTEX2
        IC1=ICTEX2(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
 2605 CONTINUE
      STRING(NCTEX2+1)=0
C
      ILAST=80
      DO2610I=80,1,-1
        ILAST=I
        IF(ILPLFN(I:I).NE.' ')GOTO2619
 2610 CONTINUE
 2619 CONTINUE
      DO2620I=1,ILAST
        CALL DPCOAN(ILPLFN(I:I),IJUNK)
        IADE(I)=IJUNK
 2620 CONTINUE
      IADE(ILAST+1)=0
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IERR=0
C
      CALL PLTXTV(IADE,STRING,DBLE(PX1),DBLE(PY1),IFONTH,IFONTV,
     1            DBLE(PHEIG2),IERR)
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 31--                                       **
C               **  TREAT THE GENERAL (DEVICE-INDEPENDENT) CASE     **
C               ******************************************************
C
 3100 CONTINUE
      IF(NCTEXT.LE.0)GOTO9000
C     JANUARY 1988: SOFTWARE SWITCH TO LET DATAPLOT DO THE JUSTIFICATION
C                   OR LET THE POST PROCESSOR DO IT
C
      PX1P=PX1
      PY1P=PY1
      ICSTR(1:8)='MOVE TO '
      NCSTR=8
      NCHTOT=10
      NCHDEC=5
      CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
      PX1P=AX
      PY1P=AY
      CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(19:20)='  '
      NCSTR=20
      CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:11)='WRITE TEXT '
      NCSTR=11
      DO3160I=1,NCTEXT
        ICTEMP=ICTEXT(I)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
 3160 CONTINUE
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************************
C               **  STEP 32--                                                **
C               **  TREAT THE CODED GENERAL (DEVICE-INDEPENDENT) CASE        **
C               ***************************************************************
C
C  DECEMBER 1997.  MODIFY GENERAL CODED FOR THE GUI.
C
 3200 CONTINUE
      IF(NCTEXT.LE.0)GOTO9000
C     JANUARY 1988: SOFTWARE SWITCH TO LET DATAPLOT DO THE JUSTIFICATION
C                   OR LET THE POST PROCESSOR DO IT
C
      IF(IMODE2.EQ.'PACK'.OR.IMODE2.EQ.'GUI')THEN
        CALL GRTRSA(PX1,PY1,AX,AY,ISUBN0)
        IPXTMP=INT(AX*10.**IGENFA+0.5)
        IPYTMP=INT(AY*10.**IGENFA+0.5)
        ICSTR(1:2)='M '
        NCSTR=2
        NCHTOT=IGENFA+3
        CALL GRTRIN(IPXTMP,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='  '
        CALL GRTRIN(IPYTMP,NCHTOT,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:5)='WRTE '
        NCSTR=5
        DO3285I=1,NCTEXT
          ICTEMP=ICTEXT(I)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
 3285   CONTINUE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ELSE
        PX1P=PX1
        PY1P=PY1
        ICSTR(1:5)='MOTO '
        NCSTR=5
        NCHTOT=10
        NCHDEC=5
        CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
        PX1P=AX
        PY1P=AY
        CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
        ICSTR(16:17)='  '
        NCSTR=17
        CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        ICSTR(1:5)='WRTE '
        NCSTR=5
        DO3260I=1,NCTEXT
          ICTEMP=ICTEXT(I)
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
 3260   CONTINUE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ENDIF
      GOTO9000
C
C               ******************************************************
C               **  STEP 33--                                       **
C               **  TREAT THE GENERAL (CGM               ) CASE     **
C               ******************************************************
C
 3300 CONTINUE
      IF(NCTEXT.LE.0)GOTO9000
C     SOFTWARE SWITCH TO LET DATAPLOT DO THE JUSTIFICATION
C     OR LET THE POST PROCESSOR DO IT
C
      ICSTR(1:15)='TEXTPATH DOWN;'
      NCSTR=15
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      PX1P=PX1
      PY1P=PY1
      ICSTR(1:6)='TEXT ('
      NCSTR=6
      NCHTOT=10
      NCHDEC=5
      CALL GRTRRE(PX1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(17:17)=','
      NCSTR=17
      CALL GRTRRE(PY1P,NCHTOT,NCHDEC,ICSTR,NCSTR)
      ICSTR(28:34)=') FINAL'
      NCSTR=34
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      ICSTR(1:1)='"'
      NCSTR=1
      K=0
      DO3362J=1,NCTEXT
        K=J+NCSTR
        ICSTR(K:K)=ICTEXT(J)
 3362 CONTINUE
      K=K+1
      ICSTR(K:K)='"'
      K=K+1
      ICSTR(K:K)=';'
      NCSTR=K
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ***************************************************
C               **  STEP 34--                                    **
C               **  TREAT THE CGM (BINARY)                 CASE  **
C               ***************************************************
C
 3400 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 41--                                       **
C               **  TREAT THE CALCOMP XXXXXX CASE                   **
C               **  TO WRITE A VERTICAL TEXT STRING--               **
C               **  WRITE OUT AN XXXXXXXXXX                         **
C               **  USE CALCOMP LIBRARY ROUTINES                    **
C               **  REFERENCE--XX                                   **
C               **             XX                                   **
C               **             PAGES XX AND XX                      **
C               ******************************************************
C
 4100 CONTINUE
#ifdef HAVE_CALCOMP
      CALL CALCPT(PX1P,PY1P,AX1,AY1,ISUBN0)
      DO4112J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 4112 CONTINUE
      ANGLE=90.
      AXTEMP=0.
      CALL CALCPT(AXTEMP,PHEIG2,AYTMP2,HEIGHT,ISUBN0)
      NCSTR=NCTEXT
      CALL CALCTR(ICSTR,IHOLL2,NCTEXT)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 46--                                       **
C               **  TREAT THE LAHEY   XXXXXX CASE                   **
C               **  REFERENCE--Programmer's Reference, Revision C   **
C               **             Lahey Computer Systems, January, 1992**
C               **             PAGES 51 THRU 65                     **
C               ******************************************************
C
 4600 CONTINUE
#ifdef HAVE_LAHEY_CALCOMP
      CLAHEY=0
      DO4601I=1,7
        RLAHEY(I)=0.0
4601  CONTINUE
      DO4603I=1,9
        ILAHEY(I)=0.0
4603  CONTINUE
      IF(NCTEXT.LE.0)GOTO9000
      CALL GRINFO(ILAHEY,RLAHEY,CLAHEY)
      PX1P=PX1
      PY1P=PY1
      CALL CALCPT(PX1P,PY1P,AX1,AY1,ISUBN0)
      ICOLMN=INT(REAL(ILAHEY(8))*(AX1*RLAHEY(1)/11.0)+0.5)
      ILINE=INT(REAL(ILAHEY(9))*(RLAHEY(1)*(8.5-AY1)/8.5)+0.5)
      IF(IJUSTH.EQ.'LEFT')THEN
        NSHIFT=0
      ELSEIF(IJUSTH.EQ.'CENT')THEN
        NSHIFT=1
      ELSEIF(IJUSTH.EQ.'RIGH')THEN
        NSHIFT=1
      ELSE
        NSHIFT=0
      ENDIF
      ICOLMN=ICOLMN-NSHIFT
      IF(ICOLMN.LT.1)ICOLMN=1
      IF(ICOLMN.GT.ILAHEY(8))ICOLMN=ILAHEY(8)
      IF(IJUSTV.EQ.'TOP ')THEN
        NSHIFT=0
      ELSEIF(IJUSTV.EQ.'CENT')THEN
        NSHIFT=NCTEXT/2
      ELSEIF(IJUSTV.EQ.'BOTT')THEN
        NSHIFT=NCTEXT
      ELSE
        NSHIFT=0
      ENDIF
      ILINE=ILINE-NSHIFT
      IF(ILINE.LT.1)ILINE=1
      IF(ILINE.GT.ILAHEY(9))ILINE=ILAHEY(9)
      DO4610I=1,NCTEXT
        ICTEMP=' '
        ICTEMP(1:1)=ICTEXT(I)
        IF(ILINE.GE.1.AND.ILINE.LE.ILAHEY(9))
     1     CALL GTEXT(ILINE,ICOLMN,ICTEMP)
        ILINE=ILINE+1
 4610 CONTINUE
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 47--                                       **
C               **  TREAT THE MICROSOFT QUICKWIN DRIVER             **
C               **  FOR WINDOWS 95 AND WINDOWS NT.                  **
C               ******************************************************
C
 4700 CONTINUE
#ifdef HAVE_QWIN
      ICSTR=' '
      DO4712J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 4712 CONTINUE
      CALL GRTRSD(PX1,PY1,IX1,IY1,ISUBN0)
      CALL SETGTEXTROTATION(900)
      IWIDTH=GETGTEXTEXTENT(ICSTR(1:NCTEXT))
C
      IF(IJUST.EQ.'LEFT')GOTO4720
      IF(IJUST.EQ.'CENT')GOTO4750
      IF(IJUST.EQ.'RIGH')GOTO4780
C
      IF(IJUST.EQ.'LJUS')GOTO4720
      IF(IJUST.EQ.'CJUS')GOTO4750
      IF(IJUST.EQ.'RJUS')GOTO4780
C
      IF(IJUST.EQ.'LEBO')GOTO4710
      IF(IJUST.EQ.'CEBO')GOTO4720
      IF(IJUST.EQ.'RIBO')GOTO4730
C
      IF(IJUST.EQ.'LECE')GOTO4740
      IF(IJUST.EQ.'CECE')GOTO4750
      IF(IJUST.EQ.'RICE')GOTO4760
C
      IF(IJUST.EQ.'LETO')GOTO4770
      IF(IJUST.EQ.'CETO')GOTO4780
      IF(IJUST.EQ.'RITO')GOTO4790
C
      GOTO4710
C
 4710 CONTINUE
      IXINC=-IWIDTH
      IYINC=0
      GOTO4795
C
 4720 CONTINUE
      IXINC=-IWIDTH/2
      IYINC=0
      GOTO4795
C
 4730 CONTINUE
      IXINC=0
      IYINC=0
      GOTO4795
C
 4740 CONTINUE
      IXINC=-IWIDTH
      IYINC=JHEIG2/2
      GOTO4795
C
 4750 CONTINUE
      IXINC=-IWIDTH/2
      IYINC=JHEIG2/2
      GOTO4795
C
 4760 CONTINUE
      IXINC=0
      IYINC=JHEIG2/2
      GOTO4795
C
 4770 CONTINUE
      IXINC=-IWIDTH
      IYINC=JHEIG2
      GOTO4795
C
 4780 CONTINUE
      IXINC=-IWIDTH/2
      IYINC=JHEIG2
      GOTO4795
C
 4790 CONTINUE
      IXINC=0
      IYINC=JHEIG2
 4795 CONTINUE
C
      CALL MOVETO(INT2(IX1+IXINC),INT2(IY1+IYINC),XY)
      CALL OUTGTEXT(ICSTR(1:NCTEXT))
      CALL SETGTEXTROTATION(0)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 48--                                       **
C               **  TREAT THE OPEN-GL DRIVER                        **
C               **  FOR WINDOWS 95 AND WINDOWS NT AND X11           **
C               ******************************************************
C
 4800 CONTINUE
#ifdef HAVE_OPEN_GL
      IF(IOPGOF.EQ.'OFF')GOTO9000
C
      DO4805I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
 4805 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=80
      DO4810I=80,1,-1
        ILAST=I
        IF(IX11FN(I:I).NE.' ')GOTO4819
 4810 CONTINUE
 4819 CONTINUE
      DO4820I=1,ILAST
        CALL DPCOAN(IX11FN(I:I),IJUNK)
        IADE(I)=IJUNK
 4820 CONTINUE
      IADE(ILAST+1)=0
C
      CALL GLTATT(IADE,IXERR)
      IF(IXERR.EQ.1) THEN
        WRITE(ICOUT,4821)
 4821   FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE CURRENT FONT')
        CALL DPWRST('XXX','BUG ')
      ELSEIF(IXERR.EQ.2)THEN
        WRITE(ICOUT,4822)
 4822   FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE DEFAULT FONT')
        CALL DPWRST('XXX','BUG ')
      END IF
C
      IFONTH=0
      IFONTV=0
C
      IF(IJUST.EQ.'LEFT'.OR.IJUST.EQ.'LJUS')THEN
        IFONTH=1
        IFONTV=1
      ELSEIF(IJUST.EQ.'CENT'.OR.IJUST.EQ.'CJUS')THEN
        IFONTH=1
        IFONTV=0
      ELSEIF(IJUST.EQ.'RIGH'.OR.IJUST.EQ.'RJUS')THEN
        IFONTH=1
        IFONTV=2
      ELSEIF(IJUST.EQ.'LEBO')THEN
        IFONTH=0
        IFONTV=1
      ELSEIF(IJUST.EQ.'CEBO')THEN
        IFONTH=1
        IFONTV=1
      ELSEIF(IJUST.EQ.'RIBO')THEN
        IFONTH=2
        IFONTV=1
      ELSEIF(IJUST.EQ.'LECE')THEN
        IFONTH=0
        IFONTV=0
      ELSEIF(IJUST.EQ.'CECE')THEN
        IFONTH=1
        IFONTV=0
      ELSEIF(IJUST.EQ.'RICE')THEN
        IFONTH=2
        IFONTV=0
      ELSEIF(IJUST.EQ.'LETO')THEN
        IFONTH=0
        IFONTV=2
      ELSEIF(IJUST.EQ.'CETO')THEN
        IFONTH=1
        IFONTV=2
      ELSEIF(IJUST.EQ.'RITO')THEN
        IFONTH=2
        IFONTV=2
      ENDIF
C
      IXERR=0
      CALL GLTEXV(STRING,PX1,PY1,IFONTH,IFONTV,IXERR)
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 49--                                       **
C               **  TREAT THE LAHEY INTERACTOR CASE                 **
C               ******************************************************
C
 4900 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 49B-                                       **
C               **  TREAT THE LAHEY WINTERACTOR CASE                **
C               ******************************************************
C
 4950 CONTINUE
#ifdef HAVE_WININTERACTER
      IF(NCTEXT.LE.0)GOTO9000
      CALL IGrCharJustify('C')
      NCSTR=0
      PY1P=PY1P+PHEIG2
      DO4910I=1,NCTEXT
        IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
        CALL IGrCharOut(PX1,PY1+PY1P,ICSTR(I:I))
 4910 CONTINUE
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 51--                                       **
C               **  TREAT THE ZETA  3600SX AND 3653SX CASES         **
C               **  TO WRITE A VERTICAL TEXT STRING--               **
C               **  USE THE 1 OP CODE (= MOVE)                      **
C               **  ALONG WITH COORDINATES,                         **
C               **  USE THE 3 OP CODE (= CHARACTER STRING)          **
C               **  ALONG WITH RELATIVE COOR                        **
C               **  ALONG WITH NUMBER OF CHAR (= 1)                 **
C               **  ALONG WITH CONVERTED CHAR STRING                **
C               **  (2 CONVERTED CHAR FOR EVERY SINGLE CHAR).       **
C               **  REFERENCE--USER MANUAL FOR DIGITAL PLOTTER      **
C               **             MODELS 3600SX AND 3653SX             **
C               **             PAGES B-0 , B-1, AND E-1             **
C               **  REFERENCE--ZETA FORTRAN REFERENCE MANUAL        **
C               **             PAGE A-2                             **
C               **  NOTE--THE STRING IS "VERTICAL" ONLY IN SENSE    **
C               **        THAT THE STRING WILL STEP DOWN VERTICALLY **
C               **        BUT EACH CHARACTER WILL BE HORIZONTAL.    **
C               **        THIS CODE COULD BE IMPROVED TO TAKE       **
C               **        ADVANTAGE OF THE FACT THAT                **
C               **        THAT ZETA CAN ROTATE ITS CHARACTERS.      **
C               ******************************************************
C
 5100 CONTINUE
#ifdef HAVE_ZETA
      CALL CALCPT(PX1P,PY1P,AX1,AY1,ISUBN0)
      DO5112J=1,NCTEXT
        ICSTR(J:J)=ICTEXT(J)
 5112 CONTINUE
      ANGLE=90.
      AXTEMP=0.
      CALL CALCPT(AYTEMP,PHEIG2,AYTMP2,HEIGHT,ISUBN0)
      CALL CALCTR(ICSTR,IHOLL3,NCTEXT)
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 66--                                       **
C               **  TREAT THE SUN CASE - WRITTEN BY BILL ANDERSON   **
C               ******************************************************
C
 6600 CONTINUE
#ifdef HAVE_SUN
      IF(NCTEXT.LE.0)GOTO9000
      DO6610I=1,NCTEXT
        NCSTR=1
        IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
        ICTEMP=ICTEXT(I)
        ICSTR(1:1)=ICTEMP(1:1)
        ITEMP=0
        CALL DPCONA(ITEMP,ICSTR(2:2))
        CALL GRTRSD(PX1P,PY1P,IX1P,IY1P,ISUBN0)
        CALL cftext(IX1P,IY1P,ICSTR(1:2))
 6610 CONTINUE
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 81--                                       **
C               **  TREAT THE DEC  REGIS CASE                       **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  USE THE P[ (= POSITION ) INSTRUCTION            **
C               **  ALONG WITH INTEGER COORDINATES,                 **
C               **  WITH A TRAILING ]                               **
C               **  AND THE T' (= TEXT) INSTRUCTION                 **
C               **  AND THE DESIRED TEXT STRING,                    **
C               **  AND ' TO DENOTE THE END OF TEXT STRING,         **
C               **  REFERENCE--VT125 GRAPHICS TERMINAL USER GUIDE   **
C               **             PAGES 118 AND 120                    **
C               ******************************************************
C
C     MARCH, 1991.  PACK REGIS OUTPUT.  ALSO, REGIS DRAWS CHARACTER BELOW
C                   RATHER THAN ABOVE THE CURSUR POSITION (AS DATAPLOT
C                   ASSUMES), SO ADJUST STARTING POSITION BY A CHARACTER
C                   HEIGHT.
C
 8100 CONTINUE
C
      IF(NCTEXT.LE.0)GOTO9000
      NCSTR=0
      NCHTOT=5
      MAXREG=130
      PY1P=PY1P+PHEIG2
      DO8110I=1,NCTEXT
        IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
        IF(NCSTR.GT.MAXREG-18)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        END IF
        CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+1
        ICSTR(NCSTR:NCSTR2)='P['
        NCSTR=NCSTR2
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=','
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=']'
C
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='T'
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=''''
        NCSTR=NCSTR+1
        ICTEMP=ICTEXT(I)
        ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=''''
C
 8110 CONTINUE
      IF(NCSTR.GT.0)CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      GOTO9000
C
C               ******************************************************
C               **  STEP 86--                                       **
C               **  TREAT THE POSTSCRIPT            CASE            **
C               **  TO WRITE A VERTICAL   TEXT STRING--             **
C               **  90 ROTATE                                       **
C               **  XCOOR YCOOR MOVETO   (NOTE: USE UNADJUSTED COOR)**
C               **  (STRING) SHOW                                   **
C               **  -90 ROTATE                                      **
C               **  NOTE:  RIGHTSHOW AND CENTSHOW ARE DATAPLOT      **
C               **         DEFINED PROCEDURES TO RIGHT AND CENTER   **
C               **         JUSTIFY STRINGS RESPECTIVELY             **
C               **  REFERENCE--POSTSCRIPT TUTORIAL AND COOKBOOK     **
C               **             FROM ADOBE SYSTEMS                   **
C               **  FIRST SET FONT IF REQUIRED                      **
C               **  CHECK FOR "(", ")", AND BACKSLASH AND PRECEDE   **
C               **  WITH A                                          **
C               **  BACKSLASH                                       **
C               ******************************************************
C  OCTOBER  1991.  MAKE POSTSCRIPT FONTS TABLE DRIVEN
C  FEBRUARY 2009.  ADD SUPPORT FOR SUBSCRIPTS/SUPERSCRIPTS, GREEK
C                  CHARACTERS, AND MANY MATH/SPECIAL CHARACTERS.
C
 8600 CONTINUE
C
      IFLAGG=0
      CALL POSTTR(ICTEXT,NCTEXT,ICASE,MAXSYM,
     1            ISTARV,ISTOPV,IFONTP,SIZEV,OFFSEV,NSTRIN,NSPEC,
     1            IFLAGG,
     1            ISUBRO,IBUGG4)
C
      IF(NSPEC.LT.1)THEN
C
        IPSTPS=INT(JHEIG2+0.5)
        IF(IPSTFN.EQ.IPSTFC.AND.IPSTPC.EQ.IPSTPS)GOTO8605
        IJUNK=7
        DO8695I=1,IPSTMF
          IF(IPSTFN.NE.IPSTT1(I))GOTO8695
          IJUNK=I
          GOTO8697
 8695   CONTINUE
 8697   CONTINUE
        ICSTR(1:1)='/'
        ICSTR(2:41)=IPSTT2(IJUNK)(1:40)
        ICSTR(42:51)=' findfont '
        NCHTOT=5
        NCSTR=51
        CALL GRTRIN(IPSTPS,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+17
        ICSTR(NCSTR:NCSTR2)=' scalefont setfont'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IPSTFC=IPSTFN
        IPSTPC=IPSTPS
C
 8605   CONTINUE
        ICSTR(1:4)='/IX '
        NCSTR=4
        CALL GRTRSD(PX1P,PY1P,IX,IY,ISUBN0)
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        ICSTR(10:18)=' def /IY '
        NCSTR=18
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        ICSTR(24:54)=' def newpath IX IY moveto gsave'
        NCSTR=54
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:1)='('
        NCSTR=1
        DO8612J=1,NCTEXT
          IF(ICTEXT(J).NE.'('.AND.ICTEXT(J).NE.')'.AND.
     1       ICTEXT(J).NE.IBASLC)GOTO8613
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=IBASLC
 8613     CONTINUE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8612   CONTINUE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=')'
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(IJUST(1:4).EQ.'BOTT')ICSTR(1:10)='vleftshow '
        IF(IJUST(1:4).EQ.'CENT')ICSTR(1:10)='vcentshow '
        IF(IJUST(1:4).EQ.'TOP ')ICSTR(1:10)='vrightshow'
        IF(IJUST(3:4).EQ.'BO')ICSTR(1:10)='vleftshow '
        IF(IJUST(3:4).EQ.'CE')ICSTR(1:10)='vcentshow '
        IF(IJUST(3:4).EQ.'TO')ICSTR(1:10)='vrightshow'
        IF(IJUST.EQ.'LEFT')ICSTR(1:10)='vleftshow '
        IF(IJUST.EQ.'LJUS')ICSTR(1:10)='vleftshow '
        IF(IJUST.EQ.'CENT')ICSTR(1:10)='vcentshow '
        IF(IJUST.EQ.'CJUS')ICSTR(1:10)='vcentshow '
        IF(IJUST.EQ.'RIGH')ICSTR(1:10)='vrightshow'
        IF(IJUST.EQ.'RJUS')ICSTR(1:10)='vrightshow'
        NCSTR=10
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:8)='grestore'
        NCSTR=8
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
C
C       DEFINE THE INITIAL POSITION.
C
        NCSTR=8
        ICSTR(1:NCSTR)='newpath '
        CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
        NCHTOT=5
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        NCSTR=14
        ICSTR(NCSTR:NCSTR)=' '
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        ICSTR(20:26)=' moveto'
        NCSTR=26
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C       CASE WHERE WE SPLIT THE STRING INTO A SERIES OF
C       SUBSTRINGS.
C
C       FOR BOTTOM JUSTIFIED STRING:
C           1) MOVE TO SPECIFIED START POSITION
C           2) LOOP THROUGH EACH SUBSTRING
C              A) SET FONT AND CHARACTER SIZE IF NEEDED
C              B) USE rmoveto TO DEFINE VERTICAL OFFSET
C                 (IF NEEDED)
C              C) USE vleftshow2 TO PRINT CURRENT SUBSTRING
C
C       FOR CENTER AND TOP JUSTIFIED STRINGS, WE NEED TO
C       MAKE AN INITIAL PASS THAT SUMS UP THE LENGTH OF THE
C       INDIVIDUAL STRINGS TO A SINGLE TOTAL LENGTH.  HOWEVER,
C       WE CAN THEN DEFINE THE INITIAL STARTING POINT AND THEN
C       JUST USE THE BOTTOM JUSTIFIED ALGORITHM.
C
        IJUSTV='BOTT'
        IF(IJUST(3:4).EQ.'BO')IJUSTV='BOTT'
        IF(IJUST(3:4).EQ.'CE')IJUSTV='CENT'
        IF(IJUST(3:4).EQ.'TO')IJUSTV='TOP '
        IF(IJUST.EQ.'LEFT')IJUSTV='BOTT'
        IF(IJUST.EQ.'LJUS')IJUSTV='BOTT'
        IF(IJUST.EQ.'CENT')IJUSTV='CENT'
        IF(IJUST.EQ.'CJUS')IJUSTV='CENT'
        IF(IJUST.EQ.'RIGH')IJUSTV='TOP '
        IF(IJUST.EQ.'RJUS')IJUSTV='TOP '
C
        IF(IJUSTV(1:1).EQ.'C' .OR. IJUSTV(1:1).EQ.'T')THEN
C         FOR CENTER AND TOP JUSTIFIED STRINGS, MAKE A PASS
C         TO DETERMINE THE LENGTH OF THE STRING.  FOR THIS CASE,
C         WE CAN IGNORE THE OFFSET.  HOWEVER, WE DO
C         NEED TO KEEP TRACK OF THE FONT AND SIZE OF EACH SUBSTRING.
C
          IPSTSV=INT(JHEIG2+0.5)
          IPSTCR=IPSTSV
          PY1PC=PY1P
          DO8820I=1,NSTRIN
            IF(ISTARV(I).GT.ISTOPV(I))GOTO8820
            ASIZE=SIZEV(I)
            IFONTT=IFONTP(I)
C
C           SET FONT AND FONT SIZE
C
            IF(ASIZE.LT.0.0)THEN
              IPSTCR=IPSTCR/2
            ELSEIF(ASIZE.GT.0.0)THEN
              IPSTCR=2*IPSTCR
            ELSE
              IPSTCR=IPSTSV
            ENDIF
            ICSTR(1:9)='/PSFONT /'
            IF(IFONTT.EQ.1)THEN
              ICSTR(10:15)='Symbol'
              ICSTR(16:49)=' '
            ELSE
              IJUNK=7
              DO8825II=1,IPSTMF
                IF(IPSTFN.NE.IPSTT1(II))GOTO8825
                IJUNK=II
                GOTO8827
 8825         CONTINUE
 8827         CONTINUE
              ICSTR(10:49)=IPSTT2(IJUNK)(1:40)
            ENDIF
            ICSTR(50:62)=' def /PSSIZE '
            NCHTOT=5
            NCSTR=62
            CALL GRTRIN(IPSTCR,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            NCSTR2=NCSTR+13
            ICSTR(NCSTR:NCSTR2)=' def setpsfont'
            NCSTR=NCSTR2
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C           DETERMINE LENGTH OF CURRENT STRING AND ADD IT TO
C           THE TOTAL.
C
            ICSTR(1:1)='('
            NCSTR=1
            DO8832J=ISTARV(I),ISTOPV(I)
              IF(ICTEXT(J).NE.'('.AND.ICTEXT(J).NE.')'.AND.
     1          ICTEXT(J).NE.IBASLC)GOTO8833
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=IBASLC
 8833         CONTINUE
              NCSTR=NCSTR+1
              ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8832       CONTINUE
C
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=')'
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            IF(IJUSTV(1:1).EQ.'C')THEN
              NCSTR=15
              ICSTR(1:NCSTR)='psstringwidthcv'
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ELSEIF(IJUSTV(1:1).EQ.'T')THEN
              NCSTR=15
              ICSTR(1:NCSTR)='psstringwidthtv'
              CALL GRWRST(ICSTR,NCSTR,ISUBN0)
            ENDIF
C
 8820     CONTINUE
C
        ENDIF
C
C       NOW DRAW EACH OF THE SUBSTRINGS
C
        IPSTSV=INT(JHEIG2+0.5)
        IPSTCR=IPSTSV
        PY1PC=PY1P
        DO8720I=1,NSTRIN
          IF(ISTARV(I).GT.ISTOPV(I))GOTO8720
          ASIZE=SIZEV(I)
          AOFFS=OFFSEV(I)
          IFONTT=IFONTP(I)
C
C         STEP 2A: SET FONT AND FONT SIZE
C
          IF(ASIZE.LT.0.0)THEN
            IPSTCR=IPSTCR/2
          ELSEIF(ASIZE.GT.0.0)THEN
            IPSTCR=2*IPSTCR
          ELSE
            IPSTCR=IPSTSV
          ENDIF
          ICSTR(1:9)='/PSFONT /'
          IF(IFONTT.EQ.1)THEN
            ICSTR(10:15)='Symbol'
            ICSTR(16:49)=' '
          ELSE
            IJUNK=7
            DO8725II=1,IPSTMF
              IF(IPSTFN.NE.IPSTT1(II))GOTO8725
              IJUNK=II
              GOTO8727
 8725       CONTINUE
 8727       CONTINUE
            ICSTR(10:49)=IPSTT2(IJUNK)(1:40)
          ENDIF
          ICSTR(50:62)=' def /PSSIZE '
          NCHTOT=5
          NCSTR=62
          CALL GRTRIN(IPSTCR,NCHTOT,ICSTR,NCSTR)
          NCSTR=NCSTR+1
          NCSTR2=NCSTR+13
          ICSTR(NCSTR:NCSTR2)=' def setpsfont'
          NCSTR=NCSTR2
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
C         STEP 2B: SET RELATIVE VERTICAL OFFSET IF NEEDED
C
          IF(AOFFS.GT.0.0)THEN
            PYTEMP=0.0
            POFFST=PYLEC/2.0
            CALL GRTRSD(POFFST,PYTEMP,IX,IY,ISUBN0)
            IX=-IX
            NCHTOT=5
            NCSTR=0
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=' '
            CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            NCSTR2=NCSTR+7
            ICSTR(NCSTR:NCSTR2)=' rmoveto'
            NCSTR=NCSTR2
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ELSEIF(AOFFS.LT.0.0)THEN
            PYTEMP=0.0
            POFFST=PYLEC/2.0
            CALL GRTRSD(POFFST,PYTEMP,IX,IY,ISUBN0)
            NCHTOT=5
            NCSTR=0
            CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=' '
            CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
            NCSTR=NCSTR+1
            NCSTR2=NCSTR+7
            ICSTR(NCSTR:NCSTR2)=' rmoveto'
            NCSTR=NCSTR2
            CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          ENDIF
C
C         STEP 2C: PRINT CURRENT SUBSTRING
C
          ICSTR(1:1)='('
          NCSTR=1
          DO8732J=ISTARV(I),ISTOPV(I)
            IF(ICTEXT(J).NE.'('.AND.ICTEXT(J).NE.')'.AND.
     1        ICTEXT(J).NE.IBASLC)GOTO8733
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=IBASLC
 8733       CONTINUE
            NCSTR=NCSTR+1
            ICSTR(NCSTR:NCSTR)=ICTEXT(J)
 8732     CONTINUE
C
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=')'
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=11
          ICSTR(1:NCSTR)='vleftshow2 '
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 8720   CONTINUE
C
C       RESET DEFAULT FONT AND POINT SIZE
C
        ICSTR(1:9)='/PSFONT /'
        IJUNK=7
        DO8925II=1,IPSTMF
          IF(IPSTFN.NE.IPSTT1(II))GOTO8925
          IJUNK=II
          GOTO8927
 8925   CONTINUE
 8927   CONTINUE
        ICSTR(10:49)=IPSTT2(IJUNK)(1:40)
        ICSTR(50:62)=' def /PSSIZE '
        NCHTOT=5
        NCSTR=62
        CALL GRTRIN(IPSTCR,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        NCSTR2=NCSTR+13
        ICSTR(NCSTR:NCSTR2)=' def setpsfont'
        NCSTR=NCSTR2
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ENDIF
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 91--                                       **
C               **  TREAT THE QUIC                  CASE            **
C               **  TO WRITE A HORIZONTAL TEXT STRING--             **
C               **  MOVE: ^IHXXXXX^IVXXXXX                          **
C               **  SET DEFAULT FONT:^ISXXXXX                       **
C               **  SET FONT FOR CURRENT LINE: ^SMXXXXX             **
C               **  ENTER TEXT                                      **
C               **  REFERENCE--QUIC PROGRAMMING MANUAL FOR QMS      **
C               **             CHAPTER 7 DISCUSSES FONTS            **
C               ******************************************************
C
 9100 CONTINUE
C
      IF(NCTEXT.LE.0)GOTO9000
      IFONTT=IQUIFN
      IF(IORNSW.EQ.'PORT'.AND.(
     1   IFONTT.EQ.521 .OR. IFONTT.EQ.522 .OR.
     1   IFONTT.EQ.523 .OR. IFONTT.EQ.524))IFONTT=10
      IF(IORNSW.NE.'PORT'.AND.(
     1   IFONTT.EQ.124 .OR. IFONTT.EQ.144 .OR.
     1   IFONTT.EQ.16  .OR. IFONTT.EQ.328 .OR.
     1   IFONTT.EQ.998 .OR. IFONTT.EQ.404 .OR.
     1   IFONTT.EQ.444 .OR. IFONTT.EQ.532))IFONTT=10
      CALL DPCONA(94,ICARAT)
      IF(IFONTT.EQ.IQUIFC)GOTO9105
      ICSTR(1:1)=ICARAT
      ICSTR(2:3)='IS'
      IQUIFC=IFONTT
      KFONT=IFONTT
      NCHTOT=-5
      NCSTR=3
      CALL GRTRIN(KFONT,NCHTOT,ICSTR,NCSTR)
      NCSTR=9
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
 9105 CONTINUE
      NCHTOT=-5
      DO9110I=1,NCTEXT
        IF(I.GE.2)PY1P=PY1P-AFACT*(PHEIG2+PVEGA2)
        PYTEMP=100.-PY1P
        CALL QUICPT(PX1P,PYTEMP,IX,IY,ISUBN0)
        ICSTR(1:1)=ICARAT
        ICSTR(2:3)='IH'
        NCSTR=3
        CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
        ICSTR(9:9)=ICARAT
        ICSTR(10:11)='IV'
        NCSTR=11
        CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
        NCSTR=17
        ICTEMP=ICTEXT(I)
        ICSTR(NCSTR:NCSTR)=ICTEMP(1:1)
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
 9110 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 96--                                       **
C               **  TREAT THE X11        CASE                       **
C               **  NOTE THAT JUSTIFICATION, POSITIONING, ETC. IS   **
C               **  HANDLED BY THE C ROUTINE.  ALSO, THE CHARACTER  **
C               **  STRING IS PASSED TO C AS AN INTEGER ARRAY       **
C               **  CONTAINING THE ASCII DECIMAL EQUIVALENTS        **
C               ******************************************************
C
C     2023/10: SUPPORT FOR SCALABLE FONTS
C
 9600 CONTINUE
#ifdef HAVE_X11
      IF(IX11OF.EQ.'OFF')GOTO9000
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      DO9605I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
 9605 CONTINUE
      STRING(NCTEXT+1)=0
C
C     CHECK IF SCALABLE FONTS REQUESTED
C
      IF(IX11FT.EQ.'FIXE')THEN
        IFTYPE=0
      ELSE
        IFTYPE=1
        IF(IX11SF(1:4).EQ.'NULL')IFTYPE=0
      ENDIF
C
      IF(IFTYPE.EQ.0)THEN
        ILAST=80
        DO9610I=80,1,-1
          ILAST=I
          IF(IX11FN(I:I).NE.' ')GOTO9619
 9610   CONTINUE
 9619   CONTINUE
        DO9620I=1,ILAST
          CALL DPCOAN(IX11FN(I:I),IJUNK)
          IADE(I)=IJUNK
 9620   CONTINUE
        IADE(ILAST+1)=0
        CALL XTATTR(IADE,IXERR)
        IF(IXERR.EQ.1) THEN
          WRITE(ICOUT,9621)
 9621     FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE CURRENT ',
     1           'FONT')
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IXERR.EQ.2)THEN
          WRITE(ICOUT,9622)
 9622     FORMAT(1X,'WARNING: X11 FONT NAME NOT FOUND--USE DEFAULT ',
     1           'FONT')
          CALL DPWRST('XXX','BUG ')
        END IF
      ELSE
        ILAST=80
        DO9630I=80,1,-1
          ILAST=I
          IF(IX11SF(I:I).NE.' ')GOTO9639
 9630   CONTINUE
 9639   CONTINUE
C
C       ADD SIZE TO FONT STRING
C
        ICSTR=' '
        JSIZET=JSIZE
        IF(JSIZET.LE.6)JSIZET=6
        IF(JSIZET.GE.24)JSIZET=24
        ICSTR(1:ILAST)=IX11SF(1:ILAST)
        ICSTR(ILAST+1:ILAST+6)=':size='
        ILAST=ILAST+6
        IF(JSIZET.LE.9)THEN
          NCHTOT=1
        ELSEIF(JSIZET.LE.99)THEN
          NCHTOT=2
        ELSE
          NCHTOT=3
        ENDIF
        CALL GRTRIN(JSIZET,NCHTOT,ICSTR,ILAST)
C
        DO9640I=1,ILAST
          CALL DPCOAN(IX11SF(I:I),IJUNK)
          IADE(I)=IJUNK
 9640   CONTINUE
        IADE(ILAST+1)=0
      ENDIF
C
      IFONTH=0
      IFONTV=0
C
      IF(IJUST.EQ.'LEFT'.OR.IJUST.EQ.'LJUS')THEN
        IFONTH=1
        IFONTV=1
      ELSEIF(IJUST.EQ.'CENT'.OR.IJUST.EQ.'CJUS')THEN
        IFONTH=1
        IFONTV=0
      ELSEIF(IJUST.EQ.'RIGH'.OR.IJUST.EQ.'RJUS')THEN
        IFONTH=1
        IFONTV=2
      ELSEIF(IJUST.EQ.'LEBO')THEN
        IFONTH=0
        IFONTV=1
      ELSEIF(IJUST.EQ.'CEBO')THEN
        IFONTH=1
        IFONTV=1
      ELSEIF(IJUST.EQ.'RIBO')THEN
        IFONTH=2
        IFONTV=1
      ELSEIF(IJUST.EQ.'LECE')THEN
        IFONTH=0
        IFONTV=0
      ELSEIF(IJUST.EQ.'CECE')THEN
        IFONTH=1
        IFONTV=0
      ELSEIF(IJUST.EQ.'RICE')THEN
        IFONTH=2
        IFONTV=0
      ELSEIF(IJUST.EQ.'LETO')THEN
        IFONTH=0
        IFONTV=2
      ELSEIF(IJUST.EQ.'CETO')THEN
        IFONTH=1
        IFONTV=2
      ELSEIF(IJUST.EQ.'RITO')THEN
        IFONTH=2
        IFONTV=2
      ENDIF
C
      IXERR=0
      IF(IFTYPE.EQ.0)THEN
        CALL XTEXTV(STRING,IX,IY,IFONTH,IFONTV,IXERR)
      ELSE
        CALL XTEXTV2(IADE,STRING,IX,IY,IFONTH,IFONTV,IXERR)
        IF(IXERR.EQ.1)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9661)
 9661     FORMAT('IN GRWRTV: UNABLE TO LOAD SCALABLE X11 FONT')
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9663)ICSTR(1:ILAST)
 9663     FORMAT('FONT NAME: ',A130)
          CALL DPWRST('XXX','BUG ')
        ELSEIF(IXERR.EQ.2)THEN
          WRITE(ICOUT,999)
          CALL DPWRST('XXX','BUG ')
          WRITE(ICOUT,9671)
 9671     FORMAT('IN GRWRTV: UNABLE TO ALLOCTE Xft COLOR')
          CALL DPWRST('XXX','BUG ')
        ENDIF
      ENDIF
C
#endif
      GOTO9000
C
CCCCC THE FOLLOWING SECTION WAS ADDED   MAY 1991  (JJF)
CCCCC AND REFIXED                       SEPTEMBER 1995
C               *************************************************
C               **  STEP 100--                                 **
C               **  TREAT THE VGA VIA TURBO-C       CASE       **
C               **  REFERENCE--TURBO C 1.5 ADDITIONS &         **
C               **             ENHANCEMENTS, PAGE 124, 113.    **
C               **  REFERENCE--TURBO C 2.0 REFERENCE GUIDE,    **
C               **             PAGE 324-325, 256.              **
C               **  REFERENCE--WEISKAMP, POWER GRAPHICS        **
C               **             USING TURBO C, PAGE 59-60, 54-55**
C               *************************************************
C
10000 CONTINUE
      IF(ITCST.EQ.'CLOS')GOTO9000
      IF(NCTEXT.LE.0)GOTO9000
C
CCCCC THE FOLLOWING 2 LINES OF CODE WERE REPLACED  SEPTEMBER 1994
CCCCC BY THE REST OF THIS SECTION                  SEPTEMBER 1994
CCCCC TO FIX C-SIDE MULTIPLOTTING NOT WORKING      SEPTEMBER 1994
C
CCCCC CALL TCMOTO(PX1,PY1)
CCCCC CALL TCWRTE(ICTEXT,NCTEXT)
C
CCCCC THE FOLLOWING LINE WAS COMMENTED OUT AND    JANUARY 1995
CCCCC THE FOLLOWING SECTION WAS COMMENTED OUT     JANUARY 1995
CCCCC TO FIX THE Y1LABEL PROBLEM                  JANUARY 1995
CCCCC IF(IJUSSW.NE.'ON')THEN
CCCCC IF(1.EQ.1)THEN
CCCCC    DO10010I=1,NCTEXT
CCCCC       IF(I.GE.2)PY1P=PY1P-(PHEIG2+PVEGA2)
CCCCC       CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
CCCCC       PX1P=AX
CCCCC       PY1P=AY
CCCCC       CALL TCMOTO(PX1P,PY1P)
CCCCC       CALL TCWRTE(ICTEXT(I),6)
C10010    CONTINUE
CCCCC ENDIF
C
CCCCC THE FOLLOWING SECTION WAS CHANGED     JANUARY 1995
CCCCC TO FIX THE Y1LABEL PROBLEM            JANUARY 1995
      PX1P=PX1
      PY1P=PY1
      CALL GRTRSA(PX1P,PY1P,AX,AY,ISUBN0)
      PX1P=AX
      PY1P=AY
CTURB CALL TCMOTO(PX1P,PY1P)
CTURB CALL TCWRTE(ICTEXT,NCTEXT)
C
CCCCC NCSTR=0
CCCCC DO10020I=1,NCTEXT
CCCCC    NCSTR=NCSTR+1
CCCCC    ICTEMP=ICTEXT(I)
CCCCC    ICSTR(I:I)=ICTEMP(1:1)
C10020 CONTINUE
CCCCC CALL TCWRTE(ICSTR,NCSTR)
      GOTO9000
C
C               ******************************************************
C               **  STEP 110--                                      **
C               **  TREAT THE GKS                DRIVER             **
C               ******************************************************
C
11000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 120--                                      **
C               **  TREAT THE GD                     DRIVER         **
C               **  THIS LIBRARY PROVIDES SUPPORT FOR:              **
C               **  1) JPEG                                         **
C               **  2) PNG                                          **
C               **  3) WINDOWS BMP (BLACK/WHITE ONLY)               **
C               **  TREAT THE PBM (PORTABLE BIT MAP) DRIVER         **
C               ******************************************************
C
12000 CONTINUE
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      IFONTZ=0
      IF(IGDFN(1:5).EQ.'SMALL')IFONTZ=1
      IF(IGDFN(1:5).EQ.'LARGE')IFONTZ=2
      IF(IGDFN(1:10).EQ.'MEDIUMBOLD')IFONTZ=3
      IF(IGDFN(1:5).EQ.'GIANT')IFONTZ=4
      IF(IGDFN(1:4).EQ.'TINY')IFONTZ=5
C
      DO12605I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
12605 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=80
      DO12610I=80,1,-1
        ILAST=I
        IF(IGDFN(I:I).NE.' ')GOTO12619
12610 CONTINUE
12619 CONTINUE
      DO12620I=1,ILAST
        CALL DPCOAN(IGDFN(I:I),IJUNK)
        IADE(I)=IJUNK
12620 CONTINUE
      IADE(ILAST+1)=0
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IERR=0
C
#ifdef HAVE_GD
      CALL GDTXTV(IADE,STRING,IFONTZ,IX,IY,IFONTH,IFONTV,
     1            JCOL,JHEIG2,IERR)
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 130--                                      **
C               **  TREAT THE MACINTOSH              DRIVER         **
C               **  LIBRARY FROM ABSOFT COMPILER                    **
C               ******************************************************
C
13000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 135--                                      **
C               **  TREAT THE MAC OSX AQUATERM       DRIVER         **
C               ******************************************************
C
13500 CONTINUE
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      DO13505I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
13505 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=80
      DO13510I=80,1,-1
        ILAST=I
        IF(IAQUFN(I:I).NE.' ')GOTO13519
13510 CONTINUE
13519 CONTINUE
      DO13520I=1,ILAST
        CALL DPCOAN(IAQUFN(I:I),IJUNK)
        IADE(I)=IJUNK
13520 CONTINUE
      IADE(ILAST+1)=0
C
COLD  aqtAddLabel(ICTEXT(1:NCTEXT),PX1,PY1,AROT,IAQJUS)
      IF(IJUSTH.EQ.'LEFT')IFONTH=0
      IF(IJUSTH.EQ.'CENT')IFONTH=1
      IF(IJUSTH.EQ.'RIGH')IFONTH=2
      IF(IJUSTV.EQ.'BOTT')IFONTV=0
      IF(IJUSTV.EQ.'MIDD')IFONTV=1
      IF(IJUSTV.EQ.'TOP ')IFONTV=2
#ifdef HAVE_AQUA
      CALL aqtxtv(STRING,IX,IY,IFONTH,IFONTV,IADE,IERR)
#endif
      GOTO9000
C
C
C               ******************************************************
C               **  STEP 150--                                      **
C               **  TREAT THE LATEX (USING EEPIC)    DRIVER         **
C               ******************************************************
C
15000 CONTINUE
C
CCCCC NOTE: ALTHOUGH THE ROTATEBOX APPROACH IS DESIRED (SO
CCCCC       VERTICAL TEXT WILL BE ROTATED), THIS DOES NOT
CCCCC       SEEM TO WORK WITH MBOX (I NEED MBOX IN ORDER TO
CCCCC       GENERATE THE APPROPRIATE JUSTIFICATION).  SO
CCCCC       FOR NOW, USE THE SHORTSTACK APPROACH INSTEAD
CCCCC       (THIS PLOTS THE VERTICAL STRING AS A COLUMN OF
CCCCC       HORIZONTAL CHARACTERS).
C
      NCSTR=0
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IBASLC
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+3)='put('
      NCSTR=NCSTR+3
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+15)='){ makebox(0,0)['
      ICSTR(NCSTR+2:NCSTR+2)=IBASLC
      NCSTR=NCSTR+15
C
      IF(IJUSTV.EQ.'CENT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='c'
      ELSEIF(IJUSTV.EQ.'BOTT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='b'
      ELSEIF(IJUSTV.EQ.'TOP ')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='t'
      ENDIF
C
      IF(IJUSTH.EQ.'CENT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='c'
      ELSEIF(IJUSTH.EQ.'LEFT')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='l'
      ELSEIF(IJUSTH.EQ.'RIGH')THEN
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='r'
      ENDIF
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=']'
C
      DO15110J=1,NCTEXT
        ICSTR2(J:J)=ICTEXT(J)(1:1)
15110 CONTINUE
      MAXWID=130
      CALL LATCON(ICSTR2,NCTEXT,ICSTR3,NCTEX2,MAXWID,ISUBRO,IERROR)
C
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='{'
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IBASLC
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+13)='rotatebox{90}{'
      NCSTR=NCSTR+13
      ICNT=NCSTR
      DO15102J=1,NCTEX2
        ICNT=ICNT+1
        ICSTR(ICNT:ICNT)=ICSTR3(J:J)
15102 CONTINUE
      NCSTR=ICNT
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+2)='}}}'
      NCSTR=NCSTR+2
C
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 160--                                      **
C               **  TREAT THE SVG (SCALABLE VECTOR GRAPHICS) DRIVER **
C               ******************************************************
C
16000 CONTINUE
C
C     JULY 2015.  FOR THE CHROME BROWSER, NEED TO HAVE
C
C                   X="95" Y="233"
C
C                 RATHER THAN
C
C                   X="   95" Y="   233"
C
      CALL GRTRSD(PX1,PY1,IX,IY,ISUBN0)
C
      IF(IJUSTV.EQ.'TOP')THEN
        IX=IX+JHEIG2
      ELSEIF(IJUSTV.EQ.'CENT')THEN
        IY=IY+(JHEIG2/2)
      ELSE
        CONTINUE
      ENDIF
C
      CALL DPCONA(34,IQUOTE)
C
      ISVGLN=ISVGLN+1
      ICSTR(1:9)='   <g id='
      ICSTR(10:10)=IQUOTE
      NCSTR=10
      IF(ISVGLN.LE.9)THEN
        NCHTOT=1
      ELSEIF(ISVGLN.LE.99)THEN
        NCHTOT=2
      ELSEIF(ISVGLN.LE.999)THEN
        NCHTOT=3
      ELSEIF(ISVGLN.LE.9999)THEN
        NCHTOT=4
      ELSEIF(ISVGLN.LE.99999)THEN
        NCHTOT=5
      ELSE
        NCHTOT=6
      ENDIF
      CALL GRTRIN(ISVGLN,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      NCSTR=19
      NCSTR=NCSTR+1
      ICSTR(1:19)='         transform='
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+10)='rotate(-90,'
      NCSTR=NCSTR+10
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=','
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=')'
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      IF(ISVGSS(1:3).EQ.'EXT')THEN
        NCSTR=22
        ICSTR(1:NCSTR)='      class="vertical"'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        CALL GRTRCO('FORE',ISVGFC,JCOL2)
        ICSTR(1:12)='      style='
        ICSTR(13:13)=IQUOTE
        NCSTR=-13
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=19
        ICSTR(1:NCSTR)='             fill:#'
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          IF(IRGBFL.EQ.0)THEN
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          IF(IRGBFL.EQ.0)THEN
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=22
        ICSTR(1:NCSTR)='            font-size:'
        NCHTOT=3
        CALL GRTRIN(JHEIG2,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+2)='pt;'
        NCSTR=NCSTR+2
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        NCSTR=13
        ICSTR(1:NCSTR)='             '
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='>'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ELSE
C
        NCSTR=14
        ICSTR(1:NCSTR)='        style='
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        NCSTR=21
        ICSTR(1:NCSTR)='         font-family:'
        DO16010I=32,1,-1
          NCTEMP=I
          IF(ISVGFN(I:I).NE.' ')GOTO16011
16010   CONTINUE
16011   CONTINUE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+NCTEMP-1)=ISVGFN(1:NCTEMP)
        NCSTR=NCSTR+NCTEMP
        ICSTR(NCSTR:NCSTR)=';'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(ISVGFW.EQ.'NORM')THEN
          NCSTR=28
          ICSTR(1:NCSTR)='         font-weight:normal;'
          NCSTR=-NCSTR
        ELSE
          NCSTR=26
          ICSTR(1:NCSTR)='         font-weight:bold;'
          NCSTR=-NCSTR
        ENDIF
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
        IF(ISVGST.EQ.'ITAL')THEN
          NCSTR=27
          ICSTR(1:NCSTR)='         font-style:italic;'
          NCSTR=-NCSTR
        ELSE
          NCSTR=27
          ICSTR(1:NCSTR)='         font-style:normal;'
          NCSTR=-NCSTR
        ENDIF
        NCSTR=19
        ICSTR(1:NCSTR)='         font-size:'
        NCHTOT=3
        CALL GRTRIN(JHEIG2,NCHTOT,ICSTR,NCSTR)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+2)='pt;'
        NCSTR=NCSTR+2
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
        ICSTR(1:27)='         stroke:none;fill:#'
        NCSTR=27
        NCHTOT=2
        JTEMP=JCOL
        IF(JTEMP.LE.0)THEN
C
C         DATAPLOT CURRENTLY ALLOWS GREYSCALE VALUES IN
C         THE RANGE 0 TO 100.  FOR SPECIFYING COLOR TO SVG,
C         SCALE THAT 0 TO 100 VALUE TO A 0 TO 255 VALUE.
C
          AVAL=(255./100.)*REAL(ABS(JTEMP))
          IF(AVAL.LE.0.0)AVAL=0.0
          IF(AVAL.GE.255.0)AVAL=255.0
          IF(IRGBFL.EQ.0)THEN
            JRED=INT(AVAL+0.5)
            JBLUE=JRED
            JGREEN=JRED
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ELSE
          IF(JTEMP.LT.1 .OR. JTEMP.GT.MAXCLR)JTEMP=1
          IF(IRGBFL.EQ.0)THEN
            JRED=IRED(JTEMP)
            JGREEN=IGREEN(JTEMP)
            JBLUE=IBLUE(JTEMP)
          ELSE
            JRED=ICOLR
            JGREEN=ICOLG
            JBLUE=ICOLB
          ENDIF
        ENDIF
        CALL DPCONX(JRED,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JGREEN,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+1
        CALL DPCONX(JBLUE,ICJUNK)
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR+1)=ICJUNK(1:2)
        NCSTR=NCSTR+2
        ICSTR(NCSTR:NCSTR)=';'
C
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)=IQUOTE
        NCSTR=NCSTR+1
        ICSTR(NCSTR:NCSTR)='>'
        NCSTR=-NCSTR
        CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ENDIF
C
      IF(IX.LE.9)THEN
        NCHTOT=1
      ELSEIF(IX.LE.99)THEN
        NCHTOT=2
      ELSEIF(IX.LE.999)THEN
        NCHTOT=3
      ELSEIF(IX.LE.9999)THEN
        NCHTOT=4
      ELSE
        NCHTOT=5
      ENDIF
C
      ICSTR(1:11)='   <text x='
      NCSTR=12
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCHTOT=5
      CALL GRTRIN(IX,NCHTOT,ICSTR,NCSTR)
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR+2)=' y='
      NCSTR=NCSTR+3
      ICSTR(NCSTR:NCSTR)=IQUOTE
C
      IF(IY.LE.9)THEN
        NCHTOT=1
      ELSEIF(IY.LE.99)THEN
        NCHTOT=2
      ELSEIF(IY.LE.999)THEN
        NCHTOT=3
      ELSEIF(IY.LE.9999)THEN
        NCHTOT=4
      ELSE
        NCHTOT=5
      ENDIF
C
      CALL GRTRIN(IY,NCHTOT,ICSTR,NCSTR)
      NCHTOT=5
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      ICSTR(NCSTR+1:NCSTR+7)=' style='
      NCSTR=NCSTR+8
      ICSTR(NCSTR:NCSTR)=IQUOTE
C
      IF(IJUST(1:2).EQ.'CE')THEN
        ICSTR(NCSTR+1:NCSTR+19)='text-anchor:middle;'
        NCSTR=NCSTR+19
      ELSEIF(IJUST(1:2).EQ.'RI')THEN
        ICSTR(NCSTR+1:NCSTR+16)='text-anchor:end;'
        NCSTR=NCSTR+16
      ELSE
        ICSTR(NCSTR+1:NCSTR+18)='text-anchor:start;'
        NCSTR=NCSTR+18
      ENDIF
C
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)=IQUOTE
      NCSTR=NCSTR+1
      ICSTR(NCSTR:NCSTR)='>'
C
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
      NCSTR=0
C
C     2012/3: CHECK FOR "<" OR ">".  NEED TO CONVERT THESE TO &lt; AND
C             &gt; TO DISTINGUISH THEM FROM TAG IDENTIFIERS.
C     2015/11: CHECK FOR "&".  NEED TO CONVERT THESE TO &amp; .
C
      DO16112J=1,NCTEXT
        IF(ICTEXT(J).EQ.'<')THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+3)='&lt;'
          NCSTR=NCSTR+3
        ELSEIF(ICTEXT(J).EQ.'>')THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+3)='&gt;'
          NCSTR=NCSTR+3
        ELSEIF(ICTEXT(J).EQ.'&')THEN
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR+4)='&amp;'
          NCSTR=NCSTR+4
        ELSE
          NCSTR=NCSTR+1
          ICSTR(NCSTR:NCSTR)=ICTEXT(J)
        ENDIF
        IF(NCSTR.GE.120)THEN
          CALL GRWRST(ICSTR,NCSTR,ISUBN0)
          NCSTR=0
        ENDIF
16112 CONTINUE
C
      ICSTR(NCSTR+1:NCSTR+7)='</text>'
      NCSTR=NCSTR+7
      NCSTR=-NCSTR
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      ICSTR(1:7)='   </g>'
      NCSTR=-7
      CALL GRWRST(ICSTR,NCSTR,ISUBN0)
C
      GOTO9000
C
C               ******************************************************
C               **  STEP 170--                                      **
C               **  TREAT THE CAIRO                          DRIVER **
C               ******************************************************
C
17000 CONTINUE
#ifdef HAVE_CAIRO
C
C     CHECK FOR X11 DEVICE, HARDWARE TEXT NOT SUPPORTED
C
      IVAL1=0
      IF(IMODEL.EQ.'X11')IVAL1=1
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
CCCCC IF(IVAL2.EQ.1 .AND. IVAL1.EQ.1)THEN
CCCCC   WRITE(ICOUT,999)
CCCCC   CALL DPWRST('XXX','BUG ')
CCCCC   WRITE(ICOUT,17006)
C17006   FORMAT('***** WARNING: HARDWARE TEXT NOT SUPPORTED ON ',
CCCCC1         'CAIRO X11 DEVICE.')
CCCCC   CALL DPWRST('XXX','BUG ')
CCCCC   GOTO9000
CCCCC ENDIF
C
      AX=PX1
      AY=PY1
      CALL GRTRSD(AX,AY,IX,IY,ISUBN0)
C
      DO17605I=1,NCTEXT
        IC1=ICTEXT(I)(1:1)
        CALL DPCOAN(IC1,IJUNK)
        STRING(I)=IJUNK
17605 CONTINUE
      STRING(NCTEXT+1)=0
C
      ILAST=32
      DO17610I=32,1,-1
        ILAST=I
        IF(ICAIFN(I:I).NE.' ')GOTO17619
17610 CONTINUE
17619 CONTINUE
      DO17620I=1,ILAST
        CALL DPCOAN(ICAIFN(I:I),IJUNK)
        IADE(I)=IJUNK
17620 CONTINUE
      IADE(ILAST+1)=0
C
      IFONTH=0
      IFONTV=0
      IF(IJUST.EQ.'LEFT')IFONTH=0
      IF(IJUST.EQ.'CENT')IFONTH=1
      IF(IJUST.EQ.'RIGH')IFONTH=2
      IF(IJUST.EQ.'LJUS')IFONTH=0
      IF(IJUST.EQ.'CJUS')IFONTH=1
      IF(IJUST.EQ.'RJUS')IFONTH=2
      IF(IJUST.EQ.'LEBO')IFONTH=0
      IF(IJUST.EQ.'CEBO')IFONTH=1
      IF(IJUST.EQ.'RIBO')IFONTH=2
      IF(IJUST.EQ.'LECE')IFONTH=0
      IF(IJUST.EQ.'CECE')IFONTH=1
      IF(IJUST.EQ.'RICE')IFONTH=2
      IF(IJUST.EQ.'LETO')IFONTH=0
      IF(IJUST.EQ.'CETO')IFONTH=1
      IF(IJUST.EQ.'RITO')IFONTH=2
      IF(IJUST.EQ.'LEFT')IFONTV=1
      IF(IJUST.EQ.'CENT')IFONTV=1
      IF(IJUST.EQ.'RIGH')IFONTV=1
      IF(IJUST.EQ.'LJUS')IFONTV=1
      IF(IJUST.EQ.'CJUS')IFONTV=1
      IF(IJUST.EQ.'RJUS')IFONTV=1
      IF(IJUST.EQ.'LEBO')IFONTV=1
      IF(IJUST.EQ.'CEBO')IFONTV=1
      IF(IJUST.EQ.'RIBO')IFONTV=1
      IF(IJUST.EQ.'LECE')IFONTV=0
      IF(IJUST.EQ.'CECE')IFONTV=0
      IF(IJUST.EQ.'RICE')IFONTV=0
      IF(IJUST.EQ.'LETO')IFONTV=2
      IF(IJUST.EQ.'CETO')IFONTV=2
      IF(IJUST.EQ.'RITO')IFONTV=2
      IERR=0
C
      IVAL2=1
      IF(IGUNIT.EQ.IPL1NU)IVAL2=2
      IF(IGUNIT.EQ.IPL2NU)IVAL2=3
C
      AHEIG2=REAL(JHEIG2)
      IVAL3=1
      IF(ICAISL.EQ.'ITAL')IVAL3=2
      IVAL4=2
      IF(ICAIFW.EQ.'BOLD')IVAL4=2
      CALL CATXTV(IVAL2,STRING,AX,AY,IFONTH,IFONTV,AHEIG2,
     1            IADE,IVAL3,IVAL4,IERR)
C
#endif
      GOTO9000
C
C               ******************************************************
C               **  STEP 180--                                      **
C               **  TREAT THE WMF                            DRIVER **
C               ******************************************************
C
18000 CONTINUE
      GOTO9000
C
C               ******************************************************
C               **  STEP 190--                                      **
C               **  TREAT THE D3                             DRIVER **
C               ******************************************************
C
19000 CONTINUE
      GOTO9000
C               *****************
C               **  STEP 90--  **
C               **  EXIT       **
C               *****************
C
 9000 CONTINUE
      IF(IBUGG4.EQ.'ON'.OR.ISUBG4.EQ.'WRTV')THEN
        WRITE(ICOUT,999)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9011)
 9011   FORMAT('***** AT THE END       OF GRWRTV--')
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9035)PXDEL,PYDEL,NCSTR
 9035   FORMAT('PXDEL,PYDEL,NCSTR = ',2G15.7,I8)
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9036)IC4,IC,IC1,IC2
 9036   FORMAT('IC4,IC,IC1,IC2 = ',A4,3(2X,A1))
        CALL DPWRST('XXX','BUG ')
        WRITE(ICOUT,9037)PXINC,PYINC,PXINC2,PYINC2
 9037   FORMAT('PXINC,PYINC,PXINC2,PYINC2 = ',4G15.7)
        CALL DPWRST('XXX','BUG ')
        IF(NCSTR.GE.1)THEN
          DO9045I=1,NCSTR
CCCCC       IASCNE=ICHAR(ICSTR(I:I))
            CALL DPCOAN(ICSTR(I:I),IASCNE)
            WRITE(ICOUT,9046)I,ICSTR(I:I),IASCNE
 9046       FORMAT('I,ICSTR(I:I),IASCNE = ',I8,2X,A1,I8)
            CALL DPWRST('XXX','BUG ')
 9045     CONTINUE
        ENDIF
        WRITE(ICOUT,9049)IBUGG4,ISUBG4,IERRG4
 9049   FORMAT('IBUGG4,ISUBG4,IERRG4 = ',A4,2X,A4,2X,A4)
        CALL DPWRST('XXX','BUG ')
      ENDIF
C
      RETURN
      END
