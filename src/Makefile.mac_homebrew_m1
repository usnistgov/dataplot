#  This version of the Makefile assumes you are using Homebrew on MacOS
#  with the M1 chips.
#
#  Note the following:
#
#  1. Homebrew changed the path for Homebrew installations for the
#     M1 chip (/opt/homebrew rather than /usr/local).
#
#  2. Homebrew uses the version of the READLINE library that comes
#     with MacOS.  Dataplot is currently not compatible with this
#     version, so the READLINE and NCURSES features should not be
#     activated.
#
#  3. Homebrew uses the version of Aquaterm from github.  As of 2024/01
#     this version assumes you have the Intel chip.  So for now the
#     AQUA feature should not be activated.
#
#  4. It is assumed that the gfortran/gcc compilers and the X11 library
#     have been installed using Homebrew.
#
#  5. For the M1 chips, it seems that the gfortran compiler needs to
#     use the "-mcmodel=small" option.
#
# See the following web page for more details on installing for MacOS.
#
#     https://www.itl.nist.gov/software/dataplot/ftp/mac/homepage.htm
#
FC = /opt/homebrew/bin/gfortran
CC = /opt/homebrew/bin/gcc
#
# FEATURES to enable during compilation
# all: READLINE NCURSES GD TIFF VPX CAIRO X11 PLOT AQUA DEBUG HOMEBREW
FEATURES = GD TIFF CAIRO X11 PLOT HOMEBREW

# PREFIX is the parent of where are installed (recommend /usr/local or /usr)
# For non-root install, consider PREFIX=$(HOME)
# DESTDIR is used by packaging programs (e.g., rpmbuild).
PREFIX = $(DESTDIR)/opt/homebrew
BINDIR = $(PREFIX)/bin

# where to find additional dataplot files (help, menus, etc).
DPLIBDIR=$(PREFIX)/lib/dataplot

FFLAGS += -O2 -DLINUX -DMACOSX -fdefault-real-8 -fdefault-double-8 -mcmodel=small
CFLAGS += -O2 -DMACOSX

# special flags for dp1
DP1FLAGS = -DDDOUBLE -DINTEGER32 -DHAVE_ISNAN -DHAVE_EXECUTE_COMMAND_LINE -DMACOS -DDPLIBDIR=\'$(DPLIBDIR)\'


# object files sorted by size for fastest parallel compilation; dp2.o first as it takes the longest
# ls -S *.F | egrep -v 'msfort_intel' | sed 's/\.F/.o/g' | xargs
OBJS = dp40.o dp36.o dp42.o dp19.o dp11.o dp38.o dp20.o dp21.o dp2.o dp3.o dp43.o dp18.o dp29.o dp4.o dp37.o dp16.o dp22.o dp9.o dp32.o dp8.o dp41.o dp17.o dp31.o dp15.o dp6.o dp45.o dp12.o dp5.o dp13.o dp30.o dp44.o dp10.o dp25.o starpac.o edsub.o dp27.o dp14.o dp33.o optimi.o dp28.o fit3b.o odrpck.o dp23.o dp26.o dp1.o dp35.o dp7.o dp34.o cluster.o dp24.o dp39.o main.o dpdds3.o edsear.o compgeom.o edmai2.o dpdds.o dpdds2.o edinit.o edwrst.o

# Turn on following to activate the "-g" compile option for more detailed
# debug output (not on by default as it greatly increases the size of the exextable)
ifneq (,$(findstring DEBUG,$(FEATURES)))
FFLAGS += -g
endif


# HOMEBREW: Specify location for libraries and include files
ifneq (,$(findstring HOMEBREW,$(FEATURES)))
LDFLAGS += -L/opt/homebrew/lib
CPPFLAGS += -I/opt/homebrew/include -I/opt/local/include/freetype2 -I/Applications/xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
CFLAGS   += -I/opt/homebrew/include -I/opt/local/include/freetype2 -I/Applications/xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
endif

#  Homebrew: sudo brew install readline
# ifneq (,$(findstring READLINE,$(FEATURES)))
# OBJS += rldp.o
# FFLAGS4 = -DHAVE_READLINE
# LDFLAGS += -lreadline
# endif

#  Homebrew: sudo brew install ncurses
ifneq (,$(findstring NCURSES,$(FEATURES)))
LDFLAGS += -lncurses
endif

#  Homebrew: sudo brew install tiff
ifneq (,$(findstring TIFF,$(FEATURES)))
FEATURES += GD
CFLAGS += -DHAVE_GD_TIFF
endif

#  Homebrew: sudo brew install webp
ifneq (,$(findstring VPX,$(FEATURES)))
FEATURES += GD
CFLAGS += -DHAVE_GD_VPX
endif

#  Homebrew: sudo brew install gd2
ifneq (,$(findstring GD,$(FEATURES)))
OBJS += gd.o
LDFLAGS += -lgd
FFLAGS4 += -DHAVE_GD
endif

#  Quartz driver for Cairo - not working so do not
#  activate this feature
ifneq (,$(findstring CAIRO_QUARTZ,$(FEATURES)))
OBJS += cairo.o
FEATURES += CAIRO
LDFLAGS += -framework Carbon
endif

#  Homebrew: sudo brew install cairo
ifneq (,$(findstring CAIRO,$(FEATURES)))
OBJS += cairo.o
FEATURES += X11
FFLAGS4 += -DHAVE_CAIRO -DHAVE_X11
CFLAGS += -DHAVE_X11 `pkg-config --cflags cairo`
LDFLAGS += `pkg-config --libs cairo`
endif

#  Homebrew: sudo brew install plotutils
ifneq (,$(findstring PLOT,$(FEATURES)))
OBJS += libplot.o
FEATURES += X11
LDFLAGS += -lplot
FFLAGS4 += -DHAVE_LIBPLOT
endif

ifneq (,$(findstring X11,$(FEATURES)))
OBJS += x11.o
CFLAGS  += -I/opt/X11/include
FFLAGS4 += -DHAVE_X11
LDFLAGS += -L/opt/X11/lib -lX11 -lXft
endif

# ifneq (,$(findstring AQUA,$(FEATURES)))
# OBJS += aqua.o
# LDFLAGS += -F/Library/Frameworks -framework AquaTerm -lobjc
# FFLAGS4 += -DHAVE_AQUA
# #CFLAGS += -I/opt/homebrew/Library/Frameworks/AquaTerm.framework/Versions/Current/Headers
# CFLAGS += -I/Library/Frameworks/AquaTerm.framework/Versions/Current/Headers
# endif



all: xdataplot dataplot

dataplot: $(OBJS)
	$(FC) -o $@  $(OBJS)  $(LDFLAGS)

dp1.o: dp1.F
	$(FC) $(FFLAGS) $(DP1FLAGS) -c -o $@ $<

dp16.o: dp16.F
	$(FC) $(FFLAGS) $(FFLAGS4) -c -o $@ $<

dp24.o: dp24.F
	$(FC) $(FFLAGS) $(FFLAGS4) -c -o $@ $<

dp38.o: dp38.F
	$(FC) $(FFLAGS) $(FFLAGS4) -c -o $@ $<

gd.o: gd.c
	$(CC) $(CFLAGS) -c -o $@ $<

xdataplot:
	sed "s#\(^dplibdir=\).*#\1$(DPLIBDIR)#" < xdataplot.in > xdataplot
	sed "s#\(^library[[:space:]]\+unix[[:space:]]\+\).*#\1$(DPLIBDIR)#" < ../lib/frscript/xdpConfig.in > ../lib/frscript/xdpConfig


.PHONY: clean

clean:
	rm -f *.o dataplot xdataplot ../lib/frscript/xdpConfig

install: dataplot xdataplot
	@echo installing binary to $(BINDIR)
	-[ ! -d $(BINDIR) ] && mkdir -vp $(BINDIR) ||:
	install -pm 755 dataplot xdataplot  $(BINDIR)

	@echo installing libs to $(DPLIBDIR)
	-[ ! -d $(DPLIBDIR) ] && mkdir -vp $(DPLIBDIR) ||:
	cp -a ../lib/* $(DPLIBDIR)
